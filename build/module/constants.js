import { MaxUint256 } from '@ethersproject/constants'
import { ADDRESSES, BNT, ETH, ETH_BNT_ANCHOR } from '@xtoken/abis'
import { BigNumber } from 'ethers'
import { parseEther } from 'ethers/lib/utils'
export const DEC_18 = parseEther('1')
export const GAS_LIMIT_PERCENTAGE_DEFAULT = 110
export const GAS_LIMIT_PERCENTAGE_ETH = 120
export const MAX_UINT = MaxUint256
export const ZERO_NUMBER = BigNumber.from('0')
// DEX
export var Exchange
;(function (Exchange) {
  Exchange['BALANCER'] = 'Balancer'
  Exchange['BANCOR'] = 'Bancor'
  Exchange['INCH'] = '1Inch'
  Exchange['KYBER'] = 'Kyber'
  Exchange['UNISWAP'] = 'Uniswap'
  Exchange['XTOKEN'] = 'xToken'
})(Exchange || (Exchange = {}))
// Default values
export const DEFAULT_PRICES = Object.freeze({
  aum: 0,
  priceEth: 0,
  priceUsd: 0,
  sellPriceEth: 0,
})
export const DEFAULT_LP_PORTFOLIO_ITEM = Object.freeze({
  price: '0',
  quantity: '0',
  value: '0',
})
export const DEFAULT_PORTFOLIO_ITEM = Object.freeze({
  ...DEFAULT_LP_PORTFOLIO_ITEM,
  tokenEquivalent: '0',
})
export const DEFAULT_TOKEN_PRICES = Object.freeze({
  token0Price: parseEther('0'),
  token1Price: parseEther('0'),
})
// BNT->ETH path
export const BNT_ETH_PATH = [
  ADDRESSES[BNT][1],
  ADDRESSES[ETH_BNT_ANCHOR][1],
  ADDRESSES[ETH],
]
// ETH->BNT path
export const ETH_BNT_PATH = [
  ADDRESSES[ETH],
  ADDRESSES[ETH_BNT_ANCHOR][1],
  ADDRESSES[BNT][1],
]
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFDckQsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUNsRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBQ2xDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQTtBQUU3QyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ3JDLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLEdBQUcsQ0FBQTtBQUMvQyxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxHQUFHLENBQUE7QUFDM0MsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQTtBQUNsQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUU5QyxNQUFNO0FBQ04sTUFBTSxDQUFOLElBQVksUUFPWDtBQVBELFdBQVksUUFBUTtJQUNsQixpQ0FBcUIsQ0FBQTtJQUNyQiw2QkFBaUIsQ0FBQTtJQUNqQiwwQkFBYyxDQUFBO0lBQ2QsMkJBQWUsQ0FBQTtJQUNmLCtCQUFtQixDQUFBO0lBQ25CLDZCQUFpQixDQUFBO0FBQ25CLENBQUMsRUFQVyxRQUFRLEtBQVIsUUFBUSxRQU9uQjtBQUVELGlCQUFpQjtBQUNqQixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUMxQyxHQUFHLEVBQUUsQ0FBQztJQUNOLFFBQVEsRUFBRSxDQUFDO0lBQ1gsUUFBUSxFQUFFLENBQUM7SUFDWCxZQUFZLEVBQUUsQ0FBQztDQUNoQixDQUFDLENBQUE7QUFFRixNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ3JELEtBQUssRUFBRSxHQUFHO0lBQ1YsUUFBUSxFQUFFLEdBQUc7SUFDYixLQUFLLEVBQUUsR0FBRztDQUNYLENBQUMsQ0FBQTtBQUVGLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDbEQsR0FBRyx5QkFBeUI7SUFDNUIsZUFBZSxFQUFFLEdBQUc7Q0FDckIsQ0FBQyxDQUFBO0FBRUYsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoRCxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQztJQUM1QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQztDQUM3QixDQUFDLENBQUE7QUFFRixnQkFBZ0I7QUFDaEIsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHO0lBQzFCLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakIsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QixTQUFTLENBQUMsR0FBRyxDQUFXO0NBQ3pCLENBQUE7QUFFRCxnQkFBZ0I7QUFDaEIsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHO0lBQzFCLFNBQVMsQ0FBQyxHQUFHLENBQVc7SUFDeEIsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QixTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2xCLENBQUEifQ==
