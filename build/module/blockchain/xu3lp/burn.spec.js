import { X_U3LP_A, X_U3LP_B, X_U3LP_C, X_U3LP_D, X_U3LP_E, X_U3LP_F, X_U3LP_G, X_U3LP_H, } from '@xtoken/abis';
import test from 'ava';
import { provider } from '../../constants.spec';
import { getExpectedQuantityOnBurnXU3LP } from './burn';
test('Calculate expected quantity of DAI on burn of xU3LPa', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_A, 0, '1000', provider);
    console.log('Expected qty of DAI for 1000 xU3LPa:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
test('Calculate expected quantity of USDC on burn of xU3LPa', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_A, 1, '1000', provider);
    console.log('Expected qty of USDC for 1000 xU3LPa:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
test('Calculate expected quantity of USDC on burn of xU3LPb', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_B, 0, '1000', provider);
    console.log('Expected qty of USDC for 1000 xU3LPb:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
test('Calculate expected quantity of USDT on burn of xU3LPb', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_B, 1, '1000', provider);
    console.log('Expected qty of USDT for 1000 xU3LPb:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
test('Calculate expected quantity of sUSD on burn of xU3LPc', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_C, 0, '1000', provider);
    console.log('Expected qty of sUSD for 1000 xU3LPc:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
test('Calculate expected quantity of USDC on burn of xU3LPc', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_C, 1, '1000', provider);
    console.log('Expected qty of USDC for 1000 xU3LPc:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
test('Calculate expected quantity of sETH on burn of xU3LPd', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_D, 0, '1000', provider);
    console.log('Expected qty of sETH for 1000 xU3LPd:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
test('Calculate expected quantity of WETH on burn of xU3LPd', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_D, 1, '1000', provider);
    console.log('Expected qty of WETH for 1000 xU3LPd:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
test('Calculate expected quantity of WBTC on burn of xU3LPe', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_E, 0, '1000', provider);
    console.log('Expected qty of WBTC for 1000 xU3LPe:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
test('Calculate expected quantity of renBTC on burn of xU3LPe', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_E, 1, '1000', provider);
    console.log('Expected qty of renBTC for 1000 xU3LPe:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
test('Calculate expected quantity of USDC on burn of xU3LPf', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_F, 0, '1000', provider);
    console.log('Expected qty of USDC for 1000 xU3LPf:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
test('Calculate expected quantity of UST on burn of xU3LPf', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_F, 1, '1000', provider);
    console.log('Expected qty of UST for 1000 xU3LPf:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
test('Calculate expected quantity of FRAX on burn of xU3LPg', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_G, 0, '1000', provider);
    console.log('Expected qty of FRAX for 1000 xU3LPg:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
test('Calculate expected quantity of USDC on burn of xU3LPg', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_G, 1, '1000', provider);
    console.log('Expected qty of USDC for 1000 xU3LPg:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
test('Calculate expected quantity of BUSD on burn of xU3LPh', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_H, 0, '1000', provider);
    console.log('Expected qty of BUSD for 1000 xU3LPh:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
test('Calculate expected quantity of USDT on burn of xU3LPh', async (t) => {
    const expectedQty = await getExpectedQuantityOnBurnXU3LP(X_U3LP_H, 1, '1000', provider);
    console.log('Expected qty of USDT for 1000 xU3LPh:', expectedQty);
    t.true(Number(expectedQty) > 0);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVybi5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Jsb2NrY2hhaW4veHUzbHAvYnVybi5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxRQUFRLEVBQ1IsUUFBUSxFQUNSLFFBQVEsRUFDUixRQUFRLEVBQ1IsUUFBUSxFQUNSLFFBQVEsRUFDUixRQUFRLEVBQ1IsUUFBUSxHQUNULE1BQU0sY0FBYyxDQUFBO0FBQ3JCLE9BQU8sSUFBSSxNQUFNLEtBQUssQ0FBQTtBQUV0QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFFL0MsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sUUFBUSxDQUFBO0FBRXZELElBQUksQ0FBQyxzREFBc0QsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDdkUsTUFBTSxXQUFXLEdBQUcsTUFBTSw4QkFBOEIsQ0FDdEQsUUFBUSxFQUNSLENBQUMsRUFDRCxNQUFNLEVBQ04sUUFBUSxDQUNULENBQUE7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQ2hFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ2pDLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLHVEQUF1RCxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUN4RSxNQUFNLFdBQVcsR0FBRyxNQUFNLDhCQUE4QixDQUN0RCxRQUFRLEVBQ1IsQ0FBQyxFQUNELE1BQU0sRUFDTixRQUFRLENBQ1QsQ0FBQTtJQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsdUNBQXVDLEVBQUUsV0FBVyxDQUFDLENBQUE7SUFDakUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDakMsQ0FB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