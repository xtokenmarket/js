import { ethers } from 'ethers'
import { DEC_18, GAS_LIMIT_PERCENTAGE_DEFAULT } from '../../constants'
import { getPercentage } from '../../utils'
import { parseFees } from '../utils'
import { getXU3LPContracts } from './helper'
import { getXU3LPTokenPrices } from './prices'
const { formatEther, parseEther } = ethers.utils
export const burnXU3LP = async (symbol, outputAsset, amount, provider) => {
  const { xu3lpContract } = await getXU3LPContracts(symbol, provider)
  // Estimate `gasLimit`
  const gasLimit = getPercentage(
    await xu3lpContract.estimateGas.burn(outputAsset, amount),
    GAS_LIMIT_PERCENTAGE_DEFAULT
  )
  return xu3lpContract.burn(outputAsset, amount, {
    gasLimit,
  })
}
export const getExpectedQuantityOnBurnXU3LP = async (
  symbol,
  outputAsset,
  amount,
  provider
) => {
  const inputAmount = parseEther(amount)
  const { xu3lpContract } = await getXU3LPContracts(symbol, provider)
  const [
    nav,
    totalSupply,
    { burnFee },
    { token0Price, token1Price },
  ] = await Promise.all([
    xu3lpContract.getNav(),
    xu3lpContract.totalSupply(),
    xu3lpContract.feeDivisors(),
    getXU3LPTokenPrices(xu3lpContract),
  ])
  // Get amount in asset0 or asset1 terms
  const tokenPrice = !outputAsset ? token1Price : token0Price
  const BURN_FEE = parseFees(burnFee)
  const expectedQty = inputAmount
    .mul(tokenPrice)
    .mul(nav)
    .div(totalSupply)
    .div(DEC_18)
  return formatEther(expectedQty.mul(BURN_FEE).div(DEC_18))
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVybi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ibG9ja2NoYWluL3h1M2xwL2J1cm4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFnQixNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFFN0MsT0FBTyxFQUFFLE1BQU0sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBRXRFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUVwQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDNUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRTlDLE1BQU0sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQTtBQUVoRCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsS0FBSyxFQUM1QixNQUF1QixFQUN2QixXQUF5QixFQUN6QixNQUFpQixFQUNqQixRQUFzQixFQUNRLEVBQUU7SUFDaEMsTUFBTSxFQUFFLGFBQWEsRUFBRSxHQUFHLE1BQU0saUJBQWlCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBRW5FLHNCQUFzQjtJQUN0QixNQUFNLFFBQVEsR0FBRyxhQUFhLENBQzVCLE1BQU0sYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxFQUN6RCw0QkFBNEIsQ0FDN0IsQ0FBQTtJQUVELE9BQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFO1FBQzdDLFFBQVE7S0FDVCxDQUFDLENBQUE7QUFDSixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRyxLQUFLLEVBQ2pELE1BQXVCLEVBQ3ZCLFdBQXlCLEVBQ3pCLE1BQWMsRUFDZCxRQUFzQixFQUN0QixFQUFFO0lBQ0YsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3RDLE1BQU0sRUFBRSxhQUFhLEVBQUUsR0FBRyxNQUFNLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUVuRSxNQUFNLENBQ0osR0FBRyxFQUNILFdBQVcsRUFDWCxFQUFFLE9BQU8sRUFBRSxFQUNYLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxFQUM3QixHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUNwQixhQUFhLENBQUMsTUFBTSxFQUFFO1FBQ3RCLGFBQWEsQ0FBQyxXQUFXLEVBQUU7UUFDM0IsYUFBYSxDQUFDLFdBQVcsRUFBRTtRQUMzQixtQkFBbUIsQ0FBQyxhQUFhLENBQUM7S0FDbkMsQ0FBQyxDQUFBO0lBRUYsdUNBQXVDO0lBQ3ZDLE1BQU0sVUFBVSxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQTtJQUUzRCxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDbkMsTUFBTSxXQUFXLEdBQUcsV0FBVztTQUM1QixHQUFHLENBQUMsVUFBVSxDQUFDO1NBQ2YsR0FBRyxDQUFDLEdBQW1CLENBQUM7U0FDeEIsR0FBRyxDQUFDLFdBQTJCLENBQUM7U0FDaEMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRWQsT0FBTyxXQUFXLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtBQUMzRCxDQUFDLENBQUEifQ==
