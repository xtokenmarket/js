import { AAVE_X_AAVE_A_CLR, XTK_ETH_CLR } from '@xtoken/abis';
import test from 'ava';
import { provider } from '../../constants.spec';
import { getExpectedQuantityOnMintXAssetCLR, getPoolRatioXAssetCLR, } from './mint';
test(`Calculate ${AAVE_X_AAVE_A_CLR} expected quantity on mint with AAVE`, async (t) => {
    const { expectedQty } = await getExpectedQuantityOnMintXAssetCLR(AAVE_X_AAVE_A_CLR, 0, '10', provider);
    console.log(`Expected ${AAVE_X_AAVE_A_CLR} qty for 10 AAVE:`, expectedQty);
    t.true(Number(expectedQty) > 0);
});
test(`Calculate ${AAVE_X_AAVE_A_CLR} expected quantity on mint with xAAVEa`, async (t) => {
    const { expectedQty } = await getExpectedQuantityOnMintXAssetCLR(AAVE_X_AAVE_A_CLR, 1, '1000', provider);
    console.log(`Expected ${AAVE_X_AAVE_A_CLR} qty for 1000 xAAVEa:`, expectedQty);
    t.true(Number(expectedQty) > 0);
});
test(`Get ${AAVE_X_AAVE_A_CLR} pool ratio`, async (t) => {
    const poolRatio = await getPoolRatioXAssetCLR(AAVE_X_AAVE_A_CLR, provider);
    console.log(`Pool ratio of ${AAVE_X_AAVE_A_CLR}:`, poolRatio);
    t.true(Number(poolRatio) > 0);
});
test(`Calculate ${XTK_ETH_CLR} expected quantity on mint with XTK`, async (t) => {
    const { expectedQty } = await getExpectedQuantityOnMintXAssetCLR(XTK_ETH_CLR, 0, '100', provider);
    console.log(`Expected ${XTK_ETH_CLR} qty for 100 XTK:`, expectedQty);
    t.true(Number(expectedQty) > 0);
});
test(`Calculate ${XTK_ETH_CLR} expected quantity on mint with ETH`, async (t) => {
    const { expectedQty } = await getExpectedQuantityOnMintXAssetCLR(XTK_ETH_CLR, 1, '1', provider);
    console.log(`Expected ${XTK_ETH_CLR} qty for 1 ETH:`, expectedQty);
    t.true(Number(expectedQty) > 0);
});
test(`Get ${XTK_ETH_CLR} pool ratio`, async (t) => {
    const poolRatio = await getPoolRatioXAssetCLR(XTK_ETH_CLR, provider);
    console.log(`Pool ratio of ${XTK_ETH_CLR}:`, poolRatio);
    t.true(Number(poolRatio) > 0);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWludC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Jsb2NrY2hhaW4vY2xyL21pbnQuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQzdELE9BQU8sSUFBSSxNQUFNLEtBQUssQ0FBQTtBQUV0QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFFL0MsT0FBTyxFQUNMLGtDQUFrQyxFQUNsQyxxQkFBcUIsR0FDdEIsTUFBTSxRQUFRLENBQUE7QUFFZixJQUFJLENBQUMsYUFBYSxpQkFBaUIsc0NBQXNDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3JGLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxNQUFNLGtDQUFrQyxDQUM5RCxpQkFBaUIsRUFDakIsQ0FBQyxFQUNELElBQUksRUFDSixRQUFRLENBQ1QsQ0FBQTtJQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxpQkFBaUIsbUJBQW1CLEVBQUUsV0FBVyxDQUFDLENBQUE7SUFDMUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDakMsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsYUFBYSxpQkFBaUIsd0NBQXdDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ3ZGLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxNQUFNLGtDQUFrQyxDQUM5RCxpQkFBaUIsRUFDakIsQ0FBQyxFQUNELE1BQU0sRUFDTixRQUFRLENBQ1QsQ0FBQTtJQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxpQkFBaUIsdUJBQXVCLEVBQUUsV0FBVyxDQUFDLENBQUE7SUFDOUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDakMsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsT0FBTyxpQkFBaUIsYUFBYSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUN0RCxNQUFNLFNBQVMsR0FBRyxNQUFNLHFCQUFxQixDQUFDLGlCQUFpQixFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQzFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLGlCQUFpQixHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDN0QsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDL0IsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsYUFBYSxXQUFXLHFDQUFxQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUM5RSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsTUFBTSxrQ0FBa0MsQ0FDOUQsV0FBVyxFQUNYLENBQUMsRUFDRCxLQUFLLEVBQ0wsUUFBUSxDQUNULENBQUE7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksV0FBVyxtQkFBbUIsRUFBRSxXQUFXLENBQUMsQ0FBQTtJQUNwRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNqQyxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQyxhQUFhLFdBQVcscUNBQXFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQzlFLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxNQUFNLGtDQUFrQyxDQUM5RCxXQUFXLEVBQ1gsQ0FBQyxFQUNELEdBQUcsRUFDSCxRQUFRLENBQ1QsQ0FBQTtJQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxXQUFXLGlCQUFpQixFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQ2xFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ2pDLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLE9BQU8sV0FBVyxhQUFhLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ2hELE1BQU0sU0FBUyxHQUFHLE1BQU0scUJBQXFCLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ3BFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLFdBQVcsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQ3ZELENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQy9CLENBQUMsQ0FBQyxDQUFBIn0=