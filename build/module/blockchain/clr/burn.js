import { ethers } from 'ethers'
import { GAS_LIMIT_PERCENTAGE_DEFAULT } from '../../constants'
import { getPercentage } from '../../utils'
import { getXAssetCLRContracts } from './helper'
const { formatEther, parseEther } = ethers.utils
export const burnXAssetCLR = async (symbol, amount, provider) => {
  const { xAssetCLRContract } = await getXAssetCLRContracts(symbol, provider)
  // Estimate `gasLimit`
  const gasLimit = getPercentage(
    await xAssetCLRContract.estimateGas.burn(amount),
    GAS_LIMIT_PERCENTAGE_DEFAULT
  )
  return xAssetCLRContract.burn(amount, {
    gasLimit,
  })
}
export const getExpectedQuantityOnBurnXAssetCLR = async (
  symbol,
  amount,
  provider
) => {
  const { xAssetCLRContract } = await getXAssetCLRContracts(symbol, provider)
  const [totalLiquidity, totalSupply] = await Promise.all([
    xAssetCLRContract.getTotalLiquidity(),
    xAssetCLRContract.totalSupply(),
  ])
  const proRataBalance = parseEther(amount).mul(totalLiquidity).div(totalSupply)
  const { amount0, amount1 } = await xAssetCLRContract.getAmountsForLiquidity(
    proRataBalance
  )
  return {
    0: formatEther(amount0),
    1: formatEther(amount1),
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVybi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ibG9ja2NoYWluL2Nsci9idXJuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFFL0IsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFFOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUUzQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFaEQsTUFBTSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFBO0FBRWhELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxLQUFLLEVBQ2hDLE1BQWtCLEVBQ2xCLE1BQWlCLEVBQ2pCLFFBQXNCLEVBQ1EsRUFBRTtJQUNoQyxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsR0FBRyxNQUFNLHFCQUFxQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUUzRSxzQkFBc0I7SUFDdEIsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUM1QixNQUFNLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQ2hELDRCQUE0QixDQUM3QixDQUFBO0lBRUQsT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3BDLFFBQVE7S0FDVCxDQUFDLENBQUE7QUFDSixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxrQ0FBa0MsR0FBRyxLQUFLLEVBQ3JELE1BQWtCLEVBQ2xCLE1BQWMsRUFDZCxRQUFzQixFQUNBLEVBQUU7SUFDeEIsTUFBTSxFQUFFLGlCQUFpQixFQUFFLEdBQUcsTUFBTSxxQkFBcUIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFFM0UsTUFBTSxDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDdEQsaUJBQWlCLENBQUMsaUJBQWlCLEVBQUU7UUFDckMsaUJBQWlCLENBQUMsV0FBVyxFQUFFO0tBQ2hDLENBQUMsQ0FBQTtJQUVGLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQzlFLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQyxzQkFBc0IsQ0FDekUsY0FBYyxDQUNmLENBQUE7SUFFRCxPQUFPO1FBQ0wsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxPQUFPLENBQUM7UUFDdkIsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxPQUFPLENBQUM7S0FDeEIsQ0FBQTtBQUNILENBQUMsQ0FBQSJ9
