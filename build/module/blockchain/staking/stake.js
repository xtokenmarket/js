import { Abi, ADDRESSES, XTK_MANAGEMENT_STAKING_MODULE } from '@xtoken/abis';
import { Contract } from 'ethers';
import { parseEther } from 'ethers/lib/utils';
import { getSigner, getSignerAddress } from '../utils';
import { getXtkStakingContract } from './helper';
const XTK_ADDRESS = '0x7f3edcdd180dbe4819bd98fee8929b5cedb3adeb';
export const approveXtk = async (amount, provider) => {
    const contract = new Contract(XTK_ADDRESS, Abi.ERC20, getSigner(provider));
    const network = await provider.getNetwork();
    return contract.approve(ADDRESSES[XTK_MANAGEMENT_STAKING_MODULE][network.chainId], amount);
};
export const stakeXtk = async (amount, provider) => {
    const inputAmount = parseEther(amount);
    const stakingContract = await getXtkStakingContract(provider);
    const address = await getSignerAddress(provider);
    const approvedAmount = await _getApprovedAmount(address, provider);
    if (approvedAmount.lt(inputAmount)) {
        return Promise.reject(new Error('Please approve the tokens before staking'));
    }
    return stakingContract.stake(inputAmount);
};
const _getApprovedAmount = async (address, provider) => {
    const xtkContract = new Contract(XTK_ADDRESS, Abi.ERC20, provider);
    const network = await provider.getNetwork();
    return xtkContract.allowance(address, ADDRESSES[XTK_MANAGEMENT_STAKING_MODULE][network.chainId]);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rha2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmxvY2tjaGFpbi9zdGFraW5nL3N0YWtlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQzVFLE9BQU8sRUFBYSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFDNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBRTdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFdEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRWhELE1BQU0sV0FBVyxHQUFHLDRDQUE0QyxDQUFBO0FBRWhFLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsTUFBaUIsRUFBRSxRQUFzQixFQUFFLEVBQUU7SUFDNUUsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7SUFDMUUsTUFBTSxPQUFPLEdBQUcsTUFBTSxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUE7SUFFM0MsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUNyQixTQUFTLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQ3pELE1BQU0sQ0FDUCxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLEtBQUssRUFBRSxNQUFjLEVBQUUsUUFBc0IsRUFBRSxFQUFFO0lBQ3ZFLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN0QyxNQUFNLGVBQWUsR0FBRyxNQUFNLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQzdELE1BQU0sT0FBTyxHQUFHLE1BQU0sZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDaEQsTUFBTSxjQUFjLEdBQUcsTUFBTSxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFFbEUsSUFBSSxjQUFjLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1FBQ2xDLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDLENBQUE7S0FDN0U7SUFFRCxPQUFPLGVBQWUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDM0MsQ0FBQyxDQUFBO0FBRUQsTUFBTSxrQkFBa0IsR0FBRyxLQUFLLEVBQUUsT0FBZSxFQUFFLFFBQXNCLEVBQUUsRUFBRTtJQUMzRSxNQUFNLFdBQVcsR0FBRyxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNsRSxNQUFNLE9BQU8sR0FBRyxNQUFNLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUUzQyxPQUFPLFdBQVcsQ0FBQyxTQUFTLENBQzFCLE9BQU8sRUFDUCxTQUFTLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQzFELENBQUE7QUFDSCxDQUFDLENBQUEifQ==