import {
  LENDING_COMPTROLLER,
  LENDING_LIQUIDITY_POOL,
  LENDING_LPT,
  LENDING_X_AAVE_A_MARKET,
  LENDING_X_AAVE_A_PRICE,
  LENDING_X_AAVE_B_MARKET,
  LENDING_X_AAVE_B_PRICE,
  LENDING_X_INCH_A_MARKET,
  LENDING_X_INCH_A_PRICE,
  LENDING_X_INCH_B_MARKET,
  LENDING_X_INCH_B_PRICE,
  LENDING_X_KNC_A_MARKET,
  LENDING_X_KNC_A_PRICE,
  LENDING_X_KNC_B_MARKET,
  LENDING_X_KNC_B_PRICE,
} from '@xtoken/abis'
import { Errors } from '../../constants'
import { getContract } from '../utils'
const CONTRACT_ERROR = new Error(Errors.CONTRACT_INITIALIZATION_FAILED)
export const getComptrollerContract = async (provider) => {
  const network = await provider.getNetwork()
  const comptrollerContract = getContract(
    LENDING_COMPTROLLER,
    provider,
    network
  )
  if (!comptrollerContract) {
    return Promise.reject(CONTRACT_ERROR)
  }
  return comptrollerContract
}
export const getLiquidityPoolContract = async (provider) => {
  const network = await provider.getNetwork()
  const liquidityPoolContract = getContract(
    LENDING_LIQUIDITY_POOL,
    provider,
    network
  )
  if (!liquidityPoolContract) {
    return Promise.reject(CONTRACT_ERROR)
  }
  return liquidityPoolContract
}
export const getLPTContract = async (provider) => {
  const network = await provider.getNetwork()
  const lptContract = getContract(LENDING_LPT, provider, network)
  if (!lptContract) {
    return Promise.reject(CONTRACT_ERROR)
  }
  return lptContract
}
export const getMarketContracts = async (provider) => {
  const network = await provider.getNetwork()
  // xAAVE Market Contracts
  const xAAVEaMarketContract = getContract(
    LENDING_X_AAVE_A_MARKET,
    provider,
    network
  )
  const xAAVEbMarketContract = getContract(
    LENDING_X_AAVE_B_MARKET,
    provider,
    network
  )
  // xINCH Market Contracts
  const xINCHaMarketContract = getContract(
    LENDING_X_INCH_A_MARKET,
    provider,
    network
  )
  const xINCHbMarketContract = getContract(
    LENDING_X_INCH_B_MARKET,
    provider,
    network
  )
  // xKNC Market Contracts
  const xKNCaMarketContract = getContract(
    LENDING_X_KNC_A_MARKET,
    provider,
    network
  )
  const xKNCbMarketContract = getContract(
    LENDING_X_KNC_B_MARKET,
    provider,
    network
  )
  if (
    !xAAVEaMarketContract ||
    !xAAVEbMarketContract ||
    !xINCHaMarketContract ||
    !xINCHbMarketContract ||
    !xKNCaMarketContract ||
    !xKNCbMarketContract
  ) {
    return Promise.reject(CONTRACT_ERROR)
  }
  return {
    [LENDING_X_AAVE_A_MARKET]: xAAVEaMarketContract,
    [LENDING_X_AAVE_B_MARKET]: xAAVEbMarketContract,
    [LENDING_X_INCH_A_MARKET]: xINCHaMarketContract,
    [LENDING_X_INCH_B_MARKET]: xINCHbMarketContract,
    [LENDING_X_KNC_A_MARKET]: xKNCaMarketContract,
    [LENDING_X_KNC_B_MARKET]: xKNCbMarketContract,
  }
}
export const getPricingContracts = async (provider) => {
  const network = await provider.getNetwork()
  // xAAVE Price Contracts
  const xAAVEaPriceContract = getContract(
    LENDING_X_AAVE_A_PRICE,
    provider,
    network
  )
  const xAAVEbPriceContract = getContract(
    LENDING_X_AAVE_B_PRICE,
    provider,
    network
  )
  // xINCH Price Contracts
  const xINCHaPriceContract = getContract(
    LENDING_X_INCH_A_PRICE,
    provider,
    network
  )
  const xINCHbPriceContract = getContract(
    LENDING_X_INCH_B_PRICE,
    provider,
    network
  )
  // xKNC Price Contracts
  const xKNCaPriceContract = getContract(
    LENDING_X_KNC_A_PRICE,
    provider,
    network
  )
  const xKNCbPriceContract = getContract(
    LENDING_X_KNC_B_PRICE,
    provider,
    network
  )
  if (
    !xAAVEaPriceContract ||
    !xAAVEbPriceContract ||
    !xINCHaPriceContract ||
    !xINCHbPriceContract ||
    !xKNCaPriceContract ||
    !xKNCbPriceContract
  ) {
    return Promise.reject(CONTRACT_ERROR)
  }
  return {
    [LENDING_X_AAVE_A_PRICE]: xAAVEaPriceContract,
    [LENDING_X_AAVE_B_PRICE]: xAAVEbPriceContract,
    [LENDING_X_INCH_A_PRICE]: xINCHaPriceContract,
    [LENDING_X_INCH_B_PRICE]: xINCHbPriceContract,
    [LENDING_X_KNC_A_PRICE]: xKNCaPriceContract,
    [LENDING_X_KNC_B_PRICE]: xKNCbPriceContract,
  }
}
export const getLendingContracts = async (provider) => {
  const [
    comptrollerContract,
    liquidityPoolContract,
    lptContract,
    marketContracts,
    pricingContracts,
  ] = await Promise.all([
    getComptrollerContract(provider),
    getLiquidityPoolContract(provider),
    getLPTContract(provider),
    getMarketContracts(provider),
    getPricingContracts(provider),
  ])
  return {
    comptrollerContract,
    liquidityPoolContract,
    lptContract,
    marketContracts,
    pricingContracts,
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Jsb2NrY2hhaW4vbGVuZGluZy9oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNMLG1CQUFtQixFQUNuQixzQkFBc0IsRUFDdEIsV0FBVyxFQUNYLHVCQUF1QixFQUN2QixzQkFBc0IsRUFDdEIsdUJBQXVCLEVBQ3ZCLHNCQUFzQixFQUN0Qix1QkFBdUIsRUFDdkIsc0JBQXNCLEVBQ3RCLHVCQUF1QixFQUN2QixzQkFBc0IsRUFDdEIsc0JBQXNCLEVBQ3RCLHFCQUFxQixFQUNyQixzQkFBc0IsRUFDdEIscUJBQXFCLEdBQ3RCLE1BQU0sY0FBYyxDQUFBO0FBRXJCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQVd4QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRXRDLE1BQU0sY0FBYyxHQUFHLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFBO0FBRXZFLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLEtBQUssRUFBRSxRQUFzQixFQUFFLEVBQUU7SUFDckUsTUFBTSxPQUFPLEdBQUcsTUFBTSxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDM0MsTUFBTSxtQkFBbUIsR0FBRyxXQUFXLENBQ3JDLG1CQUFtQixFQUNuQixRQUFRLEVBQ1IsT0FBTyxDQUNPLENBQUE7SUFDaEIsSUFBSSxDQUFDLG1CQUFtQixFQUFFO1FBQ3hCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQTtLQUN0QztJQUNELE9BQU8sbUJBQW1CLENBQUE7QUFDNUIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsS0FBSyxFQUFFLFFBQXNCLEVBQUUsRUFBRTtJQUN2RSxNQUFNLE9BQU8sR0FBRyxNQUFNLFFBQVEsQ0FBQyxVQUFVLEVB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
