import test from 'ava'
import { provider, testAddress } from '../../constants.spec'
import {
  getBorrowRatePerBlock,
  getLPTBaseValue,
  getLPTValue,
  getOptimalUtilizationRate,
  getUpdatedBorrowBy,
} from './liquidityPool'
test('Get borrow rate per block', async (t) => {
  const borrowRatePerBlock = await getBorrowRatePerBlock(provider)
  console.log('[Lending] Borrow rate per block:', borrowRatePerBlock)
  t.true(Number(borrowRatePerBlock) > 0)
})
test('Get base LPT value', async (t) => {
  const lptBaseValue = await getLPTBaseValue(provider)
  console.log('[Lending] LPT Base Value:', lptBaseValue)
  t.true(Number(lptBaseValue) === 10)
})
test('Get LPT value', async (t) => {
  const lptValue = await getLPTValue(provider)
  console.log('[Lending] LPT Value:', lptValue)
  t.true(Number(lptValue) === 10)
})
test('Get optimal utilization rate', async (t) => {
  const optimalUtilizationRate = await getOptimalUtilizationRate(provider)
  console.log('[Lending] Utilization rate:', optimalUtilizationRate)
  t.true(Number(optimalUtilizationRate) === 80)
})
test('Get updated borrow by test address', async (t) => {
  const updatedBorrowBy = await getUpdatedBorrowBy(testAddress, provider)
  console.log('[Lending] Updated borrow by test address:', updatedBorrowBy)
  t.true(Number(updatedBorrowBy) === 0)
})
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlxdWlkaXR5UG9vbC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Jsb2NrY2hhaW4vbGVuZGluZy9saXF1aWRpdHlQb29sLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sS0FBSyxDQUFBO0FBRXRCLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFFNUQsT0FBTyxFQUNMLHFCQUFxQixFQUNyQixlQUFlLEVBQ2YsV0FBVyxFQUNYLHlCQUF5QixFQUN6QixrQkFBa0IsR0FDbkIsTUFBTSxpQkFBaUIsQ0FBQTtBQUV4QixJQUFJLENBQUMsMkJBQTJCLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQzVDLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNoRSxPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxFQUFFLGtCQUFrQixDQUFDLENBQUE7SUFDbkUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUN4QyxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDckMsTUFBTSxZQUFZLEdBQUcsTUFBTSxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxZQUFZLENBQUMsQ0FBQTtJQUN0RCxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQTtBQUNyQyxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQyxlQUFlLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ2hDLE1BQU0sUUFBUSxHQUFHLE1BQU0sV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDN0MsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7QUFDakMsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsOEJBQThCLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQy9DLE1BQU0sc0JBQXNCLEdBQUcsTUFBTSx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUN4RSxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixFQUFFLHNCQUFzQixDQUFDLENBQUE7SUFDbEUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQTtBQUMvQyxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDckQsTUFBTSxlQUFlLEdBQUcsTUFBTSxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDdkUsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQ0FBMkMsRUFBRSxlQUFlLENBQUMsQ0FBQTtJQUN6RSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN2QyxDQUFDLENBQUMsQ0FBQSJ9
