import { BigNumber } from '@ethersproject/bignumber';
import { BUY, ETH, WBTC, X_BTC_3X, X_ETH_3X } from '@xtoken/abis';
import { formatEther, parseUnits } from 'ethers/lib/utils';
import { DEC_18, GAS_LIMIT_PERCENTAGE_DEFAULT, GAS_LIMIT_PERCENTAGE_ETH, MAX_UINT, } from '../../constants';
import { getPercentage } from '../../utils';
import { getUniswapV3EstimatedQty } from '../exchanges/uniswapV3';
import { getSignerAddress, getXAssetLevTokenSymbol, parseFees } from '../utils';
import { getXAssetLevContracts } from './helper';
export const approveXAssetLev = async (symbol, amount, provider, spenderAddress) => {
    const { tokenContract, xassetlevContract } = await getXAssetLevContracts(symbol, provider);
    if (symbol === X_BTC_3X && !amount.eq(MAX_UINT)) {
        amount = amount.div('10000000000');
    }
    const address = spenderAddress || xassetlevContract.address;
    const contract = spenderAddress ? xassetlevContract : tokenContract;
    // estimate gasLimit
    const gasLimit = getPercentage(await contract.estimateGas.approve(address, amount), GAS_LIMIT_PERCENTAGE_DEFAULT);
    return contract.approve(address, amount, { gasLimit });
};
export const getExpectedQuantityOnMintXAssetLev = async (symbol, tradeWithEth, amount, provider) => {
    const tokenSymbol = getXAssetLevTokenSymbol(symbol);
    const { xassetlevContract } = await getXAssetLevContracts(symbol, provider);
    const [{ bufferBalance, marketBalance }, xassetlevSupply, { mintFee },] = await Promise.all([
        xassetlevContract.getFundBalances(),
        xassetlevContract.totalSupply(),
        xassetlevContract.feeDivisors(),
    ]);
    const MINT_FEE = parseFees(mintFee);
    const inputAmount = parseUnits(amount, tokenSymbol === WBTC ? 8 : 18);
    const ethToTrade = inputAmount.mul(MINT_FEE);
    let tokenExpected;
    if (tradeWithEth && symbol !== X_ETH_3X) {
        tokenExpected = parseUnits(await getUniswapV3EstimatedQty(ETH, tokenSymbol, amount, BUY, BigNumber.from('10000'), // 1% Uniswap V3 trade fees
        provider), tokenSymbol === WBTC ? 8 : 18).mul(DEC_18);
    }
    else {
        tokenExpected = ethToTrade;
    }
    const xassetlevExpected = tokenExpected
        .mul(xassetlevSupply)
        .div(bufferBalance.add(marketBalance))
        .div(DEC_18);
    return formatEther(xassetlevExpected);
};
export const mintXAssetLev = async (symbol, tradeWithEth, amount, provider) => {
    const { tokenContract, xassetlevContract } = await getXAssetLevContracts(symbol, provider);
    if (symbol === X_BTC_3X) {
        amount = amount.div('10000000000');
    }
    if (tradeWithEth) {
        // estimate gasLimit
        const gasLimit = getPercentage(await xassetlevContract.estimateGas.mint('1', {
            value: amount,
        }), GAS_LIMIT_PERCENTAGE_ETH);
        return xassetlevContract.mint('1', {
            gasLimit,
            value: amount,
        });
    }
    else {
        const address = await getSignerAddress(provider);
        const approvedAmount = await _getApprovedAmount(tokenContract, xassetlevContract, address);
        if (approvedAmount.lt(amount)) {
            return Promise.reject(new Error('Please approve the tokens before minting'));
        }
        // estimate gasLimit
        const gasLimit = getPercentage(await xassetlevContract.estimateGas.mintWithToken(amount), GAS_LIMIT_PERCENTAGE_DEFAULT);
        return xassetlevContract.mintWithToken(amount, { gasLimit });
    }
};
const _getApprovedAmount = async (tokenContract, xassetlevContract, address) => {
    return tokenContract.allowance(address, xassetlevContract.address);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ibG9ja2NoYWluL2xldi9taW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUdwRCxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUNqRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBRTFELE9BQU8sRUFDTCxNQUFNLEVBQ04sNEJBQTRCLEVBQzVCLHdCQUF3QixFQUN4QixRQUFRLEdBQ1QsTUFBTSxpQkFBaUIsQ0FBQTtBQUd4QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQzNDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHdCQUF3QixDQUFBO0FBQ2pFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFL0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRWhELE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEtBQUssRUFDbkMsTUFBa0IsRUFDbEIsTUFBaUIsRUFDakIsUUFBc0IsRUFDdEIsY0FBdUIsRUFDTyxFQUFFO0lBQ2hDLE1BQU0sRUFBRSxhQUFhLEVBQUUsaUJBQWlCLEVBQUUsR0FBRyxNQUFNLHFCQUFxQixDQUN0RSxNQUFNLEVBQ04sUUFBUSxDQUNULENBQUE7SUFFRCxJQUFJLE1BQU0sS0FBSyxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQy9DLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0tBQ25DO0lBRUQsTUFBTSxPQUFPLEdBQUcs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