import { BigNumber } from '@ethersproject/bignumber';
import { ETH, SELL, WBTC, X_BTC_3X, X_ETH_3X } from '@xtoken/abis';
import { ethers } from 'ethers';
import { formatUnits, parseEther } from 'ethers/lib/utils';
import { DEC_18, GAS_LIMIT_PERCENTAGE_DEFAULT, GAS_LIMIT_PERCENTAGE_ETH, } from '../../constants';
import { getPercentage } from '../../utils';
import { getUniswapV3EstimatedQty } from '../exchanges/uniswapV3';
import { getXAssetLevTokenSymbol, parseFees } from '../utils';
import { getXAssetLevContracts } from './helper';
const { formatEther } = ethers.utils;
export const burnXAssetLev = async (symbol, sellForEth, amount, provider) => {
    const { xassetlevContract } = await getXAssetLevContracts(symbol, provider);
    if (symbol === X_BTC_3X) {
        amount = amount.div('10000000000');
    }
    // estimate gasLimit
    const gasLimit = getPercentage(await xassetlevContract.estimateGas.burn(amount, sellForEth, '1'), sellForEth ? GAS_LIMIT_PERCENTAGE_ETH : GAS_LIMIT_PERCENTAGE_DEFAULT);
    return xassetlevContract.burn(amount, sellForEth, '0', {
        gasLimit,
    });
};
export const getExpectedQuantityOnBurnXAssetLev = async (symbol, sellForEth, amount, provider) => {
    const inputAmount = parseEther(amount);
    const tokenSymbol = getXAssetLevTokenSymbol(symbol);
    const { xassetlevContract } = await getXAssetLevContracts(symbol, provider);
    const { BURN_FEE, proRataToken } = await getProRataToken(xassetlevContract, inputAmount);
    let expectedQty;
    if (!sellForEth || symbol === X_ETH_3X) {
        if (symbol === X_BTC_3X) {
            expectedQty = proRataToken.mul('10000000000');
        }
        else {
            expectedQty = proRataToken;
        }
    }
    else {
        expectedQty = parseEther(await getUniswapV3EstimatedQty(ETH, tokenSymbol, formatUnits(proRataToken, tokenSymbol === WBTC ? 8 : 18), SELL, BigNumber.from('10000'), // 1% Uniswap V3 trade fees
        provider));
    }
    return formatEther(expectedQty.mul(BURN_FEE).div(DEC_18));
};
const getProRataToken = async (xassetlevContract, amount) => {
    const [{ bufferBalance, marketBalance }, xassetlevSupply, { burnFee },] = await Promise.all([
        xassetlevContract.getFundBalances(),
        xassetlevContract.totalSupply(),
        xassetlevContract.feeDivisors(),
    ]);
    const BURN_FEE = parseFees(burnFee);
    const proRataToken = bufferBalance
        .add(marketBalance)
        .mul(amount)
        .div(xassetlevSupply);
    return { BURN_FEE, proRataToken };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVybi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ibG9ja2NoYWluL2xldi9idXJuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUdwRCxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUNsRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBQy9CLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFMUQsT0FBTyxFQUNMLE1BQU0sRUFDTiw0QkFBNEIsRUFDNUIsd0JBQXdCLEdBQ3pCLE1BQU0saUJBQWlCLENBQUE7QUFHeEIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUMzQyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQTtBQUNqRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRTdELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUVoRCxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQTtBQUVwQyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsS0FBSyxFQUNoQyxNQUFrQixFQUNsQixVQUFtQixFQUNuQixNQUFpQixFQUNqQixRQUFzQixFQUNRLEVBQUU7SUFDaEMsTUFBTSxFQUFFLGlCQUFpQixFQUFFLEdBQUcsTUFBTSxxQkFBcUIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFFM0UsSUFBSSxNQUFNLEtBQUssUUFBUSxFQUFFO1FBQ3ZCLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0tBQ25DO0lB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