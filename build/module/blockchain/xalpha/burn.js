import { BigNumber } from '@ethersproject/bignumber'
import { ETH, SELL, X_ALPHA_A } from '@xtoken/abis'
import { ethers } from 'ethers'
import {
  DEC_18,
  GAS_LIMIT_PERCENTAGE_DEFAULT,
  GAS_LIMIT_PERCENTAGE_ETH,
} from '../../constants'
import { getPercentage } from '../../utils'
import { getUniswapV3EstimatedQty } from '../exchanges/uniswapV3'
import { parseFees } from '../utils'
import { getXAlphaContracts } from './helper'
const { formatEther, parseEther } = ethers.utils
export const burnXAlpha = async (symbol, sellForEth, amount, provider) => {
  const { xalphaContract } = await getXAlphaContracts(symbol, provider)
  // estimate gasLimit
  const gasLimit = getPercentage(
    await xalphaContract.estimateGas.burn(amount, sellForEth, '1'),
    sellForEth ? GAS_LIMIT_PERCENTAGE_ETH : GAS_LIMIT_PERCENTAGE_DEFAULT
  )
  return xalphaContract.burn(amount, sellForEth, '0', {
    gasLimit,
  })
}
export const getExpectedQuantityOnBurnXAlpha = async (
  symbol,
  sellForEth,
  amount,
  provider
) => {
  const inputAmount = parseEther(amount)
  const { xalphaContract } = await getXAlphaContracts(symbol, provider)
  const { BURN_FEE, proRataAlpha } = await getProRataAlpha(
    xalphaContract,
    inputAmount
  )
  let expectedQty
  if (!sellForEth) {
    expectedQty = proRataAlpha
  } else {
    expectedQty = parseEther(
      await getUniswapV3EstimatedQty(
        ETH,
        X_ALPHA_A,
        formatEther(proRataAlpha),
        SELL,
        BigNumber.from('10000'), // 1% Uniswap V3 trade fees
        provider
      )
    )
  }
  return formatEther(expectedQty.mul(BURN_FEE).div(DEC_18))
}
const getProRataAlpha = async (xalphaContract, amount) => {
  const [alphaHoldings, xalphaSupply, { burnFee }] = await Promise.all([
    xalphaContract.getNav(),
    xalphaContract.totalSupply(),
    xalphaContract.feeDivisors(),
  ])
  const BURN_FEE = parseFees(burnFee)
  const proRataAlpha = alphaHoldings.mul(amount).div(xalphaSupply)
  return { BURN_FEE, proRataAlpha }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVybi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ibG9ja2NoYWluL3hhbHBoYS9idXJuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUdwRCxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDbkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUUvQixPQUFPLEVBQ0wsTUFBTSxFQUNOLDRCQUE0QixFQUM1Qix3QkFBd0IsR0FDekIsTUFBTSxpQkFBaUIsQ0FBQTtBQUd4QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQzNDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHdCQUF3QixDQUFBO0FBQ2pFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFcEMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRTdDLE1BQU0sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQTtBQUVoRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUM3QixNQUFxQixFQUNyQixVQUFtQixFQUNuQixNQUFpQixFQUNqQixRQUFzQixFQUNRLEVBQUU7SUFDaEMsTUFBTSxFQUFFLGNBQWMsRUFBRSxHQUFHLE1BQU0sa0JBQWtCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBRXJFLG9CQUFvQjtJQUNwQixNQUFNLFFBQVEsR0FBRyxhQUFhLENBQzVCLE1BQU0sY0FBYyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLENBQUMsRUFDOUQsVUFBVSxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsNEJBQTRCLENBQ3JFLENBQUE7SUFFRCxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUU7UUFDbEQsUUFBUTtLQUNULENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUFHLEtBQUssRUFDbEQsTUFBcUIsRUFDckIsVUFBbUIsRUFDbkIsTUFBYyxFQUNkLFFBQXNCLEVBQ3RCLEVBQUU7SUFDRixNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDdEMsTUFBTSxFQUFFLGNBQWMsRUFBRSxHQUFHLE1BQU0sa0JBQWtCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBRXJFLE1BQU0sRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLEdBQUcsTUFBTSxlQUFlLENBQ3RELGNBQWMsRUFDZCxXQUFXLENBQ1osQ0FBQTtJQUVELElBQUksV0FBc0IsQ0FBQTtJQUUxQixJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ2YsV0FBVyxHQUFHLFlBQVksQ0FBQTtLQUMzQjtTQUFNO1FBQ0wsV0FBVyxHQUFHLFVBQVUsQ0FDdEIsTUFBTSx3QkFBd0IsQ0FDNUIsR0FBRyxFQUNILFNBQVMsRUFDVCxXQUFXLENBQUMsWUFBWSxDQUFDLEVBQ3pCLElBQUksRUFDSixTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLDJCQUEyQjtRQUNwRCxRQUFRLENBQ1QsQ0FDRixDQUFBO0tBQ0Y7SUFFRCxPQUFPLFdBQVcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO0FBQzNELENBQUMsQ0FBQTtBQUVELE1BQU0sZUFBZSxHQUFHLEtBQUssRUFBRSxjQUFzQixFQUFFLE1BQWlCLEVBQUUsRUFBRTtJQUMxRSxNQUFNLENBQUMsYUFBYSxFQUFFLFlBQVksRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQ25FLGNBQWMsQ0FBQyxNQUFNLEVBQUU7UUFDdkIsY0FBYyxDQUFDLFdBQVcsRUFBRTtRQUM1QixjQUFjLENBQUMsV0FBVyxFQUFFO0tBQzdCLENBQUMsQ0FBQTtJQUVGLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNuQyxNQUFNLFlBQVksR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUVoRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxDQUFBO0FBQ25DLENBQUMsQ0FBQSJ9
