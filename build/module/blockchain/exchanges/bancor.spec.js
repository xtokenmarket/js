import { BUY, ETH, SELL, X_BNT_A } from '@xtoken/abis'
import test from 'ava'
import { isAddress } from 'ethers/lib/utils'
import { provider, testAddress } from '../../constants.spec'
import {
  getBancorEstimatedQuantity,
  getBancorNetworkAddress,
  getBancorPortfolioItem,
  getBntEthPrice,
} from './bancor'
test('Get Bancor Network address', async (t) => {
  const bancorNetworkAddress = await getBancorNetworkAddress(provider)
  console.log('[Bancor] Bancor Network address:', bancorNetworkAddress)
  t.true(isAddress(bancorNetworkAddress))
})
test('Get BNT ETH price', async (t) => {
  const minReturn = await getBntEthPrice(provider)
  console.log('[Bancor] minReturn:', minReturn)
  t.true(Number(minReturn) > 0)
})
test('Calculate expected quantity on burn of xBNTa with ETH on Bancor', async (t) => {
  const expectedQty = await getBancorEstimatedQuantity(
    ETH,
    X_BNT_A,
    '1000',
    SELL,
    provider
  )
  console.log('[Bancor] Expected ETH qty for 1000 xBNTa:', expectedQty)
  t.true(Number(expectedQty) > 0)
})
test('Calculate expected quantity on burn of xBNTa with BNT on Bancor', async (t) => {
  const expectedQty = await getBancorEstimatedQuantity(
    X_BNT_A,
    X_BNT_A,
    '1000',
    SELL,
    provider
  )
  console.log('[Bancor] Expected BNT qty for 1000 xBNTa:', expectedQty)
  t.true(Number(expectedQty) > 0)
})
test('Calculate expected quantity on mint of xBNTa on Bancor', async (t) => {
  const expectedQty = await getBancorEstimatedQuantity(
    ETH,
    X_BNT_A,
    '1',
    BUY,
    provider
  )
  console.log('[Bancor] Expected xBNTa qty for 1 ETH:', expectedQty)
  t.true(Number(expectedQty) > 0)
})
test('Calculate expected quantity on mint of xBNTa with BNT on Bancor', async (t) => {
  const expectedQty = await getBancorEstimatedQuantity(
    X_BNT_A,
    X_BNT_A,
    '100',
    BUY,
    provider
  )
  console.log('[Bancor] Expected xBNTa qty for 100 BNT:', expectedQty)
  t.true(Number(expectedQty) > 0)
})
test('Get Bancor Portfolio of xBNTa', async (t) => {
  const portfolio = await getBancorPortfolioItem(X_BNT_A, testAddress, provider)
  console.log('[Bancor] Portfolio value of xBNTa:', portfolio?.value)
  t.true(Number(portfolio?.value) > 0)
})
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFuY29yLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmxvY2tjaGFpbi9leGNoYW5nZXMvYmFuY29yLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUN0RCxPQUFPLElBQUksTUFBTSxLQUFLLENBQUE7QUFDdEIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBRTVDLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFFNUQsT0FBTyxFQUNMLDBCQUEwQixFQUMxQix1QkFBdUIsRUFDdkIsc0JBQXNCLEVBQ3RCLGNBQWMsR0FDZixNQUFNLFVBQVUsQ0FBQTtBQUVqQixJQUFJLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQzdDLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNwRSxPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxFQUFFLG9CQUFvQixDQUFDLENBQUE7SUFDckUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFBO0FBQ3pDLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNwQyxNQUFNLFNBQVMsR0FBRyxNQUFNLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNoRCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQzdDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQy9CLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLGlFQUFpRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNsRixNQUFNLFdBQVcsR0FBRyxNQUFNLDBCQUEwQixDQUNsRCxHQUFHLEVBQ0gsT0FBTyxFQUNQLE1BQU0sRUFDTixJQUFJLEVBQ0osUUFBUSxDQUNULENBQUE7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLDJDQUEyQyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQ3JFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ2pDLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLGlFQUFpRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNsRixNQUFNLFdBQVcsR0FBRyxNQUFNLDBCQUEwQixDQUNsRCxPQUFPLEVBQ1AsT0FBTyxFQUNQLE1BQU0sRUFDTixJQUFJLEVBQ0osUUFBUSxDQUNULENBQUE7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLDJDQUEyQyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQ3JFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ2pDLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLHdEQUF3RCxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUN6RSxNQUFNLFdBQVcsR0FBRyxNQUFNLDBCQUEwQixDQUNsRCxHQUFHLEVBQ0gsT0FBTyxFQUNQLEdBQUcsRUFDSCxHQUFHLEVBQ0gsUUFBUSxDQUNULENBQUE7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLHdDQUF3QyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQ2xFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ2pDLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLGlFQUFpRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNsRixNQUFNLFdBQVcsR0FBRyxNQUFNLDBCQUEwQixDQUNsRCxPQUFPLEVBQ1AsT0FBTyxFQUNQLEtBQUssRUFDTCxHQUFHLEVBQ0gsUUFBUSxDQUNULENBQUE7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLDBDQUEwQyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQ3BFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ2pDLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLCtCQUErQixFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNoRCxNQUFNLFNBQVMsR0FBRyxNQUFNLHNCQUFzQixDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDOUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDbkUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ3RDLENBQUMsQ0FBQyxDQUFBIn0=
