import { BUY, SELL, WBTC, X_AAVE_A } from '@xtoken/abis'
import test from 'ava'
import { arbitrumProvider, provider } from '../../constants.spec'
import {
  getEthUsdcPriceUniswapV3,
  getTokenEthPriceUniswapV3,
  getUniswapV3EstimatedQty,
} from './uniswapV3'
test('Calculate expected quantity on mint of xAAVEa on UniswapV3', async (t) => {
  const expectedQty = await getUniswapV3EstimatedQty(
    X_AAVE_A,
    X_AAVE_A,
    '1',
    BUY,
    undefined,
    provider
  )
  console.log('[UniswapV3] Expected xAAVEa qty for 1 AAVE:', expectedQty)
  t.true(Number(expectedQty) > 0)
})
test('Calculate expected quantity on burn of xAAVEa on UniswapV3', async (t) => {
  const expectedQty = await getUniswapV3EstimatedQty(
    X_AAVE_A,
    X_AAVE_A,
    '100',
    SELL,
    undefined,
    provider
  )
  console.log('[UniswapV3] Expected AAVE qty for 100 xAAVEa:', expectedQty)
  t.true(Number(expectedQty) > 0)
})
test('Get ETH price in USDC on UniswapV3', async (t) => {
  const expectedQtyMainnet = await getEthUsdcPriceUniswapV3(provider)
  console.log('[Mainnet/UniswapV3] 1 ETH price in USDC:', expectedQtyMainnet)
  t.true(Number(expectedQtyMainnet) > 0)
  const expectedQtyArbitrum = await getEthUsdcPriceUniswapV3(arbitrumProvider)
  console.log('[Arbitrum/UniswapV3] 1 ETH price in USDC:', expectedQtyArbitrum)
  t.true(Number(expectedQtyArbitrum) > 0)
})
test('Get WBTC price in USDC on UniswapV3', async (t) => {
  const wbtcEthPrice = await getTokenEthPriceUniswapV3(WBTC, arbitrumProvider)
  const ethUsdcPrice = await getEthUsdcPriceUniswapV3(arbitrumProvider)
  const wbtcUsdcPrice = Number(wbtcEthPrice) * Number(ethUsdcPrice)
  console.log('[Arbitrum] WBTC price in USDC on UniswapV3', wbtcUsdcPrice)
  t.true(Number(wbtcUsdcPrice) > 0)
})
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pc3dhcFYzLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmxvY2tjaGFpbi9leGNoYW5nZXMvdW5pc3dhcFYzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUN4RCxPQUFPLElBQUksTUFBTSxLQUFLLENBQUE7QUFFdEIsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBRWpFLE9BQU8sRUFDTCx3QkFBd0IsRUFDeEIseUJBQXlCLEVBQ3pCLHdCQUF3QixHQUN6QixNQUFNLGFBQWEsQ0FBQTtBQUVwQixJQUFJLENBQUMsNERBQTRELEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQzdFLE1BQU0sV0FBVyxHQUFHLE1BQU0sd0JBQXdCLENBQ2hELFFBQVEsRUFDUixRQUFRLEVBQ1IsR0FBRyxFQUNILEdBQUcsRUFDSCxTQUFTLEVBQ1QsUUFBUSxDQUNULENBQUE7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQ3ZFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ2pDLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLDREQUE0RCxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUM3RSxNQUFNLFdBQVcsR0FBRyxNQUFNLHdCQUF3QixDQUNoRCxRQUFRLEVBQ1IsUUFBUSxFQUNSLEtBQUssRUFDTCxJQUFJLEVBQ0osU0FBUyxFQUNULFFBQVEsQ0FDVCxDQUFBO0lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQywrQ0FBK0MsRUFBRSxXQUFXLENBQUMsQ0FBQTtJQUN6RSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtBQUNqQyxDQUFDLENBQUMsQ0FBQTtBQUVGLElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDckQsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ25FLE9BQU8sQ0FBQyxHQUFHLENBQUMsMENBQTBDLEVBQUUsa0JBQWtCLENBQUMsQ0FBQTtJQUMzRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBRXRDLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSx3QkFBd0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0lBQzVFLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkNBQTJDLEVBQUUsbUJBQW1CLENBQUMsQ0FBQTtJQUM3RSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ3pDLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUN0RCxNQUFNLFlBQVksR0FBRyxNQUFNLHlCQUF5QixDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFBO0lBQzVFLE1BQU0sWUFBWSxHQUFHLE1BQU0sd0JBQXdCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtJQUNyRSxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ2pFLE9BQU8sQ0FBQyxHQUFHLENBQUMsNENBQTRDLEVBQUUsYUFBYSxDQUFDLENBQUE7SUFDeEUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDbkMsQ0FBQyxDQUFDLENBQUEifQ==
