import { BUY, ETH, SELL, X_INCH_A, X_INCH_B } from '@xtoken/abis'
import test from 'ava'
import { provider, testAddress } from '../../constants.spec'
import { getInchEstimatedQuantity, getInchPortfolioItem } from './inch'
test('Calculate expected quantity on burn of xINCHa for ETH on 1Inch', async (t) => {
  const expectedQty = await getInchEstimatedQuantity(
    ETH,
    X_INCH_A,
    '1000',
    SELL,
    provider
  )
  console.log('[1Inch] Expected ETH qty for 1000 xINCHa:', expectedQty)
  t.true(Number(expectedQty) > 0)
})
test('Calculate expected quantity on burn of xINCHa for INCH on 1Inch', async (t) => {
  const expectedQty = await getInchEstimatedQuantity(
    X_INCH_A,
    X_INCH_A,
    '1000',
    SELL,
    provider
  )
  console.log('[1Inch] Expected INCH qty for 1000 xINCHa:', expectedQty)
  t.true(Number(expectedQty) > 0)
})
test('Calculate expected quantity on mint of xINCHa from ETH on 1Inch', async (t) => {
  const expectedQty = await getInchEstimatedQuantity(
    ETH,
    X_INCH_A,
    '1',
    BUY,
    provider
  )
  console.log('[1Inch] Expected xINCHa qty for 1 ETH:', expectedQty)
  t.true(Number(expectedQty) > 0)
})
test('Calculate expected quantity on mint of xINCHa from INCH on 1Inch', async (t) => {
  const expectedQty = await getInchEstimatedQuantity(
    X_INCH_A,
    X_INCH_A,
    '100',
    BUY,
    provider
  )
  console.log('[1Inch] Expected xINCHa qty for 100 INCH:', expectedQty)
  t.true(Number(expectedQty) > 0)
})
test('Get Inch Portfolio of xINCHa', async (t) => {
  const portfolio = await getInchPortfolioItem(X_INCH_A, testAddress, provider)
  console.log('[1Inch] Portfolio value of xINCHa:', portfolio?.value)
  t.true(Number(portfolio?.value) > 0)
})
test('Get Inch Portfolio of xINCHb', async (t) => {
  const portfolio = await getInchPortfolioItem(X_INCH_B, testAddress, provider)
  console.log('[1Inch] Portfolio value of xINCHb:', portfolio?.value)
  t.true(Number(portfolio?.value) > 0)
})
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5jaC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Jsb2NrY2hhaW4vZXhjaGFuZ2VzL2luY2guc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUNqRSxPQUFPLElBQUksTUFBTSxLQUFLLENBQUE7QUFFdEIsT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUU1RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFFdkUsSUFBSSxDQUFDLGdFQUFnRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNqRixNQUFNLFdBQVcsR0FBRyxNQUFNLHdCQUF3QixDQUNoRCxHQUFHLEVBQ0gsUUFBUSxFQUNSLE1BQU0sRUFDTixJQUFJLEVBQ0osUUFBUSxDQUNULENBQUE7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLDJDQUEyQyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQ3JFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ2pDLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLGlFQUFpRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNsRixNQUFNLFdBQVcsR0FBRyxNQUFNLHdCQUF3QixDQUNoRCxRQUFRLEVBQ1IsUUFBUSxFQUNSLE1BQU0sRUFDTixJQUFJLEVBQ0osUUFBUSxDQUNULENBQUE7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLDRDQUE0QyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQ3RFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ2pDLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLGlFQUFpRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNsRixNQUFNLFdBQVcsR0FBRyxNQUFNLHdCQUF3QixDQUNoRCxHQUFHLEVBQ0gsUUFBUSxFQUNSLEdBQUcsRUFDSCxHQUFHLEVBQ0gsUUFBUSxDQUNULENBQUE7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLHdDQUF3QyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQ2xFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ2pDLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLGtFQUFrRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNuRixNQUFNLFdBQVcsR0FBRyxNQUFNLHdCQUF3QixDQUNoRCxRQUFRLEVBQ1IsUUFBUSxFQUNSLEtBQUssRUFDTCxHQUFHLEVBQ0gsUUFBUSxDQUNULENBQUE7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLDJDQUEyQyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0lBQ3JFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ2pDLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUMvQyxNQUFNLFNBQVMsR0FBRyxNQUFNLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDN0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDbkUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ3RDLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUMvQyxNQUFNLFNBQVMsR0FBRyxNQUFNLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDN0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDbkUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ3RDLENBQUMsQ0FBQyxDQUFBIn0=
