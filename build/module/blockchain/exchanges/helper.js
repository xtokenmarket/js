import { BigNumber } from '@ethersproject/bignumber'
import { Abi, ADDRESSES, ETH, WETH } from '@xtoken/abis'
import { ethers } from 'ethers'
import { formatEther, parseEther } from 'ethers/lib/utils'
import { DEC_18 } from '../../constants'
import { getTokenSymbol } from '../utils'
import { getEthUsdcPrice } from './uniswap'
export const getBalances = async (
  symbol,
  poolAddress,
  tokenPrice,
  provider,
  chainId,
  underlyingPrice,
  isWeth
) => {
  // Addresses
  const xTokenAddress = ADDRESSES[symbol][chainId]
  // Contracts
  const xTokenContract = new ethers.Contract(xTokenAddress, Abi.ERC20, provider)
  let xTokenBalance = BigNumber.from('0')
  try {
    // Balances
    xTokenBalance = await xTokenContract.balanceOf(poolAddress)
  } catch (e) {
    console.error('Error while fetching user balance:', e)
  }
  // ETH price in USD
  const ethUsdcPrice = await getEthUsdcPrice(provider)
  const tokenVal = xTokenBalance
    .mul(parseEther(tokenPrice.toString()))
    .div(DEC_18)
  let ethVal
  let ethBalance
  if (isWeth) {
    const wethAddress = ADDRESSES[WETH][chainId]
    const wethContract = new ethers.Contract(wethAddress, Abi.ERC20, provider)
    const wethBalance = await wethContract.balanceOf(poolAddress)
    ethBalance = wethBalance
    ethVal = wethBalance.mul(parseEther(ethUsdcPrice)).div(DEC_18)
  } else {
    ethBalance = await provider.getBalance(poolAddress)
    ethVal = ethBalance.mul(parseEther(ethUsdcPrice)).div(DEC_18)
  }
  let underlying
  let underlyingVal = BigNumber.from('0')
  if (underlyingPrice) {
    const tokenSymbol = getTokenSymbol(symbol)
    const underlyingToken = tokenSymbol.toUpperCase()
    const underlyingAddress = ADDRESSES[tokenSymbol][chainId]
    const underlyingContract = new ethers.Contract(
      underlyingAddress,
      Abi.ERC20,
      provider
    )
    const underlyingBalance = await underlyingContract.balanceOf(poolAddress)
    underlyingVal = underlyingBalance.mul(underlyingPrice).div(DEC_18)
    underlying = {
      name: underlyingToken,
      amt: formatEther(underlyingBalance),
      val: formatEther(underlyingVal),
    }
  }
  const totalVal = ethVal.add(tokenVal).add(underlyingVal)
  return {
    totalVal: formatEther(totalVal),
    token: {
      name: symbol,
      amt: formatEther(xTokenBalance),
      val: formatEther(tokenVal),
    },
    underlying,
    eth: {
      name: ETH.toUpperCase(),
      amt: formatEther(ethBalance),
      val: formatEther(ethVal),
    },
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Jsb2NrY2hhaW4vZXhjaGFuZ2VzL2hlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFFcEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUN4RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBQy9CLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFMUQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBRXhDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFekMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUUzQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsS0FBSyxFQUM5QixNQUFxQixFQUNyQixXQUFtQixFQUNuQixVQUFrQixFQUNsQixRQUFzQixFQUN0QixPQUFlLEVBQ2YsZUFBMkIsRUFDM0IsTUFBZ0IsRUFDaEIsRUFBRTtJQUNGLFlBQVk7SUFDWixNQUFNLGFBQWEsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7SUFFaEQsWUFBWTtJQUNaLE1BQU0sY0FBYyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUU5RSxJQUFJLGFBQWEsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3ZDLElBQUk7UUFDRixXQUFXO1FBQ1gsYUFBYSxHQUFHLE1BQU0sY0FBYyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQTtLQUM1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
