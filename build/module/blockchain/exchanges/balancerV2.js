import { BigNumber } from '@ethersproject/bignumber'
import { AddressZero, HashZero, One, Zero } from '@ethersproject/constants'
import {
  Abi,
  ADDRESSES,
  BALANCER_V2_VAULT,
  BUY,
  ETH,
  SNX,
  TRADE_ACCOUNTING,
  WETH,
  X_SNX_A,
  X_SNX_ADMIN,
} from '@xtoken/abis'
import { ethers } from 'ethers'
import { DEC_18, X_SNX_A_BALANCER_V2_POOL_ID } from '../../constants'
import { formatNumber } from '../../utils'
import {
  getBalancerPoolContract,
  getContract,
  getExchangeRateContract,
  getSigner,
  getTokenSymbol,
} from '../utils'
import { getXSnxPrices } from '../xsnx'
import { getBalances } from './helper'
const { formatEther, parseEther } = ethers.utils
export const getBalancerV2EstimatedQuantity = async (
  tokenIn,
  symbol,
  amount,
  tradeType,
  provider
) => {
  try {
    const network = await provider.getNetwork()
    const { chainId } = network
    // Addresses
    const snxAddress = ADDRESSES[SNX][chainId]
    const wethAddress = ADDRESSES[WETH][chainId]
    const xsnxAddress = ADDRESSES[symbol][chainId]
    let tokenInAddress
    let tokenOutAddress
    if (tradeType === BUY) {
      tokenInAddress = tokenIn === ETH ? wethAddress : snxAddress
      tokenOutAddress = xsnxAddress
    } else {
      tokenInAddress = xsnxAddress
      tokenOutAddress = tokenIn === ETH ? wethAddress : snxAddress
    }
    const balancerV2VaultContract = getBalancerV2VaultContract(
      provider,
      chainId
    )
    const funds = {
      sender: AddressZero,
      fromInternalBalance: false,
      recipient: AddressZero,
      toInternalBalance: false,
    }
    const swap = {
      poolId: X_SNX_A_BALANCER_V2_POOL_ID,
      kind: 0,
      assetIn: tokenInAddress,
      assetOut: tokenOutAddress,
      amount: parseEther(amount),
      userData: HashZero,
    }
    const assets = [swap.assetIn, swap.assetOut]
    const batchSwapStep = {
      poolId: swap.poolId,
      kind: swap.kind,
      assetInIndex: Zero,
      assetOutIndex: One,
      amount: swap.amount,
      userData: swap.userData,
    }
    const result = await balancerV2VaultContract.callStatic.queryBatchSwap(
      swap.kind,
      [batchSwapStep],
      assets,
      funds
    )
    return formatNumber(
      formatEther(result[1]).replace('-', ''),
      tradeType === BUY ? 0 : 3
    ).toString()
  } catch (e) {
    return '0'
  }
}
export const getBalancerV2PortfolioItem = async (symbol, address, provider) => {
  const network = await provider.getNetwork()
  const { chainId } = network
  const tokenSymbol = getTokenSymbol(symbol)
  const underlying = tokenSymbol.toUpperCase()
  // Addresses
  const asset = `${symbol} - ${ETH.toUpperCase()} - ${underlying}`
  const balancerPoolAddress = '0xBA12222222228d8Ba445958a75a0704d566BF2C8' // Balancer V2 Vault address
  const xTokenAddress = ADDRESSES[symbol][chainId]
  // Contracts
  const balancerPoolContract = getBalancerPoolContract(
    symbol,
    provider,
    chainId
  )
  const balancerV2VaultContract = getBalancerV2VaultContract(provider, chainId)
  const tokenContract = new ethers.Contract(xTokenAddress, Abi.ERC20, provider)
  let userBalance = BigNumber.from('0')
  try {
    userBalance = await balancerPoolContract.balanceOf(address)
  } catch (e) {
    console.error('Error while fetching user balance:', e)
  }
  const {
    balances: [xTokenBalance, ethBalance],
  } = await balancerV2VaultContract.getPoolTokens(X_SNX_A_BALANCER_V2_POOL_ID)
  let tokenPrice = 0
  try {
    switch (symbol) {
      case X_SNX_A: {
        const xsnxAdminAddress = ADDRESSES[X_SNX_ADMIN][chainId]
        const tradeAccountingContract = getContract(
          TRADE_ACCOUNTING,
          provider,
          network
        )
        const exchangeRatesContract = await getExchangeRateContract(provider)
        const snxContract = getContract(SNX, provider, network)
        const { priceUsd } = await getXSnxPrices(
          tokenContract,
          xsnxAdminAddress,
          tradeAccountingContract,
          exchangeRatesContract,
          snxContract,
          provider
        )
        tokenPrice = priceUsd
        break
      }
    }
  } catch (e) {
    console.error(e)
  }
  const balancerContractBalances = await getBalances(
    symbol,
    balancerPoolAddress,
    tokenPrice,
    provider,
    chainId,
    undefined,
    true,
    xTokenBalance,
    ethBalance
  )
  const bptTokenSupply = await balancerPoolContract.totalSupply()
  const poolPrice = parseEther(balancerContractBalances.eth.val)
    .mul(4)
    .mul(DEC_18)
    .div(bptTokenSupply)
  const value = poolPrice.mul(userBalance).div(DEC_18)
  return {
    asset,
    balances: balancerContractBalances,
    poolPrice: formatEther(poolPrice),
    quantity: formatEther(userBalance),
    tokenPrice,
    value: formatEther(value),
  }
}
const getBalancerV2VaultContract = (provider, chainId) => {
  const signer = getSigner(provider)
  const balancerV2VaultAddress = ADDRESSES[BALANCER_V2_VAULT][chainId]
  return new ethers.Contract(
    balancerV2VaultAddress,
    Abi.BalancerV2Vault,
    signer
  )
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFsYW5jZXJWMi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ibG9ja2NoYWluL2V4Y2hhbmdlcy9iYWxhbmNlclYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFFM0UsT0FBTyxFQUNMLEdBQUcsRUFDSCxTQUFTLEVBQ1QsaUJBQWlCLEVBQ2pCLEdBQUcsRUFDSCxHQUFHLEVBQ0gsR0FBRyxFQUNILGdCQUFnQixFQUNoQixJQUFJLEVBQ0osT0FBTyxFQUNQLFdBQVcsR0FDWixNQUFNLGNBQWMsQ0FBQTtBQUNyQixPQUFPLEVBQVksTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBRXpDLE9BQU8sRUFBRSxNQUFNLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQWFyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQzFDLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsV0FBVyxFQUNYLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsY0FBYyxHQUNmLE1BQU0sVUFBVSxDQUFBO0FBQ2pCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFFdkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUV0QyxNQUFNLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUE7QUFFaEQsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUcsS0FBSyxFQUNqRCxPQUFvQyxFQUNwQyxNQUFzQixFQUN0QixNQUFjLEVBQ2QsU0FBcUIsRUFDckIsUUFBc0IsRUFDdEIsRUFBRTtJQUNGLElBQUk7UUFDRixNQUFNLE9BQU8sR0FBRyxNQUFN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
