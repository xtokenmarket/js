import { BigNumber } from '@ethersproject/bignumber'
import { AddressZero, HashZero, One, Two, Zero } from '@ethersproject/constants'
import {
  Abi,
  ADDRESSES,
  BALANCER_V2_VAULT,
  BUY,
  ETH,
  SNX,
  TRADE_ACCOUNTING,
  WETH,
  X_SNX_A,
  X_SNX_ADMIN,
} from '@xtoken/abis'
import { ethers } from 'ethers'
import {
  DEC_18,
  SNX_BALANCER_V2_POOL_ID,
  X_SNX_A_BALANCER_V2_POOL_ID,
} from '../../constants'
import { formatNumber } from '../../utils'
import {
  getBalancerPoolContract,
  getContract,
  getExchangeRateContract,
  getSigner,
  getTokenSymbol,
} from '../utils'
import { getXSnxPrices } from '../xsnx'
import { getBalances } from './helper'
const { formatEther, parseEther } = ethers.utils
export const getBalancerV2EstimatedQuantity = async (
  tokenIn,
  symbol,
  amount,
  tradeType,
  provider
) => {
  try {
    const network = await provider.getNetwork()
    const { chainId } = network
    const isEth = tokenIn === ETH
    const isBuy = tradeType === BUY
    // Addresses
    const snxAddress = ADDRESSES[SNX][chainId]
    const wethAddress = ADDRESSES[WETH][chainId]
    const xsnxAddress = ADDRESSES[symbol][chainId]
    const tokenInAddress = isBuy ? wethAddress : xsnxAddress
    const tokenOutAddress = isBuy ? xsnxAddress : wethAddress
    const balancerV2VaultContract = getBalancerV2VaultContract(
      provider,
      chainId
    )
    const funds = {
      sender: AddressZero,
      fromInternalBalance: false,
      recipient: AddressZero,
      toInternalBalance: false,
    }
    const swap = {
      poolId: X_SNX_A_BALANCER_V2_POOL_ID,
      kind: 0,
      amount: parseEther(amount),
      userData: HashZero,
    }
    let assets = [tokenInAddress, tokenOutAddress]
    if (!isEth) {
      assets = [...assets, snxAddress]
    }
    const batchSwapStep = {
      poolId: swap.poolId,
      kind: swap.kind,
      assetInIndex: Zero,
      assetOutIndex: One,
      amount: !isEth && isBuy ? Zero : swap.amount,
      userData: swap.userData,
    }
    let batchSwapStep2
    if (!isEth) {
      batchSwapStep2 = {
        poolId: SNX_BALANCER_V2_POOL_ID,
        kind: 0,
        assetInIndex: isBuy ? Two : One,
        assetOutIndex: isBuy ? Zero : Two,
        amount: isBuy ? swap.amount : Zero,
        userData: swap.userData,
      }
    }
    const batchSwapSteps = !isEth
      ? isBuy
        ? [batchSwapStep2, batchSwapStep]
        : [batchSwapStep, batchSwapStep2]
      : [batchSwapStep]
    const result = await balancerV2VaultContract.callStatic.queryBatchSwap(
      swap.kind,
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      batchSwapSteps,
      assets,
      funds
    )
    return formatNumber(
      formatEther(result[!isEth && !isBuy ? 2 : 1]).replace('-', ''),
      4
    ).toString()
  } catch (e) {
    console.error('Error while fetching Balancer V2 estimate:', e)
    return '0'
  }
}
export const getBalancerV2PortfolioItem = async (symbol, address, provider) => {
  const network = await provider.getNetwork()
  const { chainId } = network
  const tokenSymbol = getTokenSymbol(symbol)
  const underlying = tokenSymbol.toUpperCase()
  // Addresses
  const asset = `${symbol} - ${ETH.toUpperCase()} - ${underlying}`
  const balancerPoolAddress = '0xBA12222222228d8Ba445958a75a0704d566BF2C8' // Balancer V2 Vault address
  const xTokenAddress = ADDRESSES[symbol][chainId]
  // Contracts
  const balancerPoolContract = getBalancerPoolContract(
    symbol,
    provider,
    chainId
  )
  const balancerV2VaultContract = getBalancerV2VaultContract(provider, chainId)
  const tokenContract = new ethers.Contract(xTokenAddress, Abi.ERC20, provider)
  let userBalance = BigNumber.from('0')
  try {
    userBalance = await balancerPoolContract.balanceOf(address)
  } catch (e) {
    console.error('Error while fetching user balance:', e)
  }
  const {
    balances: [xTokenBalance, ethBalance],
  } = await balancerV2VaultContract.getPoolTokens(X_SNX_A_BALANCER_V2_POOL_ID)
  let tokenPrice = 0
  try {
    switch (symbol) {
      case X_SNX_A: {
        const xsnxAdminAddress = ADDRESSES[X_SNX_ADMIN][chainId]
        const tradeAccountingContract = getContract(
          TRADE_ACCOUNTING,
          provider,
          network
        )
        const exchangeRatesContract = await getExchangeRateContract(provider)
        const snxContract = getContract(SNX, provider, network)
        const { priceUsd } = await getXSnxPrices(
          tokenContract,
          xsnxAdminAddress,
          tradeAccountingContract,
          exchangeRatesContract,
          snxContract,
          provider
        )
        tokenPrice = priceUsd
        break
      }
    }
  } catch (e) {
    console.error(e)
  }
  const balancerContractBalances = await getBalances(
    symbol,
    balancerPoolAddress,
    tokenPrice,
    provider,
    chainId,
    undefined,
    true,
    xTokenBalance,
    ethBalance
  )
  const bptTokenSupply = await balancerPoolContract.totalSupply()
  const poolPrice = parseEther(balancerContractBalances.eth.val)
    .mul(4)
    .mul(DEC_18)
    .div(bptTokenSupply)
  const value = poolPrice.mul(userBalance).div(DEC_18)
  return {
    asset,
    balances: balancerContractBalances,
    poolPrice: formatEther(poolPrice),
    quantity: formatEther(userBalance),
    tokenPrice,
    value: formatEther(value),
  }
}
const getBalancerV2VaultContract = (provider, chainId) => {
  const signer = getSigner(provider)
  const balancerV2VaultAddress = ADDRESSES[BALANCER_V2_VAULT][chainId]
  return new ethers.Contract(
    balancerV2VaultAddress,
    Abi.BalancerV2Vault,
    signer
  )
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFsYW5jZXJWMi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ibG9ja2NoYWluL2V4Y2hhbmdlcy9iYWxhbmNlclYyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBRWhGLE9BQU8sRUFDTCxHQUFHLEVBQ0gsU0FBUyxFQUNULGlCQUFpQixFQUNqQixHQUFHLEVBQ0gsR0FBRyxFQUNILEdBQUcsRUFDSCxnQkFBZ0IsRUFDaEIsSUFBSSxFQUNKLE9BQU8sRUFDUCxXQUFXLEdBQ1osTUFBTSxjQUFjLENBQUE7QUFDckIsT0FBTyxFQUFZLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUV6QyxPQUFPLEVBQ0wsTUFBTSxFQUNOLHVCQUF1QixFQUN2QiwyQkFBMkIsR0FDNUIsTUFBTSxpQkFBaUIsQ0FBQTtBQWF4QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQzFDLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsV0FBVyxFQUNYLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsY0FBYyxHQUNmLE1BQU0sVUFBVSxDQUFBO0FBQ2pCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFFdkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUV0QyxNQUFNLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUE7QUFFaEQsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUcsS0FBSyxFQUNqRCxPQUFvQyxFQUNwQyxNQUFzQixFQUN0QixNQUFjLEVBQ2QsU0FBcUIsRUFDckIsUUFBc0IsRUFDdEIsRUFBRTtJQUNGLElBQUk7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
