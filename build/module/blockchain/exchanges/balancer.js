import { BigNumber } from '@ethersproject/bignumber';
import { AAVE, Abi, ADDRESSES, BUY, ETH, WETH, X_AAVE_A, X_AAVE_A_BALANCER_POOL, X_AAVE_B, X_AAVE_B_BALANCER_POOL, } from '@xtoken/abis';
import { ethers } from 'ethers';
import { DEC_18 } from '../../constants';
import { formatNumber } from '../../utils';
import { getBalancerPoolAddress, getBalancerPoolContract, getContract, getSigner, getTokenSymbol, } from '../utils';
import { getXAavePrices } from '../xaave';
import { getBalances } from './helper';
import { getEthTokenPrice, getEthUsdcPrice } from './uniswap';
const { formatEther, parseEther } = ethers.utils;
export const getBalancerEstimatedQuantity = async (tokenIn, symbol, amount, tradeType, provider) => {
    const network = await provider.getNetwork();
    const { chainId } = network;
    let tokenInSymbol;
    let poolSymbol;
    switch (symbol) {
        case X_AAVE_A:
            tokenInSymbol = tokenIn === ETH ? WETH : AAVE;
            poolSymbol = X_AAVE_A_BALANCER_POOL;
            break;
        case X_AAVE_B:
            tokenInSymbol = tokenIn === ETH ? WETH : AAVE;
            poolSymbol = X_AAVE_B_BALANCER_POOL;
            break;
        default:
            return '0';
    }
    const tokenInAddress = ADDRESSES[tokenInSymbol][chainId];
    const tokenOutAddress = ADDRESSES[symbol][chainId];
    const poolAddress = ADDRESSES[poolSymbol][chainId];
    const balancerContract = getBalancerPoolContract(symbol, provider, chainId);
    const tokenInContract = new ethers.Contract(tokenInAddress, Abi.ERC20, getSigner(provider));
    const tokenOutContract = new ethers.Contract(tokenOutAddress, Abi.ERC20, getSigner(provider));
    const [tokenInBalance, tokenInWeight, tokenOutBalance, tokenOutWeight, swapFee,] = await Promise.all([
        tokenInContract.balanceOf(poolAddress),
        balancerContract.getDenormalizedWeight(tokenInAddress),
        tokenOutContract.balanceOf(poolAddress),
        balancerContract.getDenormalizedWeight(tokenOutAddress),
        balancerContract.getSwapFee(),
    ]);
    const calcOutGivenIn = await balancerContract.calcOutGivenIn(tradeType === BUY ? tokenInBalance : tokenOutBalance, tradeType === BUY ? tokenInWeight : tokenOutWeight, tradeType === BUY ? tokenOutBalance : tokenInBalance, tradeType === BUY ? tokenOutWeight : tokenInWeight, parseEther(amount), swapFee);
    return formatNumber(formatEther(calcOutGivenIn), tradeType === BUY ? 0 : 3).toString();
};
export const getBalancerPortfolioItem = async (symbol, address, provider) => {
    const network = await provider.getNetwork();
    const { chainId } = network;
    const tokenSymbol = getTokenSymbol(symbol);
    const underlying = tokenSymbol.toUpperCase();
    // Addresses
    const asset = `${symbol} - ${ETH.toUpperCase()} - ${underlying}`;
    const balancerPoolAddress = getBalancerPoolAddress(symbol, chainId);
    const underlyingAddress = ADDRESSES[tokenSymbol][chainId];
    // Contracts
    const balancerPoolContract = getBalancerPoolContract(symbol, provider, chainId);
    let userBalance = BigNumber.from('0');
    try {
        userBalance = await balancerPoolContract.balanceOf(address);
    }
    catch (e) {
        console.error('Error while fetching user balance:', e);
    }
    let tokenPrice = 0;
    const [ethUsdcPrice, underlyingEthPrice] = await Promise.all([
        getEthUsdcPrice(provider),
        getEthTokenPrice(underlyingAddress, true, provider),
    ]);
    const underlyingPrice = parseEther(underlyingEthPrice)
        .mul(parseEther(ethUsdcPrice))
        .div(DEC_18);
    try {
        switch (symbol) {
            case X_AAVE_A: {
                const xaaveaContract = getContract(symbol, provider, network);
                const { priceUsd } = await getXAavePrices(xaaveaContract);
                tokenPrice = priceUsd;
                break;
            }
            case X_AAVE_B: {
                const xaavebContract = getContract(symbol, provider, network);
                const { priceUsd } = await getXAavePrices(xaavebContract);
                tokenPrice = priceUsd;
                break;
            }
        }
    }
    catch (e) {
        console.error(e);
    }
    const balancerContractBalances = await getBalances(symbol, balancerPoolAddress, tokenPrice, provider, chainId, underlyingPrice, true);
    const bptTokenSupply = await balancerPoolContract.totalSupply();
    const poolPrice = parseEther(balancerContractBalances.eth.val)
        .mul(4)
        .mul(DEC_18)
        .div(bptTokenSupply);
    const value = poolPrice.mul(userBalance).div(DEC_18);
    return {
        asset,
        balances: balancerContractBalances,
        poolPrice: formatEther(poolPrice),
        quantity: formatEther(userBalance),
        tokenPrice,
        underlyingPrice: formatEther(underlyingPrice),
        value: formatEther(value),
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFsYW5jZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmxvY2tjaGFpbi9leGNoYW5nZXMvYmFsYW5jZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBRXBELE9BQU8sRUFDTCxJQUFJLEVBQ0osR0FBRyxFQUNILFNBQVMsRUFDVCxHQUFHLEVBQ0gsR0FBRyxFQUNILElBQUksRUFDSixRQUFRLEVBQ1Isc0JBQXNCLEVBQ3RCLFFBQVEsRUFDUixzQkFBc0IsR0FDdkIsTUFBTSxjQUFjLENBQUE7QUFDckIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUUvQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFPeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUMxQyxPQUFPLEVBQ0wsc0JBQXNCLEVBQ3RCLHVCQUF1QixFQUN2QixXQUFXLEVBQ1gsU0FBUyxFQUNULGNBQWMsR0FDZixNQUFNLFVBQVUsQ0FBQTtBQUNqQixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRXpDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDdEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUU3RCxNQUFNLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUE7QUFFaEQsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcsS0FBSyxFQUMvQyxPQUF1RCxFQUN2RCxNQUF5QyxFQUN6QyxNQUFjLEVBQ2QsU0FBcUIsRUFDckIsUUFBc0IsRUFDdEIsRUFBRTtJQUNGLE1BQU0sT0FBTyxHQUFHLE1BQU0sUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQzNDLE1BQU0sRUFBRSxPQUFP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