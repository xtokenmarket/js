import { abi as QuoterAbi } from '@uniswap/v3-periphery/artifacts/contracts/lens/Quoter.sol/Quoter.json'
import { USDC } from '@xtoken/abis'
import {
  ADDRESSES,
  BUY,
  ETH,
  WETH,
  X_AAVE_A,
  X_BNT_A,
  X_INCH_A,
  X_INCH_B,
} from '@xtoken/abis'
import { BigNumber, Contract } from 'ethers'
import { formatEther, formatUnits, parseEther } from 'ethers/lib/utils'
import { DEC_18 } from '../../constants'
import { getSigner, getTokenSymbol } from '../utils'
const FEES = BigNumber.from('3000') // 0.3% for xAssetCLR swaps
const MIN_PRICE = BigNumber.from('4295128740') // asset0 -> asset1 swap
const MAX_PRICE = BigNumber.from(
  '1461446703485210103287273052203988822378723970341'
) // asset1 -> asset0 swap
const QUOTER_ADDRESS = '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6'
export const getUniswapV3EstimatedQty = async (
  tokenIn,
  symbol,
  amount,
  tradeType,
  fees,
  provider
) => {
  const { chainId } = await provider.getNetwork()
  const quoterContract = new Contract(
    QUOTER_ADDRESS,
    QuoterAbi,
    getSigner(provider)
  )
  const isTradeBuy = tradeType === BUY
  const tokenSymbol = getTokenSymbol(symbol)
  const assetAddress = ADDRESSES[tokenSymbol][chainId]
  const xAssetAddress = ADDRESSES[symbol][chainId]
  const wethAddress = ADDRESSES[WETH][chainId]
  // If asset0 is not xAsset in xAssetCLR token
  const isAsset0Native =
    symbol === X_AAVE_A ||
    symbol == X_BNT_A ||
    symbol === X_INCH_A ||
    symbol === X_INCH_B
  let tokenInAddress
  let tokenOutAddress
  let priceLimit
  if (isTradeBuy) {
    tokenInAddress = tokenIn === ETH ? wethAddress : assetAddress
    tokenOutAddress = tokenIn === ETH ? assetAddress : xAssetAddress
    priceLimit = isAsset0Native ? MIN_PRICE : MAX_PRICE
  } else {
    tokenInAddress = tokenIn === ETH ? assetAddress : xAssetAddress
    tokenOutAddress = tokenIn === ETH ? wethAddress : assetAddress
    priceLimit = isAsset0Native ? MAX_PRICE : MIN_PRICE
  }
  const estimateQty = await quoterContract.callStatic.quoteExactInputSingle(
    tokenInAddress,
    tokenOutAddress,
    fees || FEES,
    parseEther(amount),
    priceLimit
  )
  return formatEther(estimateQty)
}
export const getEthUsdcPriceUniswapV3 = async (provider) => {
  const { chainId } = await provider.getNetwork()
  const quoterContract = new Contract(QUOTER_ADDRESS, QuoterAbi, provider)
  const usdcAddress = ADDRESSES[USDC][chainId]
  const wethAddress = ADDRESSES[WETH][chainId]
  const quantity = await quoterContract.callStatic.quoteExactInputSingle(
    wethAddress,
    usdcAddress,
    FEES,
    DEC_18,
    // In case of Token0 to Token1 trade, the price limit is `MIN_PRICE` and the reverse would be `MAX_PRICE`
    BigNumber.from(usdcAddress).gt(BigNumber.from(wethAddress))
      ? MIN_PRICE
      : MAX_PRICE
  )
  return formatUnits(quantity, 6)
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pc3dhcFYzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Jsb2NrY2hhaW4vZXhjaGFuZ2VzL3VuaXN3YXBWMy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsR0FBRyxJQUFJLFNBQVMsRUFBRSxNQUFNLHVFQUF1RSxDQUFBO0FBQ3hHLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDbkMsT0FBTyxFQUNMLFNBQVMsRUFDVCxHQUFHLEVBQ0gsR0FBRyxFQUNILElBQUksRUFDSixRQUFRLEVBQ1IsT0FBTyxFQUNQLFFBQVEsRUFDUixRQUFRLEdBQ1QsTUFBTSxjQUFjLENBQUE7QUFDckIsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFDNUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFFdkUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBRXhDLE9BQU8sRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRXBELE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQywyQkFBMkI7QUFDL0QsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQSxDQUFDLHdCQUF3QjtBQUN2RSxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUM5QixtREFBbUQsQ0FDcEQsQ0FBQSxDQUFDLHdCQUF3QjtBQUMxQixNQUFNLGNBQWMsR0FBRyw0Q0FBNEMsQ0FBQTtBQUVuRSxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxLQUFLLEVBQzNDLE9BQW1DLEVBQ25DLE1BQXFCLEVBQ3JCLE1BQWMsRUFDZCxTQUFxQixFQUNyQixJQUEyQixFQUMzQixRQUFzQixFQUN0QixFQUFFO0lBQ0YsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLE1BQU0sUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQy9DLE1BQU0sY0FBYyxHQUFHLElBQUksUUFBUSxDQUNqQyxjQUFjLEVBQ2QsU0FBUyxFQUNULFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDcEIsQ0FBQTtJQUVELE1BQU0sVUFBVSxHQUFHLFNBQVMsS0FBSyxHQUFHLENBQUE7SUFDcEMsTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRTFDLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNwRCxNQUFNLGFBQWEsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDaEQsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBRTVDLDZDQUE2QztJQUM3QyxNQUFNLGNBQWMsR0FDbEIsTUFBTSxLQUFLLFFBQVE7UUFDbkIsTUFBTSxJQUFJLE9BQU87UUFDakIsTUFBTSxLQUFLLFFBQVE7UUFDbkIsTUFBTSxLQUFLLFFBQVEsQ0FBQTtJQUVyQixJQUFJLGNBQWMsQ0FBQTtJQUNsQixJQUFJLGVBQWUsQ0FBQTtJQUNuQixJQUFJLFVBQVUsQ0FBQTtJQUVkLElBQUksVUFBVSxFQUFFO1FBQ2QsY0FBYyxHQUFHLE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFBO1FBQzdELGVBQWUsR0FBRyxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQTtRQUNoRSxVQUFVLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQTtLQUNwRDtTQUFNO1FBQ0wsY0FBYyxHQUFHLE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFBO1FBQy9ELGVBQWUsR0FBRyxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQTtRQUM5RCxVQUFVLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQTtLQUNwRDtJQUVELE1BQU0sV0FBVyxHQUFHLE1BQU0sY0FBYyxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FDdkUsY0FBYyxFQUNkLGVBQWUsRUFDZixJQUFJLElBQUksSUFBSSxFQUNaLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFDbEIsVUFBVSxDQUNYLENBQUE7SUFFRCxPQUFPLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUNqQyxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxLQUFLLEVBQUUsUUFBc0IsRUFBRSxFQUFFO0lBQ3ZFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxNQUFNLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUMvQyxNQUFNLGNBQWMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxjQUFjLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBRXhFLE1BQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUM1QyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7SUFFNUMsTUFBTSxRQUFRLEdBQUcsTUFBTSxjQUFjLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUNwRSxXQUFXLEVBQ1gsV0FBVyxFQUNYLElBQUksRUFDSixNQUFNO0lBQ04seUdBQXlHO0lBQ3pHLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDLFNBQVM7UUFDWCxDQUFDLENBQUMsU0FBUyxDQUNkLENBQUE7SUFFRCxPQUFPLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDakMsQ0FBQyxDQUFBIn0=
