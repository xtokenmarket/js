import { abi as QuoterAbi } from '@uniswap/v3-periphery/artifacts/contracts/lens/Quoter.sol/Quoter.json'
import { AAVE, ADDRESSES, BUY, X_AAVE_A, X_AAVE_B } from '@xtoken/abis'
import { BigNumber, Contract } from 'ethers'
import { formatEther, parseEther } from 'ethers/lib/utils'
import { getSigner } from '../utils'
const FEES = BigNumber.from('3000') // 0.3% for xAssetCLR swaps
const MIN_PRICE = BigNumber.from('4295128740') // asset0 -> asset1 swap
const MAX_PRICE = BigNumber.from(
  '1461446703485210103287273052203988822378723970341'
) // asset1 -> asset0 swap
const QUOTER_ADDRESS = '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6'
export const getUniswapV3EstimatedQty = async (
  symbol,
  amount,
  tradeType,
  provider
) => {
  const { chainId } = await provider.getNetwork()
  const quoterContract = new Contract(
    QUOTER_ADDRESS,
    QuoterAbi,
    getSigner(provider)
  )
  const isTradeBuy = tradeType === BUY
  const xAssetAddress = ADDRESSES[symbol][chainId]
  let assetAddress
  switch (symbol) {
    case X_AAVE_A:
    case X_AAVE_B:
      assetAddress = ADDRESSES[AAVE][chainId]
  }
  let tokenInAddress
  let tokenOutAddress
  let priceLimit
  if (isTradeBuy) {
    tokenInAddress = assetAddress
    tokenOutAddress = xAssetAddress
    if (symbol === X_AAVE_A) {
      priceLimit = MIN_PRICE
    } else {
      priceLimit = MAX_PRICE
    }
  } else {
    tokenInAddress = xAssetAddress
    tokenOutAddress = assetAddress
    if (symbol === X_AAVE_A) {
      priceLimit = MAX_PRICE
    } else {
      priceLimit = MIN_PRICE
    }
  }
  const estimateQty = await quoterContract.callStatic.quoteExactInputSingle(
    tokenInAddress,
    tokenOutAddress,
    FEES,
    parseEther(amount),
    priceLimit
  )
  return formatEther(estimateQty)
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pc3dhcFYzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Jsb2NrY2hhaW4vZXhjaGFuZ2VzL3VuaXN3YXBWMy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsR0FBRyxJQUFJLFNBQVMsRUFBRSxNQUFNLHVFQUF1RSxDQUFBO0FBQ3hHLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQ3ZFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBQzVDLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFHMUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUVwQyxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUMsMkJBQTJCO0FBQy9ELE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUEsQ0FBQyx3QkFBd0I7QUFDdkUsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FDOUIsbURBQW1ELENBQ3BELENBQUEsQ0FBQyx3QkFBd0I7QUFDMUIsTUFBTSxjQUFjLEdBQUcsNENBQTRDLENBQUE7QUFFbkUsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsS0FBSyxFQUMzQyxNQUF5QyxFQUN6QyxNQUFjLEVBQ2QsU0FBcUIsRUFDckIsUUFBc0IsRUFDdEIsRUFBRTtJQUNGLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxNQUFNLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUMvQyxNQUFNLGNBQWMsR0FBRyxJQUFJLFFBQVEsQ0FDakMsY0FBYyxFQUNkLFNBQVMsRUFDVCxTQUFTLENBQUMsUUFBUSxDQUFDLENBQ3BCLENBQUE7SUFFRCxNQUFNLFVBQVUsR0FBRyxTQUFTLEtBQUssR0FBRyxDQUFBO0lBQ3BDLE1BQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUVoRCxJQUFJLFlBQVksQ0FBQTtJQUNoQixRQUFRLE1BQU0sRUFBRTtRQUNkLEtBQUssUUFBUSxDQUFDO1FBQ2QsS0FBSyxRQUFRO1lBQ1gsWUFBWSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtLQUMxQztJQUVELElBQUksY0FBYyxDQUFBO0lBQ2xCLElBQUksZUFBZSxDQUFBO0lBQ25CLElBQUksVUFBVSxDQUFBO0lBRWQsSUFBSSxVQUFVLEVBQUU7UUFDZCxjQUFjLEdBQUcsWUFBWSxDQUFBO1FBQzdCLGVBQWUsR0FBRyxhQUFhLENBQUE7UUFFL0IsSUFBSSxNQUFNLEtBQUssUUFBUSxFQUFFO1lBQ3ZCLFVBQVUsR0FBRyxTQUFTLENBQUE7U0FDdkI7YUFBTTtZQUNMLFVBQVUsR0FBRyxTQUFTLENBQUE7U0FDdkI7S0FDRjtTQUFNO1FBQ0wsY0FBYyxHQUFHLGFBQWEsQ0FBQTtRQUM5QixlQUFlLEdBQUcsWUFBWSxDQUFBO1FBRTlCLElBQUksTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUN2QixVQUFVLEdBQUcsU0FBUyxDQUFBO1NBQ3ZCO2FBQU07WUFDTCxVQUFVLEdBQUcsU0FBUyxDQUFBO1NBQ3ZCO0tBQ0Y7SUFFRCxNQUFNLFdBQVcsR0FBRyxNQUFNLGNBQWMsQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQ3ZFLGNBQWMsRUFDZCxlQUFlLEVBQ2YsSUFBSSxFQUNKLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFDbEIsVUFBVSxDQUNYLENBQUE7SUFFRCxPQUFPLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUNqQyxDQUFDLENBQUEifQ==
