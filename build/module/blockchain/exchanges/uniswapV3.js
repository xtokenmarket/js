import { abi as QuoterAbi } from '@uniswap/v3-periphery/artifacts/contracts/lens/Quoter.sol/Quoter.json'
import {
  ADDRESSES,
  BUY,
  ETH,
  WETH,
  X_AAVE_A,
  X_BNT_A,
  X_INCH_A,
  X_INCH_B,
} from '@xtoken/abis'
import { BigNumber, Contract } from 'ethers'
import { formatEther, parseEther } from 'ethers/lib/utils'
import { getSigner, getTokenSymbol } from '../utils'
const FEES = BigNumber.from('3000') // 0.3% for xAssetCLR swaps
const MIN_PRICE = BigNumber.from('4295128740') // asset0 -> asset1 swap
const MAX_PRICE = BigNumber.from(
  '1461446703485210103287273052203988822378723970341'
) // asset1 -> asset0 swap
const QUOTER_ADDRESS = '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6'
export const getUniswapV3EstimatedQty = async (
  tokenIn,
  symbol,
  amount,
  tradeType,
  fees,
  provider
) => {
  const { chainId } = await provider.getNetwork()
  const quoterContract = new Contract(
    QUOTER_ADDRESS,
    QuoterAbi,
    getSigner(provider)
  )
  const isTradeBuy = tradeType === BUY
  const tokenSymbol = getTokenSymbol(symbol)
  const assetAddress = ADDRESSES[tokenSymbol][chainId]
  const xAssetAddress = ADDRESSES[symbol][chainId]
  const wethAddress = ADDRESSES[WETH][chainId]
  // If asset0 is not xAsset in xAssetCLR token
  const isAsset0Native =
    symbol === X_AAVE_A ||
    symbol == X_BNT_A ||
    symbol === X_INCH_A ||
    symbol === X_INCH_B
  let tokenInAddress
  let tokenOutAddress
  let priceLimit
  if (isTradeBuy) {
    tokenInAddress = tokenIn === ETH ? wethAddress : assetAddress
    tokenOutAddress = tokenIn === ETH ? assetAddress : xAssetAddress
    priceLimit = isAsset0Native ? MIN_PRICE : MAX_PRICE
  } else {
    tokenInAddress = tokenIn === ETH ? assetAddress : xAssetAddress
    tokenOutAddress = tokenIn === ETH ? wethAddress : assetAddress
    priceLimit = isAsset0Native ? MAX_PRICE : MIN_PRICE
  }
  const estimateQty = await quoterContract.callStatic.quoteExactInputSingle(
    tokenInAddress,
    tokenOutAddress,
    fees || FEES,
    parseEther(amount),
    priceLimit
  )
  return formatEther(estimateQty)
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pc3dhcFYzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Jsb2NrY2hhaW4vZXhjaGFuZ2VzL3VuaXN3YXBWMy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsR0FBRyxJQUFJLFNBQVMsRUFBRSxNQUFNLHVFQUF1RSxDQUFBO0FBQ3hHLE9BQU8sRUFDTCxTQUFTLEVBQ1QsR0FBRyxFQUNILEdBQUcsRUFDSCxJQUFJLEVBQ0osUUFBUSxFQUNSLE9BQU8sRUFDUCxRQUFRLEVBQ1IsUUFBUSxHQUNULE1BQU0sY0FBYyxDQUFBO0FBQ3JCLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBQzVDLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFHMUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFcEQsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDLDJCQUEyQjtBQUMvRCxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBLENBQUMsd0JBQXdCO0FBQ3ZFLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQzlCLG1EQUFtRCxDQUNwRCxDQUFBLENBQUMsd0JBQXdCO0FBQzFCLE1BQU0sY0FBYyxHQUFHLDRDQUE0QyxDQUFBO0FBRW5FLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLEtBQUssRUFDM0MsT0FBbUMsRUFDbkMsTUFBcUIsRUFDckIsTUFBYyxFQUNkLFNBQXFCLEVBQ3JCLElBQTJCLEVBQzNCLFFBQXNCLEVBQ3RCLEVBQUU7SUFDRixNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsTUFBTSxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDL0MsTUFBTSxjQUFjLEdBQUcsSUFBSSxRQUFRLENBQ2pDLGNBQWMsRUFDZCxTQUFTLEVBQ1QsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUNwQixDQUFBO0lBRUQsTUFBTSxVQUFVLEdBQUcsU0FBUyxLQUFLLEdBQUcsQ0FBQTtJQUNwQyxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUE7SUFFMUMsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3BELE1BQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNoRCxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7SUFFNUMsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUNsQixNQUFNLEtBQUssUUFBUTtRQUNuQixNQUFNLElBQUksT0FBTztRQUNqQixNQUFNLEtBQUssUUFBUTtRQUNuQixNQUFNLEtBQUssUUFBUSxDQUFBO0lBRXJCLElBQUksY0FBYyxDQUFBO0lBQ2xCLElBQUksZUFBZSxDQUFBO0lBQ25CLElBQUksVUFBVSxDQUFBO0lBRWQsSUFBSSxVQUFVLEVBQUU7UUFDZCxjQUFjLEdBQUcsT0FBTyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUE7UUFDN0QsZUFBZSxHQUFHLE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFBO1FBQ2hFLFVBQVUsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFBO0tBQ3BEO1NBQU07UUFDTCxjQUFjLEdBQUcsT0FBTyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUE7UUFDL0QsZUFBZSxHQUFHLE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFBO1FBQzlELFVBQVUsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFBO0tBQ3BEO0lBRUQsTUFBTSxXQUFXLEdBQUcsTUFBTSxjQUFjLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUN2RSxjQUFjLEVBQ2QsZUFBZSxFQUNmLElBQUksSUFBSSxJQUFJLEVBQ1osVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNsQixVQUFVLENBQ1gsQ0FBQTtJQUVELE9BQU8sV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBQ2pDLENBQUMsQ0FBQSJ9
