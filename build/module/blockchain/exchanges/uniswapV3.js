import { abi as QuoterAbi } from '@uniswap/v3-periphery/artifacts/contracts/lens/Quoter.sol/Quoter.json'
import {
  ADDRESSES,
  BUY,
  X_AAVE_A,
  X_BNT_A,
  X_INCH_A,
  X_INCH_B,
} from '@xtoken/abis'
import { BigNumber, Contract } from 'ethers'
import { formatEther, parseEther } from 'ethers/lib/utils'
import { getSigner, getTokenSymbol } from '../utils'
const FEES = BigNumber.from('3000') // 0.3% for xAssetCLR swaps
const MIN_PRICE = BigNumber.from('4295128740') // asset0 -> asset1 swap
const MAX_PRICE = BigNumber.from(
  '1461446703485210103287273052203988822378723970341'
) // asset1 -> asset0 swap
const QUOTER_ADDRESS = '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6'
export const getUniswapV3EstimatedQty = async (
  symbol,
  amount,
  tradeType,
  provider
) => {
  const { chainId } = await provider.getNetwork()
  const quoterContract = new Contract(
    QUOTER_ADDRESS,
    QuoterAbi,
    getSigner(provider)
  )
  const isTradeBuy = tradeType === BUY
  const tokenSymbol = getTokenSymbol(symbol)
  const assetAddress = ADDRESSES[tokenSymbol][chainId]
  const xAssetAddress = ADDRESSES[symbol][chainId]
  // If asset0 is not xAsset in xAssetCLR token
  const isAsset0Native =
    symbol === X_AAVE_A ||
    symbol == X_BNT_A ||
    symbol === X_INCH_A ||
    symbol === X_INCH_B
  let tokenInAddress
  let tokenOutAddress
  let priceLimit
  if (isTradeBuy) {
    tokenInAddress = assetAddress
    tokenOutAddress = xAssetAddress
    priceLimit = isAsset0Native ? MIN_PRICE : MAX_PRICE
  } else {
    tokenInAddress = xAssetAddress
    tokenOutAddress = assetAddress
    priceLimit = isAsset0Native ? MAX_PRICE : MIN_PRICE
  }
  const estimateQty = await quoterContract.callStatic.quoteExactInputSingle(
    tokenInAddress,
    tokenOutAddress,
    FEES,
    parseEther(amount),
    priceLimit
  )
  return formatEther(estimateQty)
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pc3dhcFYzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Jsb2NrY2hhaW4vZXhjaGFuZ2VzL3VuaXN3YXBWMy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsR0FBRyxJQUFJLFNBQVMsRUFBRSxNQUFNLHVFQUF1RSxDQUFBO0FBQ3hHLE9BQU8sRUFDTCxTQUFTLEVBQ1QsR0FBRyxFQUNILFFBQVEsRUFDUixPQUFPLEVBQ1AsUUFBUSxFQUNSLFFBQVEsR0FDVCxNQUFNLGNBQWMsQ0FBQTtBQUNyQixPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUM1QyxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBRzFELE9BQU8sRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBRXBELE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQywyQkFBMkI7QUFDL0QsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQSxDQUFDLHdCQUF3QjtBQUN2RSxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUM5QixtREFBbUQsQ0FDcEQsQ0FBQSxDQUFDLHdCQUF3QjtBQUMxQixNQUFNLGNBQWMsR0FBRyw0Q0FBNEMsQ0FBQTtBQUVuRSxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxLQUFLLEVBQzNDLE1BQXFCLEVBQ3JCLE1BQWMsRUFDZCxTQUFxQixFQUNyQixRQUFzQixFQUN0QixFQUFFO0lBQ0YsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLE1BQU0sUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQy9DLE1BQU0sY0FBYyxHQUFHLElBQUksUUFBUSxDQUNqQyxjQUFjLEVBQ2QsU0FBUyxFQUNULFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDcEIsQ0FBQTtJQUVELE1BQU0sVUFBVSxHQUFHLFNBQVMsS0FBSyxHQUFHLENBQUE7SUFDcEMsTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRTFDLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNwRCxNQUFNLGFBQWEsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUE7SUFFaEQsNkNBQTZDO0lBQzdDLE1BQU0sY0FBYyxHQUNsQixNQUFNLEtBQUssUUFBUTtRQUNuQixNQUFNLElBQUksT0FBTztRQUNqQixNQUFNLEtBQUssUUFBUTtRQUNuQixNQUFNLEtBQUssUUFBUSxDQUFBO0lBRXJCLElBQUksY0FBYyxDQUFBO0lBQ2xCLElBQUksZUFBZSxDQUFBO0lBQ25CLElBQUksVUFBVSxDQUFBO0lBRWQsSUFBSSxVQUFVLEVBQUU7UUFDZCxjQUFjLEdBQUcsWUFBWSxDQUFBO1FBQzdCLGVBQWUsR0FBRyxhQUFhLENBQUE7UUFDL0IsVUFBVSxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUE7S0FDcEQ7U0FBTTtRQUNMLGNBQWMsR0FBRyxhQUFhLENBQUE7UUFDOUIsZUFBZSxHQUFHLFlBQVksQ0FBQTtRQUM5QixVQUFVLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQTtLQUNwRDtJQUVELE1BQU0sV0FBVyxHQUFHLE1BQU0sY0FBYyxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FDdkUsY0FBYyxFQUNkLGVBQWUsRUFDZixJQUFJLEVBQ0osVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNsQixVQUFVLENBQ1gsQ0FBQTtJQUVELE9BQU8sV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBQ2pDLENBQUMsQ0FBQSJ9
