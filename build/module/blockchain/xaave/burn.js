import { AAVE, ADDRESSES, ETH } from '@xtoken/abis'
import { ethers } from 'ethers'
import {
  DEC_18,
  GAS_LIMIT_PERCENTAGE_DEFAULT,
  GAS_LIMIT_PERCENTAGE_ETH,
} from '../../constants'
import { getPercentage } from '../../utils'
import { getExpectedRate, parseFees } from '../utils'
import { getXAaveContracts } from './helper'
const { formatEther, parseEther } = ethers.utils
export const burnXAave = async (symbol, sellForEth, amount, provider) => {
  const {
    kyberProxyContract,
    tokenContract,
    xaaveContract,
  } = await getXAaveContracts(symbol, provider)
  const { proRataAave } = await getProRataAave(xaaveContract, amount)
  const minRate = await getExpectedRate(
    kyberProxyContract,
    tokenContract.address,
    ADDRESSES[ETH],
    proRataAave,
    true
  )
  // Estimate `gasLimit`
  const gasLimit = getPercentage(
    await xaaveContract.estimateGas.burn(amount, sellForEth, minRate),
    sellForEth ? GAS_LIMIT_PERCENTAGE_ETH : GAS_LIMIT_PERCENTAGE_DEFAULT
  )
  return xaaveContract.burn(amount, sellForEth, minRate, {
    gasLimit,
  })
}
export const getExpectedQuantityOnBurnXAave = async (
  symbol,
  sellForEth,
  amount,
  provider
) => {
  const inputAmount = parseEther(amount)
  const {
    kyberProxyContract,
    network,
    xaaveContract,
  } = await getXAaveContracts(symbol, provider)
  const { chainId } = network
  const { BURN_FEE, proRataAave } = await getProRataAave(
    xaaveContract,
    inputAmount
  )
  let expectedQty
  if (!sellForEth) {
    expectedQty = proRataAave
  } else {
    const ethAddress = ADDRESSES[ETH]
    const aaveAddress = ADDRESSES[AAVE][chainId]
    const expectedRate = await getExpectedRate(
      kyberProxyContract,
      aaveAddress,
      ethAddress,
      proRataAave
    )
    expectedQty = proRataAave.mul(expectedRate).div(DEC_18)
  }
  return formatEther(expectedQty.mul(BURN_FEE).div(DEC_18))
}
const getProRataAave = async (xaaveContract, amount) => {
  const [aaveHoldings, xaaveSupply, { burnFee }] = await Promise.all([
    xaaveContract.getFundHoldings(),
    xaaveContract.totalSupply(),
    xaaveContract.feeDivisors(),
  ])
  const BURN_FEE = parseFees(burnFee)
  const proRataAave = aaveHoldings.mul(amount).div(xaaveSupply)
  return { BURN_FEE, proRataAave }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVybi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ibG9ja2NoYWluL3hhYXZlL2J1cm4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQ25ELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFFL0IsT0FBTyxFQUNMLE1BQU0sRUFDTiw0QkFBNEIsRUFDNUIsd0JBQXdCLEdBQ3pCLE1BQU0saUJBQWlCLENBQUE7QUFHeEIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUVyRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFNUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFBO0FBRWhELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQzVCLE1BQXFCLEVBQ3JCLFVBQW1CLEVBQ25CLE1BQWlCLEVBQ2pCLFFBQXNCLEVBQ1EsRUFBRTtJQUNoQyxNQUFNLEVBQ0osa0JBQWtCLEVBQ2xCLGFBQWEsRUFDYixhQUFhLEdBQ2QsR0FBRyxNQUFNLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUU3QyxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsTUFBTSxjQUFjLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBRW5FLE1BQU0sT0FBTyxHQUFHLE1BQU0sZUFBZSxDQUNuQyxrQkFBa0IsRUFDbEIsYUFBYSxDQUFDLE9BQU8sRUFDckIsU0FBUyxDQUFDLEdBQUcsQ0FBVyxFQUN4QixXQUFXLEVBQ1gsSUFBSSxDQUNMLENBQUE7SUFFRCxzQkFBc0I7SUFDdEIsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUM1QixNQUFNLGFBQWEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLEVBQ2pFLFVBQVUsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLDRCQUE0QixDQUNyRSxDQUFBO0lBRUQsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFO1FBQ3JELFFBQVE7S0FDVCxDQUFDLENBQUE7QUFDSixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRyxLQUFLLEVBQ2pELE1BQXFCLEVBQ3JCLFVBQW1CLEVBQ25CLE1BQWMsRUFDZCxRQUFzQixFQUN0QixFQUFFO0lBQ0YsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3RDLE1BQU0sRUFDSixrQkFBa0IsRUFDbEIsT0FBTyxFQUNQLGFBQWEsR0FDZCxHQUFHLE1BQU0saUJBQWlCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQzdDLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUE7SUFFM0IsTUFBTSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsR0FBRyxNQUFNLGNBQWMsQ0FDcEQsYUFBYSxFQUNiLFdBQVcsQ0FDWixDQUFBO0lBQ0QsSUFBSSxXQUFzQixDQUFBO0lBRTFCLElBQUksQ0FBQyxVQUFVLEVBQUU7UUFDZixXQUFXLEdBQUcsV0FBVyxDQUFBO0tBQzFCO1NBQU07UUFDTCxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFXLENBQUE7UUFDM0MsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRTVDLE1BQU0sWUFBWSxHQUFHLE1BQU0sZUFBZSxDQUN4QyxrQkFBa0IsRUFDbEIsV0FBVyxFQUNYLFVBQVUsRUFDVixXQUFXLENBQ1osQ0FBQTtRQUVELFdBQVcsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtLQUN4RDtJQUVELE9BQU8sV0FBVyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7QUFDM0QsQ0FBQyxDQUFBO0FBRUQsTUFBTSxjQUFjLEdBQUcsS0FBSyxFQUFFLGFBQW9CLEVBQUUsTUFBaUIsRUFBRSxFQUFFO0lBQ3ZFLE1BQU0sQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDakUsYUFBYSxDQUFDLGVBQWUsRUFBRTtRQUMvQixhQUFhLENBQUMsV0FBVyxFQUFFO1FBQzNCLGFBQWEsQ0FBQyxXQUFXLEVBQUU7S0FDNUIsQ0FBQyxDQUFBO0lBRUYsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ25DLE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBRTdELE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLENBQUE7QUFDbEMsQ0FBQyxDQUFBIn0=
