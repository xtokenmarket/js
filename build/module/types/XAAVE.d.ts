/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface XAAVEInterface extends ethers.utils.Interface {
  functions: {
    'LIQUIDATION_TIME_PERIOD()': FunctionFragment
    'addToWhitelist(address)': FunctionFragment
    'adminActiveTimestamp()': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'approveKyberContract(address)': FunctionFragment
    'approveStakingContract()': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'burn(uint256,bool,uint256)': FunctionFragment
    'calculateMintAmount(uint256,uint256,uint256)': FunctionFragment
    'certifyAdmin()': FunctionFragment
    'claim()': FunctionFragment
    'claimExternal()': FunctionFragment
    'convertTokensToTarget(address[],uint256[])': FunctionFragment
    'cooldown()': FunctionFragment
    'cooldownActivated()': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'disableCooldown()': FunctionFragment
    'emergencyCooldown()': FunctionFragment
    'emergencyRedeem(uint256)': FunctionFragment
    'feeDivisors()': FunctionFragment
    'getBufferBalance()': FunctionFragment
    'getFundBalances()': FunctionFragment
    'getFundHoldings()': FunctionFragment
    'getStakedBalance()': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'initialize(address,address,address,address,address,uint256,uint256,uint256,string,string)': FunctionFragment
    'lastLockedBlock(address)': FunctionFragment
    'mandate()': FunctionFragment
    'mint(uint256)': FunctionFragment
    'mintWithToken(uint256,address)': FunctionFragment
    'name()': FunctionFragment
    'owner()': FunctionFragment
    'pauseContract()': FunctionFragment
    'paused()': FunctionFragment
    'redeem(uint256)': FunctionFragment
    'removeFromWhitelist(address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setFeeDivisors(uint256,uint256,uint256)': FunctionFragment
    'setGovernanceV2Address(address)': FunctionFragment
    'setManager(address)': FunctionFragment
    'setManager2(address)': FunctionFragment
    'setVotingAaveAddress(address)': FunctionFragment
    'symbol()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpauseContract()': FunctionFragment
    'vote(uint256,uint256)': FunctionFragment
    'voteV2(uint256,bool)': FunctionFragment
    'withdrawFees()': FunctionFragment
    'withdrawNativeToken()': FunctionFragment
    'withdrawableAaveFees()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'LIQUIDATION_TIME_PERIOD',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'addToWhitelist',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'adminActiveTimestamp',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'approveKyberContract',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'approveStakingContract',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(
    functionFragment: 'burn',
    values: [BigNumberish, boolean, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateMintAmount',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'certifyAdmin',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'claim', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'claimExternal',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'convertTokensToTarget',
    values: [string[], BigNumberish[]]
  ): string
  encodeFunctionData(functionFragment: 'cooldown', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'cooldownActivated',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'disableCooldown',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyCooldown',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyRedeem',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'feeDivisors',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getBufferBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getFundBalances',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getFundHoldings',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getStakedBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'lastLockedBlock',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'mandate', values?: undefined): string
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'mintWithToken',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'pauseContract',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(functionFragment: 'redeem', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'removeFromWhitelist',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setFeeDivisors',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setGovernanceV2Address',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'setManager', values: [string]): string
  encodeFunctionData(functionFragment: 'setManager2', values: [string]): string
  encodeFunctionData(
    functionFragment: 'setVotingAaveAddress',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'unpauseContract',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'vote',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'voteV2',
    values: [BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawFees',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawNativeToken',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawableAaveFees',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'LIQUIDATION_TIME_PERIOD',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'addToWhitelist',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'adminActiveTimestamp',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'approveKyberContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'approveStakingContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'calculateMintAmount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'certifyAdmin',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'claimExternal',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'convertTokensToTarget',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'cooldown', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'cooldownActivated',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'disableCooldown',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'emergencyCooldown',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'emergencyRedeem',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'feeDivisors', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getBufferBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getFundBalances',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getFundHoldings',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStakedBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lastLockedBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'mandate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'mintWithToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'pauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removeFromWhitelist',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setFeeDivisors',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setGovernanceV2Address',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setManager', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setManager2', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setVotingAaveAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'unpauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'vote', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'voteV2', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'withdrawFees',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawNativeToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawableAaveFees',
    data: BytesLike
  ): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export class XAAVE extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: XAAVEInterface

  functions: {
    LIQUIDATION_TIME_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>

    'LIQUIDATION_TIME_PERIOD()'(overrides?: CallOverrides): Promise<[BigNumber]>

    addToWhitelist(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'addToWhitelist(address)'(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    adminActiveTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>

    'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<[BigNumber]>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    approveKyberContract(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approveKyberContract(address)'(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    approveStakingContract(overrides?: Overrides): Promise<ContractTransaction>

    'approveStakingContract()'(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    burn(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'burn(uint256,bool,uint256)'(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    calculateMintAmount(
      incrementalAave: BigNumberish,
      aaveHoldingsBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintAmount: BigNumber }>

    'calculateMintAmount(uint256,uint256,uint256)'(
      incrementalAave: BigNumberish,
      aaveHoldingsBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintAmount: BigNumber }>

    certifyAdmin(overrides?: Overrides): Promise<ContractTransaction>

    'certifyAdmin()'(overrides?: Overrides): Promise<ContractTransaction>

    claim(overrides?: Overrides): Promise<ContractTransaction>

    'claim()'(overrides?: Overrides): Promise<ContractTransaction>

    claimExternal(overrides?: Overrides): Promise<ContractTransaction>

    'claimExternal()'(overrides?: Overrides): Promise<ContractTransaction>

    convertTokensToTarget(
      tokens: string[],
      minReturns: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'convertTokensToTarget(address[],uint256[])'(
      tokens: string[],
      minReturns: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    cooldown(overrides?: Overrides): Promise<ContractTransaction>

    'cooldown()'(overrides?: Overrides): Promise<ContractTransaction>

    cooldownActivated(overrides?: CallOverrides): Promise<[boolean]>

    'cooldownActivated()'(overrides?: CallOverrides): Promise<[boolean]>

    decimals(overrides?: CallOverrides): Promise<[number]>

    'decimals()'(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    disableCooldown(overrides?: Overrides): Promise<ContractTransaction>

    'disableCooldown()'(overrides?: Overrides): Promise<ContractTransaction>

    emergencyCooldown(overrides?: Overrides): Promise<ContractTransaction>

    'emergencyCooldown()'(overrides?: Overrides): Promise<ContractTransaction>

    emergencyRedeem(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'emergencyRedeem(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    feeDivisors(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    'feeDivisors()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    getBufferBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getFundBalances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>

    'getFundBalances()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    getFundHoldings(overrides?: CallOverrides): Promise<[BigNumber]>

    'getFundHoldings()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getStakedBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    'getStakedBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    initialize(
      _aave: string,
      _votingAave: string,
      _stakedAave: string,
      _governance: string,
      _kyberProxy: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      _mandate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(address,address,address,address,address,uint256,uint256,uint256,string,string)'(
      _aave: string,
      _votingAave: string,
      _stakedAave: string,
      _governance: string,
      _kyberProxy: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      _mandate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    lastLockedBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    mandate(overrides?: CallOverrides): Promise<[string]>

    'mandate()'(overrides?: CallOverrides): Promise<[string]>

    mint(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'mint(uint256)'(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    mintWithToken(
      aaveAmount: BigNumberish,
      affiliate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'mintWithToken(uint256,address)'(
      aaveAmount: BigNumberish,
      affiliate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    'name()'(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    pauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>

    redeem(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'redeem(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    removeFromWhitelist(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'removeFromWhitelist(address)'(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setGovernanceV2Address(
      _governanceV2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setGovernanceV2Address(address)'(
      _governanceV2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setManager(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setManager2(
      _manager2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setManager2(address)'(
      _manager2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setVotingAaveAddress(
      _votingAave: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setVotingAaveAddress(address)'(
      _votingAave: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    'symbol()'(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    vote(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'vote(uint256,uint256)'(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    voteV2(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'voteV2(uint256,bool)'(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    withdrawFees(overrides?: Overrides): Promise<ContractTransaction>

    'withdrawFees()'(overrides?: Overrides): Promise<ContractTransaction>

    withdrawNativeToken(overrides?: Overrides): Promise<ContractTransaction>

    'withdrawNativeToken()'(overrides?: Overrides): Promise<ContractTransaction>

    withdrawableAaveFees(overrides?: CallOverrides): Promise<[BigNumber]>

    'withdrawableAaveFees()'(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  LIQUIDATION_TIME_PERIOD(overrides?: CallOverrides): Promise<BigNumber>

  'LIQUIDATION_TIME_PERIOD()'(overrides?: CallOverrides): Promise<BigNumber>

  addToWhitelist(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'addToWhitelist(address)'(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  adminActiveTimestamp(overrides?: CallOverrides): Promise<BigNumber>

  'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  approveKyberContract(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approveKyberContract(address)'(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  approveStakingContract(overrides?: Overrides): Promise<ContractTransaction>

  'approveStakingContract()'(
    overrides?: Overrides
  ): Promise<ContractTransaction>

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

  'balanceOf(address)'(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  burn(
    tokenAmount: BigNumberish,
    redeemForEth: boolean,
    minRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'burn(uint256,bool,uint256)'(
    tokenAmount: BigNumberish,
    redeemForEth: boolean,
    minRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  calculateMintAmount(
    incrementalAave: BigNumberish,
    aaveHoldingsBefore: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateMintAmount(uint256,uint256,uint256)'(
    incrementalAave: BigNumberish,
    aaveHoldingsBefore: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  certifyAdmin(overrides?: Overrides): Promise<ContractTransaction>

  'certifyAdmin()'(overrides?: Overrides): Promise<ContractTransaction>

  claim(overrides?: Overrides): Promise<ContractTransaction>

  'claim()'(overrides?: Overrides): Promise<ContractTransaction>

  claimExternal(overrides?: Overrides): Promise<ContractTransaction>

  'claimExternal()'(overrides?: Overrides): Promise<ContractTransaction>

  convertTokensToTarget(
    tokens: string[],
    minReturns: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'convertTokensToTarget(address[],uint256[])'(
    tokens: string[],
    minReturns: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  cooldown(overrides?: Overrides): Promise<ContractTransaction>

  'cooldown()'(overrides?: Overrides): Promise<ContractTransaction>

  cooldownActivated(overrides?: CallOverrides): Promise<boolean>

  'cooldownActivated()'(overrides?: CallOverrides): Promise<boolean>

  decimals(overrides?: CallOverrides): Promise<number>

  'decimals()'(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  disableCooldown(overrides?: Overrides): Promise<ContractTransaction>

  'disableCooldown()'(overrides?: Overrides): Promise<ContractTransaction>

  emergencyCooldown(overrides?: Overrides): Promise<ContractTransaction>

  'emergencyCooldown()'(overrides?: Overrides): Promise<ContractTransaction>

  emergencyRedeem(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'emergencyRedeem(uint256)'(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  feeDivisors(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      mintFee: BigNumber
      burnFee: BigNumber
      claimFee: BigNumber
    }
  >

  'feeDivisors()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      mintFee: BigNumber
      burnFee: BigNumber
      claimFee: BigNumber
    }
  >

  getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

  'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

  getFundBalances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>

  'getFundBalances()'(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>

  getFundHoldings(overrides?: CallOverrides): Promise<BigNumber>

  'getFundHoldings()'(overrides?: CallOverrides): Promise<BigNumber>

  getStakedBalance(overrides?: CallOverrides): Promise<BigNumber>

  'getStakedBalance()'(overrides?: CallOverrides): Promise<BigNumber>

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  initialize(
    _aave: string,
    _votingAave: string,
    _stakedAave: string,
    _governance: string,
    _kyberProxy: string,
    _mintFeeDivisor: BigNumberish,
    _burnFeeDivisor: BigNumberish,
    _claimFeeDivisor: BigNumberish,
    _symbol: string,
    _mandate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(address,address,address,address,address,uint256,uint256,uint256,string,string)'(
    _aave: string,
    _votingAave: string,
    _stakedAave: string,
    _governance: string,
    _kyberProxy: string,
    _mintFeeDivisor: BigNumberish,
    _burnFeeDivisor: BigNumberish,
    _claimFeeDivisor: BigNumberish,
    _symbol: string,
    _mandate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'lastLockedBlock(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  mandate(overrides?: CallOverrides): Promise<string>

  'mandate()'(overrides?: CallOverrides): Promise<string>

  mint(
    minRate: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'mint(uint256)'(
    minRate: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  mintWithToken(
    aaveAmount: BigNumberish,
    affiliate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'mintWithToken(uint256,address)'(
    aaveAmount: BigNumberish,
    affiliate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  pauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  'paused()'(overrides?: CallOverrides): Promise<boolean>

  redeem(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'redeem(uint256)'(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  removeFromWhitelist(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'removeFromWhitelist(address)'(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  setFeeDivisors(
    mintFeeDivisor: BigNumberish,
    burnFeeDivisor: BigNumberish,
    claimFeeDivisor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setFeeDivisors(uint256,uint256,uint256)'(
    mintFeeDivisor: BigNumberish,
    burnFeeDivisor: BigNumberish,
    claimFeeDivisor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setGovernanceV2Address(
    _governanceV2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setGovernanceV2Address(address)'(
    _governanceV2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setManager(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setManager(address)'(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setManager2(
    _manager2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setManager2(address)'(
    _manager2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setVotingAaveAddress(
    _votingAave: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setVotingAaveAddress(address)'(
    _votingAave: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  'symbol()'(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferFrom(address,address,uint256)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  vote(
    _proposalId: BigNumberish,
    _vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'vote(uint256,uint256)'(
    _proposalId: BigNumberish,
    _vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  voteV2(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'voteV2(uint256,bool)'(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  withdrawFees(overrides?: Overrides): Promise<ContractTransaction>

  'withdrawFees()'(overrides?: Overrides): Promise<ContractTransaction>

  withdrawNativeToken(overrides?: Overrides): Promise<ContractTransaction>

  'withdrawNativeToken()'(overrides?: Overrides): Promise<ContractTransaction>

  withdrawableAaveFees(overrides?: CallOverrides): Promise<BigNumber>

  'withdrawableAaveFees()'(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    LIQUIDATION_TIME_PERIOD(overrides?: CallOverrides): Promise<BigNumber>

    'LIQUIDATION_TIME_PERIOD()'(overrides?: CallOverrides): Promise<BigNumber>

    addToWhitelist(_address: string, overrides?: CallOverrides): Promise<void>

    'addToWhitelist(address)'(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>

    adminActiveTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    approveKyberContract(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>

    'approveKyberContract(address)'(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>

    approveStakingContract(overrides?: CallOverrides): Promise<void>

    'approveStakingContract()'(overrides?: CallOverrides): Promise<void>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'burn(uint256,bool,uint256)'(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    calculateMintAmount(
      incrementalAave: BigNumberish,
      aaveHoldingsBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateMintAmount(uint256,uint256,uint256)'(
      incrementalAave: BigNumberish,
      aaveHoldingsBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    certifyAdmin(overrides?: CallOverrides): Promise<void>

    'certifyAdmin()'(overrides?: CallOverrides): Promise<void>

    claim(overrides?: CallOverrides): Promise<void>

    'claim()'(overrides?: CallOverrides): Promise<void>

    claimExternal(overrides?: CallOverrides): Promise<void>

    'claimExternal()'(overrides?: CallOverrides): Promise<void>

    convertTokensToTarget(
      tokens: string[],
      minReturns: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>

    'convertTokensToTarget(address[],uint256[])'(
      tokens: string[],
      minReturns: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>

    cooldown(overrides?: CallOverrides): Promise<void>

    'cooldown()'(overrides?: CallOverrides): Promise<void>

    cooldownActivated(overrides?: CallOverrides): Promise<boolean>

    'cooldownActivated()'(overrides?: CallOverrides): Promise<boolean>

    decimals(overrides?: CallOverrides): Promise<number>

    'decimals()'(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    disableCooldown(overrides?: CallOverrides): Promise<void>

    'disableCooldown()'(overrides?: CallOverrides): Promise<void>

    emergencyCooldown(overrides?: CallOverrides): Promise<void>

    'emergencyCooldown()'(overrides?: CallOverrides): Promise<void>

    emergencyRedeem(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'emergencyRedeem(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    feeDivisors(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    'feeDivisors()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getFundBalances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>

    'getFundBalances()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    getFundHoldings(overrides?: CallOverrides): Promise<BigNumber>

    'getFundHoldings()'(overrides?: CallOverrides): Promise<BigNumber>

    getStakedBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getStakedBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    initialize(
      _aave: string,
      _votingAave: string,
      _stakedAave: string,
      _governance: string,
      _kyberProxy: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      _mandate: string,
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(address,address,address,address,address,uint256,uint256,uint256,string,string)'(
      _aave: string,
      _votingAave: string,
      _stakedAave: string,
      _governance: string,
      _kyberProxy: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      _mandate: string,
      overrides?: CallOverrides
    ): Promise<void>

    lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    mandate(overrides?: CallOverrides): Promise<string>

    'mandate()'(overrides?: CallOverrides): Promise<string>

    mint(minRate: BigNumberish, overrides?: CallOverrides): Promise<void>

    'mint(uint256)'(
      minRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    mintWithToken(
      aaveAmount: BigNumberish,
      affiliate: string,
      overrides?: CallOverrides
    ): Promise<void>

    'mintWithToken(uint256,address)'(
      aaveAmount: BigNumberish,
      affiliate: string,
      overrides?: CallOverrides
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    pauseContract(overrides?: CallOverrides): Promise<boolean>

    'pauseContract()'(overrides?: CallOverrides): Promise<boolean>

    paused(overrides?: CallOverrides): Promise<boolean>

    'paused()'(overrides?: CallOverrides): Promise<boolean>

    redeem(amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    'redeem(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    removeFromWhitelist(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>

    'removeFromWhitelist(address)'(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setGovernanceV2Address(
      _governanceV2: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setGovernanceV2Address(address)'(
      _governanceV2: string,
      overrides?: CallOverrides
    ): Promise<void>

    setManager(_manager: string, overrides?: CallOverrides): Promise<void>

    'setManager(address)'(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<void>

    setManager2(_manager2: string, overrides?: CallOverrides): Promise<void>

    'setManager2(address)'(
      _manager2: string,
      overrides?: CallOverrides
    ): Promise<void>

    setVotingAaveAddress(
      _votingAave: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setVotingAaveAddress(address)'(
      _votingAave: string,
      overrides?: CallOverrides
    ): Promise<void>

    symbol(overrides?: CallOverrides): Promise<string>

    'symbol()'(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    unpauseContract(overrides?: CallOverrides): Promise<boolean>

    'unpauseContract()'(overrides?: CallOverrides): Promise<boolean>

    vote(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'vote(uint256,uint256)'(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    voteV2(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'voteV2(uint256,bool)'(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawFees(overrides?: CallOverrides): Promise<void>

    'withdrawFees()'(overrides?: CallOverrides): Promise<void>

    withdrawNativeToken(overrides?: CallOverrides): Promise<void>

    'withdrawNativeToken()'(overrides?: CallOverrides): Promise<void>

    withdrawableAaveFees(overrides?: CallOverrides): Promise<BigNumber>

    'withdrawableAaveFees()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter

    Paused(account: null): EventFilter

    Transfer(from: string | null, to: string | null, value: null): EventFilter

    Unpaused(account: null): EventFilter
  }

  estimateGas: {
    LIQUIDATION_TIME_PERIOD(overrides?: CallOverrides): Promise<BigNumber>

    'LIQUIDATION_TIME_PERIOD()'(overrides?: CallOverrides): Promise<BigNumber>

    addToWhitelist(_address: string, overrides?: Overrides): Promise<BigNumber>

    'addToWhitelist(address)'(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    adminActiveTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    approveKyberContract(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approveKyberContract(address)'(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    approveStakingContract(overrides?: Overrides): Promise<BigNumber>

    'approveStakingContract()'(overrides?: Overrides): Promise<BigNumber>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'burn(uint256,bool,uint256)'(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    calculateMintAmount(
      incrementalAave: BigNumberish,
      aaveHoldingsBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateMintAmount(uint256,uint256,uint256)'(
      incrementalAave: BigNumberish,
      aaveHoldingsBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    certifyAdmin(overrides?: Overrides): Promise<BigNumber>

    'certifyAdmin()'(overrides?: Overrides): Promise<BigNumber>

    claim(overrides?: Overrides): Promise<BigNumber>

    'claim()'(overrides?: Overrides): Promise<BigNumber>

    claimExternal(overrides?: Overrides): Promise<BigNumber>

    'claimExternal()'(overrides?: Overrides): Promise<BigNumber>

    convertTokensToTarget(
      tokens: string[],
      minReturns: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'convertTokensToTarget(address[],uint256[])'(
      tokens: string[],
      minReturns: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>

    cooldown(overrides?: Overrides): Promise<BigNumber>

    'cooldown()'(overrides?: Overrides): Promise<BigNumber>

    cooldownActivated(overrides?: CallOverrides): Promise<BigNumber>

    'cooldownActivated()'(overrides?: CallOverrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    disableCooldown(overrides?: Overrides): Promise<BigNumber>

    'disableCooldown()'(overrides?: Overrides): Promise<BigNumber>

    emergencyCooldown(overrides?: Overrides): Promise<BigNumber>

    'emergencyCooldown()'(overrides?: Overrides): Promise<BigNumber>

    emergencyRedeem(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'emergencyRedeem(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    feeDivisors(overrides?: CallOverrides): Promise<BigNumber>

    'feeDivisors()'(overrides?: CallOverrides): Promise<BigNumber>

    getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getFundBalances(overrides?: CallOverrides): Promise<BigNumber>

    'getFundBalances()'(overrides?: CallOverrides): Promise<BigNumber>

    getFundHoldings(overrides?: CallOverrides): Promise<BigNumber>

    'getFundHoldings()'(overrides?: CallOverrides): Promise<BigNumber>

    getStakedBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getStakedBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    initialize(
      _aave: string,
      _votingAave: string,
      _stakedAave: string,
      _governance: string,
      _kyberProxy: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      _mandate: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(address,address,address,address,address,uint256,uint256,uint256,string,string)'(
      _aave: string,
      _votingAave: string,
      _stakedAave: string,
      _governance: string,
      _kyberProxy: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      _mandate: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    mandate(overrides?: CallOverrides): Promise<BigNumber>

    'mandate()'(overrides?: CallOverrides): Promise<BigNumber>

    mint(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'mint(uint256)'(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    mintWithToken(
      aaveAmount: BigNumberish,
      affiliate: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'mintWithToken(uint256,address)'(
      aaveAmount: BigNumberish,
      affiliate: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    pauseContract(overrides?: Overrides): Promise<BigNumber>

    'pauseContract()'(overrides?: Overrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>

    redeem(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'redeem(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    removeFromWhitelist(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'removeFromWhitelist(address)'(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setGovernanceV2Address(
      _governanceV2: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setGovernanceV2Address(address)'(
      _governanceV2: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setManager(_manager: string, overrides?: Overrides): Promise<BigNumber>

    'setManager(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setManager2(_manager2: string, overrides?: Overrides): Promise<BigNumber>

    'setManager2(address)'(
      _manager2: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setVotingAaveAddress(
      _votingAave: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setVotingAaveAddress(address)'(
      _votingAave: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    unpauseContract(overrides?: Overrides): Promise<BigNumber>

    'unpauseContract()'(overrides?: Overrides): Promise<BigNumber>

    vote(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'vote(uint256,uint256)'(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    voteV2(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'voteV2(uint256,bool)'(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    withdrawFees(overrides?: Overrides): Promise<BigNumber>

    'withdrawFees()'(overrides?: Overrides): Promise<BigNumber>

    withdrawNativeToken(overrides?: Overrides): Promise<BigNumber>

    'withdrawNativeToken()'(overrides?: Overrides): Promise<BigNumber>

    withdrawableAaveFees(overrides?: CallOverrides): Promise<BigNumber>

    'withdrawableAaveFees()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    LIQUIDATION_TIME_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'LIQUIDATION_TIME_PERIOD()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    addToWhitelist(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'addToWhitelist(address)'(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    adminActiveTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'adminActiveTimestamp()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    approveKyberContract(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approveKyberContract(address)'(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    approveStakingContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'approveStakingContract()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    burn(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'burn(uint256,bool,uint256)'(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    calculateMintAmount(
      incrementalAave: BigNumberish,
      aaveHoldingsBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateMintAmount(uint256,uint256,uint256)'(
      incrementalAave: BigNumberish,
      aaveHoldingsBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    certifyAdmin(overrides?: Overrides): Promise<PopulatedTransaction>

    'certifyAdmin()'(overrides?: Overrides): Promise<PopulatedTransaction>

    claim(overrides?: Overrides): Promise<PopulatedTransaction>

    'claim()'(overrides?: Overrides): Promise<PopulatedTransaction>

    claimExternal(overrides?: Overrides): Promise<PopulatedTransaction>

    'claimExternal()'(overrides?: Overrides): Promise<PopulatedTransaction>

    convertTokensToTarget(
      tokens: string[],
      minReturns: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'convertTokensToTarget(address[],uint256[])'(
      tokens: string[],
      minReturns: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    cooldown(overrides?: Overrides): Promise<PopulatedTransaction>

    'cooldown()'(overrides?: Overrides): Promise<PopulatedTransaction>

    cooldownActivated(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'cooldownActivated()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    disableCooldown(overrides?: Overrides): Promise<PopulatedTransaction>

    'disableCooldown()'(overrides?: Overrides): Promise<PopulatedTransaction>

    emergencyCooldown(overrides?: Overrides): Promise<PopulatedTransaction>

    'emergencyCooldown()'(overrides?: Overrides): Promise<PopulatedTransaction>

    emergencyRedeem(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'emergencyRedeem(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    feeDivisors(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'feeDivisors()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getBufferBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getBufferBalance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getFundBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getFundBalances()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getFundHoldings(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getFundHoldings()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getStakedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getStakedBalance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    initialize(
      _aave: string,
      _votingAave: string,
      _stakedAave: string,
      _governance: string,
      _kyberProxy: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      _mandate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(address,address,address,address,address,uint256,uint256,uint256,string,string)'(
      _aave: string,
      _votingAave: string,
      _stakedAave: string,
      _governance: string,
      _kyberProxy: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      _mandate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    lastLockedBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    mandate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'mandate()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mint(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'mint(uint256)'(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    mintWithToken(
      aaveAmount: BigNumberish,
      affiliate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'mintWithToken(uint256,address)'(
      aaveAmount: BigNumberish,
      affiliate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    redeem(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'redeem(uint256)'(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    removeFromWhitelist(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'removeFromWhitelist(address)'(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setGovernanceV2Address(
      _governanceV2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setGovernanceV2Address(address)'(
      _governanceV2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setManager(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setManager2(
      _manager2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setManager2(address)'(
      _manager2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setVotingAaveAddress(
      _votingAave: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setVotingAaveAddress(address)'(
      _votingAave: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    unpauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    vote(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'vote(uint256,uint256)'(
      _proposalId: BigNumberish,
      _vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    voteV2(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'voteV2(uint256,bool)'(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    withdrawFees(overrides?: Overrides): Promise<PopulatedTransaction>

    'withdrawFees()'(overrides?: Overrides): Promise<PopulatedTransaction>

    withdrawNativeToken(overrides?: Overrides): Promise<PopulatedTransaction>

    'withdrawNativeToken()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    withdrawableAaveFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'withdrawableAaveFees()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
