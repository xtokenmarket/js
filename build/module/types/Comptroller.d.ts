/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ComptrollerInterface extends ethers.utils.Interface {
  functions: {
    'addMarket(address)': FunctionFragment
    'borrowingCapacity(address)': FunctionFragment
    'getAllMarkets()': FunctionFragment
    'getHealthRatio(address)': FunctionFragment
    'initialize()': FunctionFragment
    'liquidityPool()': FunctionFragment
    'markets(uint256)': FunctionFragment
    'owner()': FunctionFragment
    'removeMarket(address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'resetMarkets()': FunctionFragment
    'sendCollateralToLiquidator(address,address,uint256)': FunctionFragment
    'sendCollateralToLiquidatorWithPreference(address,address,uint256,address[])': FunctionFragment
    'setLiquidityPool(address)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'addMarket', values: [string]): string
  encodeFunctionData(
    functionFragment: 'borrowingCapacity',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'getAllMarkets',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getHealthRatio',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'liquidityPool',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'markets',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'removeMarket', values: [string]): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'resetMarkets',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'sendCollateralToLiquidator',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'sendCollateralToLiquidatorWithPreference',
    values: [string, string, BigNumberish, string[]]
  ): string
  encodeFunctionData(
    functionFragment: 'setLiquidityPool',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string

  decodeFunctionResult(functionFragment: 'addMarket', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'borrowingCapacity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAllMarkets',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getHealthRatio',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'liquidityPool',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'markets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removeMarket',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'resetMarkets',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'sendCollateralToLiquidator',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'sendCollateralToLiquidatorWithPreference',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setLiquidityPool',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export class Comptroller extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ComptrollerInterface

  functions: {
    addMarket(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'addMarket(address)'(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    borrowingCapacity(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { capacity: BigNumber }>

    'borrowingCapacity(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { capacity: BigNumber }>

    getAllMarkets(overrides?: CallOverrides): Promise<[string[]]>

    'getAllMarkets()'(overrides?: CallOverrides): Promise<[string[]]>

    getHealthRatio(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getHealthRatio(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    initialize(overrides?: Overrides): Promise<ContractTransaction>

    'initialize()'(overrides?: Overrides): Promise<ContractTransaction>

    liquidityPool(overrides?: CallOverrides): Promise<[string]>

    'liquidityPool()'(overrides?: CallOverrides): Promise<[string]>

    markets(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    'markets(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    removeMarket(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'removeMarket(address)'(
      _market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    resetMarkets(overrides?: Overrides): Promise<ContractTransaction>

    'resetMarkets()'(overrides?: Overrides): Promise<ContractTransaction>

    sendCollateralToLiquidator(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'sendCollateralToLiquidator(address,address,uint256)'(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    sendCollateralToLiquidatorWithPreference(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'sendCollateralToLiquidatorWithPreference(address,address,uint256,address[])'(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setLiquidityPool(
      _liquidityPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setLiquidityPool(address)'(
      _liquidityPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  addMarket(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'addMarket(address)'(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  borrowingCapacity(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'borrowingCapacity(address)'(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getAllMarkets(overrides?: CallOverrides): Promise<string[]>

  'getAllMarkets()'(overrides?: CallOverrides): Promise<string[]>

  getHealthRatio(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getHealthRatio(address)'(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  initialize(overrides?: Overrides): Promise<ContractTransaction>

  'initialize()'(overrides?: Overrides): Promise<ContractTransaction>

  liquidityPool(overrides?: CallOverrides): Promise<string>

  'liquidityPool()'(overrides?: CallOverrides): Promise<string>

  markets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  'markets(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  removeMarket(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'removeMarket(address)'(
    _market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  resetMarkets(overrides?: Overrides): Promise<ContractTransaction>

  'resetMarkets()'(overrides?: Overrides): Promise<ContractTransaction>

  sendCollateralToLiquidator(
    _liquidator: string,
    _borrower: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'sendCollateralToLiquidator(address,address,uint256)'(
    _liquidator: string,
    _borrower: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  sendCollateralToLiquidatorWithPreference(
    _liquidator: string,
    _borrower: string,
    _amount: BigNumberish,
    _markets: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'sendCollateralToLiquidatorWithPreference(address,address,uint256,address[])'(
    _liquidator: string,
    _borrower: string,
    _amount: BigNumberish,
    _markets: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setLiquidityPool(
    _liquidityPool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setLiquidityPool(address)'(
    _liquidityPool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    addMarket(_market: string, overrides?: CallOverrides): Promise<void>

    'addMarket(address)'(
      _market: string,
      overrides?: CallOverrides
    ): Promise<void>

    borrowingCapacity(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'borrowingCapacity(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAllMarkets(overrides?: CallOverrides): Promise<string[]>

    'getAllMarkets()'(overrides?: CallOverrides): Promise<string[]>

    getHealthRatio(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getHealthRatio(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(overrides?: CallOverrides): Promise<void>

    'initialize()'(overrides?: CallOverrides): Promise<void>

    liquidityPool(overrides?: CallOverrides): Promise<string>

    'liquidityPool()'(overrides?: CallOverrides): Promise<string>

    markets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    'markets(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    removeMarket(_market: string, overrides?: CallOverrides): Promise<void>

    'removeMarket(address)'(
      _market: string,
      overrides?: CallOverrides
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    resetMarkets(overrides?: CallOverrides): Promise<void>

    'resetMarkets()'(overrides?: CallOverrides): Promise<void>

    sendCollateralToLiquidator(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'sendCollateralToLiquidator(address,address,uint256)'(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    sendCollateralToLiquidatorWithPreference(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: CallOverrides
    ): Promise<boolean>

    'sendCollateralToLiquidatorWithPreference(address,address,uint256,address[])'(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: CallOverrides
    ): Promise<boolean>

    setLiquidityPool(
      _liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setLiquidityPool(address)'(
      _liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter
  }

  estimateGas: {
    addMarket(_market: string, overrides?: Overrides): Promise<BigNumber>

    'addMarket(address)'(
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    borrowingCapacity(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'borrowingCapacity(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAllMarkets(overrides?: CallOverrides): Promise<BigNumber>

    'getAllMarkets()'(overrides?: CallOverrides): Promise<BigNumber>

    getHealthRatio(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getHealthRatio(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(overrides?: Overrides): Promise<BigNumber>

    'initialize()'(overrides?: Overrides): Promise<BigNumber>

    liquidityPool(overrides?: CallOverrides): Promise<BigNumber>

    'liquidityPool()'(overrides?: CallOverrides): Promise<BigNumber>

    markets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'markets(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    removeMarket(_market: string, overrides?: Overrides): Promise<BigNumber>

    'removeMarket(address)'(
      _market: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    resetMarkets(overrides?: Overrides): Promise<BigNumber>

    'resetMarkets()'(overrides?: Overrides): Promise<BigNumber>

    sendCollateralToLiquidator(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'sendCollateralToLiquidator(address,address,uint256)'(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    sendCollateralToLiquidatorWithPreference(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'sendCollateralToLiquidatorWithPreference(address,address,uint256,address[])'(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: Overrides
    ): Promise<BigNumber>

    setLiquidityPool(
      _liquidityPool: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setLiquidityPool(address)'(
      _liquidityPool: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    addMarket(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'addMarket(address)'(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    borrowingCapacity(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'borrowingCapacity(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAllMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getAllMarkets()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getHealthRatio(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getHealthRatio(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(overrides?: Overrides): Promise<PopulatedTransaction>

    'initialize()'(overrides?: Overrides): Promise<PopulatedTransaction>

    liquidityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'liquidityPool()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    markets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'markets(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    removeMarket(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'removeMarket(address)'(
      _market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    resetMarkets(overrides?: Overrides): Promise<PopulatedTransaction>

    'resetMarkets()'(overrides?: Overrides): Promise<PopulatedTransaction>

    sendCollateralToLiquidator(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'sendCollateralToLiquidator(address,address,uint256)'(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    sendCollateralToLiquidatorWithPreference(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'sendCollateralToLiquidatorWithPreference(address,address,uint256,address[])'(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setLiquidityPool(
      _liquidityPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setLiquidityPool(address)'(
      _liquidityPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
