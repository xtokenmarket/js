/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface DMMPoolInterface extends ethers.utils.Interface {
  functions: {
    'MINIMUM_LIQUIDITY()': FunctionFragment
    'PERMIT_TYPEHASH()': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'ampBps()': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'burn(address)': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'domainSeparator()': FunctionFragment
    'factory()': FunctionFragment
    'getReserves()': FunctionFragment
    'getTradeInfo()': FunctionFragment
    'getVolumeTrendData()': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'initialize(address,address,uint32)': FunctionFragment
    'kLast()': FunctionFragment
    'mint(address)': FunctionFragment
    'name()': FunctionFragment
    'nonces(address)': FunctionFragment
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment
    'skim(address)': FunctionFragment
    'swap(uint256,uint256,address,bytes)': FunctionFragment
    'symbol()': FunctionFragment
    'sync()': FunctionFragment
    'token0()': FunctionFragment
    'token1()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'MINIMUM_LIQUIDITY',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'PERMIT_TYPEHASH',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string]
  ): string
  encodeFunctionData(functionFragment: 'ampBps', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'burn', values: [string]): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'domainSeparator',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getReserves',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getTradeInfo',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getVolumeTrendData',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'kLast', values?: undefined): string
  encodeFunctionData(functionFragment: 'mint', values: [string]): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string
  encodeFunctionData(
    functionFragment: 'permit',
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string
  encodeFunctionData(functionFragment: 'skim', values: [string]): string
  encodeFunctionData(
    functionFragment: 'swap',
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(functionFragment: 'sync', values?: undefined): string
  encodeFunctionData(functionFragment: 'token0', values?: undefined): string
  encodeFunctionData(functionFragment: 'token1', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'MINIMUM_LIQUIDITY',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'PERMIT_TYPEHASH',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ampBps', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'domainSeparator',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getReserves', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getTradeInfo',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getVolumeTrendData',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'kLast', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'skim', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sync', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token0', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token1', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'Burn(address,uint256,uint256,address)': EventFragment
    'Mint(address,uint256,uint256)': EventFragment
    'Swap(address,uint256,uint256,uint256,uint256,address,uint256)': EventFragment
    'Sync(uint256,uint256,uint256,uint256)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'UpdateEMA(uint256,uint256,uint128,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Swap'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Sync'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateEMA'): EventFragment
}

export class DMMPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: DMMPoolInterface

  functions: {
    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<[BigNumber]>

    'MINIMUM_LIQUIDITY()'(overrides?: CallOverrides): Promise<[BigNumber]>

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>

    'PERMIT_TYPEHASH()'(overrides?: CallOverrides): Promise<[string]>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    ampBps(overrides?: CallOverrides): Promise<[number]>

    'ampBps()'(overrides?: CallOverrides): Promise<[number]>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    burn(to: string, overrides?: Overrides): Promise<ContractTransaction>

    'burn(address)'(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    decimals(overrides?: CallOverrides): Promise<[number]>

    'decimals()'(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    domainSeparator(overrides?: CallOverrides): Promise<[string]>

    'domainSeparator()'(overrides?: CallOverrides): Promise<[string]>

    factory(overrides?: CallOverrides): Promise<[string]>

    'factory()'(overrides?: CallOverrides): Promise<[string]>

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reserve0: BigNumber; _reserve1: BigNumber }
    >

    'getReserves()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reserve0: BigNumber; _reserve1: BigNumber }
    >

    getTradeInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _reserve0: BigNumber
        _reserve1: BigNumber
        _vReserve0: BigNumber
        _vReserve1: BigNumber
        feeInPrecision: BigNumber
      }
    >

    'getTradeInfo()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _reserve0: BigNumber
        _reserve1: BigNumber
        _vReserve0: BigNumber
        _vReserve1: BigNumber
        feeInPrecision: BigNumber
      }
    >

    getVolumeTrendData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _shortEMA: BigNumber
        _longEMA: BigNumber
        _currentBlockVolume: BigNumber
        _lastTradeBlock: BigNumber
      }
    >

    'getVolumeTrendData()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _shortEMA: BigNumber
        _longEMA: BigNumber
        _currentBlockVolume: BigNumber
        _lastTradeBlock: BigNumber
      }
    >

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    initialize(
      _token0: string,
      _token1: string,
      _ampBps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(address,address,uint32)'(
      _token0: string,
      _token1: string,
      _ampBps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    kLast(overrides?: CallOverrides): Promise<[BigNumber]>

    'kLast()'(overrides?: CallOverrides): Promise<[BigNumber]>

    mint(to: string, overrides?: Overrides): Promise<ContractTransaction>

    'mint(address)'(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    'name()'(overrides?: CallOverrides): Promise<[string]>

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'nonces(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)'(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    skim(to: string, overrides?: Overrides): Promise<ContractTransaction>

    'skim(address)'(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      callbackData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'swap(uint256,uint256,address,bytes)'(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      callbackData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    'symbol()'(overrides?: CallOverrides): Promise<[string]>

    sync(overrides?: Overrides): Promise<ContractTransaction>

    'sync()'(overrides?: Overrides): Promise<ContractTransaction>

    token0(overrides?: CallOverrides): Promise<[string]>

    'token0()'(overrides?: CallOverrides): Promise<[string]>

    token1(overrides?: CallOverrides): Promise<[string]>

    'token1()'(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>

  'MINIMUM_LIQUIDITY()'(overrides?: CallOverrides): Promise<BigNumber>

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>

  'PERMIT_TYPEHASH()'(overrides?: CallOverrides): Promise<string>

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  ampBps(overrides?: CallOverrides): Promise<number>

  'ampBps()'(overrides?: CallOverrides): Promise<number>

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

  'balanceOf(address)'(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  burn(to: string, overrides?: Overrides): Promise<ContractTransaction>

  'burn(address)'(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  decimals(overrides?: CallOverrides): Promise<number>

  'decimals()'(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  domainSeparator(overrides?: CallOverrides): Promise<string>

  'domainSeparator()'(overrides?: CallOverrides): Promise<string>

  factory(overrides?: CallOverrides): Promise<string>

  'factory()'(overrides?: CallOverrides): Promise<string>

  getReserves(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _reserve0: BigNumber; _reserve1: BigNumber }
  >

  'getReserves()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _reserve0: BigNumber; _reserve1: BigNumber }
  >

  getTradeInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _reserve0: BigNumber
      _reserve1: BigNumber
      _vReserve0: BigNumber
      _vReserve1: BigNumber
      feeInPrecision: BigNumber
    }
  >

  'getTradeInfo()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _reserve0: BigNumber
      _reserve1: BigNumber
      _vReserve0: BigNumber
      _vReserve1: BigNumber
      feeInPrecision: BigNumber
    }
  >

  getVolumeTrendData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      _shortEMA: BigNumber
      _longEMA: BigNumber
      _currentBlockVolume: BigNumber
      _lastTradeBlock: BigNumber
    }
  >

  'getVolumeTrendData()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      _shortEMA: BigNumber
      _longEMA: BigNumber
      _currentBlockVolume: BigNumber
      _lastTradeBlock: BigNumber
    }
  >

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  initialize(
    _token0: string,
    _token1: string,
    _ampBps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(address,address,uint32)'(
    _token0: string,
    _token1: string,
    _ampBps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  kLast(overrides?: CallOverrides): Promise<BigNumber>

  'kLast()'(overrides?: CallOverrides): Promise<BigNumber>

  mint(to: string, overrides?: Overrides): Promise<ContractTransaction>

  'mint(address)'(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'nonces(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)'(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  skim(to: string, overrides?: Overrides): Promise<ContractTransaction>

  'skim(address)'(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  swap(
    amount0Out: BigNumberish,
    amount1Out: BigNumberish,
    to: string,
    callbackData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'swap(uint256,uint256,address,bytes)'(
    amount0Out: BigNumberish,
    amount1Out: BigNumberish,
    to: string,
    callbackData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  'symbol()'(overrides?: CallOverrides): Promise<string>

  sync(overrides?: Overrides): Promise<ContractTransaction>

  'sync()'(overrides?: Overrides): Promise<ContractTransaction>

  token0(overrides?: CallOverrides): Promise<string>

  'token0()'(overrides?: CallOverrides): Promise<string>

  token1(overrides?: CallOverrides): Promise<string>

  'token1()'(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferFrom(address,address,uint256)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>

    'MINIMUM_LIQUIDITY()'(overrides?: CallOverrides): Promise<BigNumber>

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>

    'PERMIT_TYPEHASH()'(overrides?: CallOverrides): Promise<string>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    ampBps(overrides?: CallOverrides): Promise<number>

    'ampBps()'(overrides?: CallOverrides): Promise<number>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'burn(address)'(
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    decimals(overrides?: CallOverrides): Promise<number>

    'decimals()'(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    domainSeparator(overrides?: CallOverrides): Promise<string>

    'domainSeparator()'(overrides?: CallOverrides): Promise<string>

    factory(overrides?: CallOverrides): Promise<string>

    'factory()'(overrides?: CallOverrides): Promise<string>

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reserve0: BigNumber; _reserve1: BigNumber }
    >

    'getReserves()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _reserve0: BigNumber; _reserve1: BigNumber }
    >

    getTradeInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _reserve0: BigNumber
        _reserve1: BigNumber
        _vReserve0: BigNumber
        _vReserve1: BigNumber
        feeInPrecision: BigNumber
      }
    >

    'getTradeInfo()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _reserve0: BigNumber
        _reserve1: BigNumber
        _vReserve0: BigNumber
        _vReserve1: BigNumber
        feeInPrecision: BigNumber
      }
    >

    getVolumeTrendData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _shortEMA: BigNumber
        _longEMA: BigNumber
        _currentBlockVolume: BigNumber
        _lastTradeBlock: BigNumber
      }
    >

    'getVolumeTrendData()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _shortEMA: BigNumber
        _longEMA: BigNumber
        _currentBlockVolume: BigNumber
        _lastTradeBlock: BigNumber
      }
    >

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    initialize(
      _token0: string,
      _token1: string,
      _ampBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(address,address,uint32)'(
      _token0: string,
      _token1: string,
      _ampBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    kLast(overrides?: CallOverrides): Promise<BigNumber>

    'kLast()'(overrides?: CallOverrides): Promise<BigNumber>

    mint(to: string, overrides?: CallOverrides): Promise<BigNumber>

    'mint(address)'(to: string, overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'nonces(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)'(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    skim(to: string, overrides?: CallOverrides): Promise<void>

    'skim(address)'(to: string, overrides?: CallOverrides): Promise<void>

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'swap(uint256,uint256,address,bytes)'(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    symbol(overrides?: CallOverrides): Promise<string>

    'symbol()'(overrides?: CallOverrides): Promise<string>

    sync(overrides?: CallOverrides): Promise<void>

    'sync()'(overrides?: CallOverrides): Promise<void>

    token0(overrides?: CallOverrides): Promise<string>

    'token0()'(overrides?: CallOverrides): Promise<string>

    token1(overrides?: CallOverrides): Promise<string>

    'token1()'(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>
  }

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter

    Burn(
      sender: string | null,
      amount0: null,
      amount1: null,
      to: string | null
    ): EventFilter

    Mint(sender: string | null, amount0: null, amount1: null): EventFilter

    Swap(
      sender: string | null,
      amount0In: null,
      amount1In: null,
      amount0Out: null,
      amount1Out: null,
      to: string | null,
      feeInPrecision: null
    ): EventFilter

    Sync(
      vReserve0: null,
      vReserve1: null,
      reserve0: null,
      reserve1: null
    ): EventFilter

    Transfer(from: string | null, to: string | null, value: null): EventFilter

    UpdateEMA(
      shortEMA: null,
      longEMA: null,
      lastBlockVolume: null,
      skipBlock: null
    ): EventFilter
  }

  estimateGas: {
    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>

    'MINIMUM_LIQUIDITY()'(overrides?: CallOverrides): Promise<BigNumber>

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>

    'PERMIT_TYPEHASH()'(overrides?: CallOverrides): Promise<BigNumber>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    ampBps(overrides?: CallOverrides): Promise<BigNumber>

    'ampBps()'(overrides?: CallOverrides): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(to: string, overrides?: Overrides): Promise<BigNumber>

    'burn(address)'(to: string, overrides?: Overrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>

    'domainSeparator()'(overrides?: CallOverrides): Promise<BigNumber>

    factory(overrides?: CallOverrides): Promise<BigNumber>

    'factory()'(overrides?: CallOverrides): Promise<BigNumber>

    getReserves(overrides?: CallOverrides): Promise<BigNumber>

    'getReserves()'(overrides?: CallOverrides): Promise<BigNumber>

    getTradeInfo(overrides?: CallOverrides): Promise<BigNumber>

    'getTradeInfo()'(overrides?: CallOverrides): Promise<BigNumber>

    getVolumeTrendData(overrides?: CallOverrides): Promise<BigNumber>

    'getVolumeTrendData()'(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    initialize(
      _token0: string,
      _token1: string,
      _ampBps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(address,address,uint32)'(
      _token0: string,
      _token1: string,
      _ampBps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    kLast(overrides?: CallOverrides): Promise<BigNumber>

    'kLast()'(overrides?: CallOverrides): Promise<BigNumber>

    mint(to: string, overrides?: Overrides): Promise<BigNumber>

    'mint(address)'(to: string, overrides?: Overrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'nonces(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)'(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    skim(to: string, overrides?: Overrides): Promise<BigNumber>

    'skim(address)'(to: string, overrides?: Overrides): Promise<BigNumber>

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      callbackData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'swap(uint256,uint256,address,bytes)'(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      callbackData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>

    sync(overrides?: Overrides): Promise<BigNumber>

    'sync()'(overrides?: Overrides): Promise<BigNumber>

    token0(overrides?: CallOverrides): Promise<BigNumber>

    'token0()'(overrides?: CallOverrides): Promise<BigNumber>

    token1(overrides?: CallOverrides): Promise<BigNumber>

    'token1()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'MINIMUM_LIQUIDITY()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'PERMIT_TYPEHASH()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    ampBps(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'ampBps()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    burn(to: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'burn(address)'(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'domainSeparator()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'factory()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getReserves()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getTradeInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getTradeInfo()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getVolumeTrendData(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getVolumeTrendData()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    initialize(
      _token0: string,
      _token1: string,
      _ampBps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(address,address,uint32)'(
      _token0: string,
      _token1: string,
      _ampBps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    kLast(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'kLast()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mint(to: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'mint(address)'(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'nonces(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)'(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    skim(to: string, overrides?: Overrides): Promise<PopulatedTransaction>

    'skim(address)'(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    swap(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      callbackData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'swap(uint256,uint256,address,bytes)'(
      amount0Out: BigNumberish,
      amount1Out: BigNumberish,
      to: string,
      callbackData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sync(overrides?: Overrides): Promise<PopulatedTransaction>

    'sync()'(overrides?: Overrides): Promise<PopulatedTransaction>

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'token0()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'token1()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
