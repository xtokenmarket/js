/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface KyberProxyInterface extends ethers.utils.Interface {
  functions: {
    'removeAlerter(address)': FunctionFragment
    'listPairForReserve(address,address,address,bool)': FunctionFragment
    'perReserveListedPairs(address,bytes32)': FunctionFragment
    'getReserves()': FunctionFragment
    'enabled()': FunctionFragment
    'pendingAdmin()': FunctionFragment
    'getOperators()': FunctionFragment
    'withdrawToken(address,uint256,address)': FunctionFragment
    'maxGasPrice()': FunctionFragment
    'addAlerter(address)': FunctionFragment
    'negligibleRateDiff()': FunctionFragment
    'feeBurnerContract()': FunctionFragment
    'expectedRateContract()': FunctionFragment
    'whiteListContract()': FunctionFragment
    'getUserCapInWei(address)': FunctionFragment
    'transferAdmin(address)': FunctionFragment
    'setEnable(bool)': FunctionFragment
    'claimAdmin()': FunctionFragment
    'isReserve(address)': FunctionFragment
    'getAlerters()': FunctionFragment
    'getExpectedRate(address,address,uint256)': FunctionFragment
    'reserves(uint256)': FunctionFragment
    'addOperator(address)': FunctionFragment
    'addReserve(address,bool)': FunctionFragment
    'removeOperator(address)': FunctionFragment
    'setParams(address,address,address,uint256,uint256)': FunctionFragment
    'findBestRate(address,address,uint256)': FunctionFragment
    'trade(address,uint256,address,address,uint256,uint256,address)': FunctionFragment
    'withdrawEther(uint256,address)': FunctionFragment
    'getNumReserves()': FunctionFragment
    'getBalance(address,address)': FunctionFragment
    'admin()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'removeAlerter',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'listPairForReserve',
    values: [string, string, string, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'perReserveListedPairs',
    values: [string, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getReserves',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'enabled', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'pendingAdmin',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getOperators',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawToken',
    values: [string, BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'maxGasPrice',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'addAlerter', values: [string]): string
  encodeFunctionData(
    functionFragment: 'negligibleRateDiff',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'feeBurnerContract',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'expectedRateContract',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'whiteListContract',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getUserCapInWei',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'transferAdmin',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'setEnable', values: [boolean]): string
  encodeFunctionData(functionFragment: 'claimAdmin', values?: undefined): string
  encodeFunctionData(functionFragment: 'isReserve', values: [string]): string
  encodeFunctionData(
    functionFragment: 'getAlerters',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getExpectedRate',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'reserves',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'addOperator', values: [string]): string
  encodeFunctionData(
    functionFragment: 'addReserve',
    values: [string, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'removeOperator',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'setParams',
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'findBestRate',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'trade',
    values: [
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawEther',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'getNumReserves',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getBalance',
    values: [string, string]
  ): string
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string

  decodeFunctionResult(
    functionFragment: 'removeAlerter',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'listPairForReserve',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'perReserveListedPairs',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getReserves', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'enabled', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'pendingAdmin',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getOperators',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'maxGasPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addAlerter', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'negligibleRateDiff',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'feeBurnerContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'expectedRateContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'whiteListContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getUserCapInWei',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferAdmin',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setEnable', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimAdmin', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isReserve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAlerters', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getExpectedRate',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'reserves', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addOperator', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addReserve', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removeOperator',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setParams', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'findBestRate',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'trade', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'withdrawEther',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getNumReserves',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getBalance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result

  events: {
    'EtherReceival(address,uint256)': EventFragment
    'ExecuteTrade(address,address,address,uint256,uint256)': EventFragment
    'AddReserveToNetwork(address,bool)': EventFragment
    'ListReservePairs(address,address,address,bool)': EventFragment
    'TokenWithdraw(address,uint256,address)': EventFragment
    'EtherWithdraw(uint256,address)': EventFragment
    'TransferAdminPending(address)': EventFragment
    'AdminClaimed(address,address)': EventFragment
    'AlerterAdded(address,bool)': EventFragment
    'OperatorAdded(address,bool)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'EtherReceival'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ExecuteTrade'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AddReserveToNetwork'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ListReservePairs'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TokenWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EtherWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TransferAdminPending'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AdminClaimed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AlerterAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OperatorAdded'): EventFragment
}

export class KyberProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: KyberProxyInterface

  functions: {
    removeAlerter(
      alerter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'removeAlerter(address)'(
      alerter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    listPairForReserve(
      reserve: string,
      src: string,
      dest: string,
      add: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'listPairForReserve(address,address,address,bool)'(
      reserve: string,
      src: string,
      dest: string,
      add: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    perReserveListedPairs(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    'perReserveListedPairs(address,bytes32)'(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    getReserves(overrides?: CallOverrides): Promise<[string[]]>

    'getReserves()'(overrides?: CallOverrides): Promise<[string[]]>

    enabled(overrides?: CallOverrides): Promise<[boolean]>

    'enabled()'(overrides?: CallOverrides): Promise<[boolean]>

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>

    'pendingAdmin()'(overrides?: CallOverrides): Promise<[string]>

    getOperators(overrides?: CallOverrides): Promise<[string[]]>

    'getOperators()'(overrides?: CallOverrides): Promise<[string[]]>

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdrawToken(address,uint256,address)'(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    maxGasPrice(overrides?: CallOverrides): Promise<[BigNumber]>

    'maxGasPrice()'(overrides?: CallOverrides): Promise<[BigNumber]>

    addAlerter(
      newAlerter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'addAlerter(address)'(
      newAlerter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    negligibleRateDiff(overrides?: CallOverrides): Promise<[BigNumber]>

    'negligibleRateDiff()'(overrides?: CallOverrides): Promise<[BigNumber]>

    feeBurnerContract(overrides?: CallOverrides): Promise<[string]>

    'feeBurnerContract()'(overrides?: CallOverrides): Promise<[string]>

    expectedRateContract(overrides?: CallOverrides): Promise<[string]>

    'expectedRateContract()'(overrides?: CallOverrides): Promise<[string]>

    whiteListContract(overrides?: CallOverrides): Promise<[string]>

    'whiteListContract()'(overrides?: CallOverrides): Promise<[string]>

    getUserCapInWei(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getUserCapInWei(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    transferAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferAdmin(address)'(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setEnable(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setEnable(bool)'(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    claimAdmin(overrides?: Overrides): Promise<ContractTransaction>

    'claimAdmin()'(overrides?: Overrides): Promise<ContractTransaction>

    isReserve(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    'isReserve(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    getAlerters(overrides?: CallOverrides): Promise<[string[]]>

    'getAlerters()'(overrides?: CallOverrides): Promise<[string[]]>

    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        expectedRate: BigNumber
        slippageRate: BigNumber
      }
    >

    'getExpectedRate(address,address,uint256)'(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        expectedRate: BigNumber
        slippageRate: BigNumber
      }
    >

    reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    'reserves(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    addOperator(
      newOperator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'addOperator(address)'(
      newOperator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    addReserve(
      reserve: string,
      add: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'addReserve(address,bool)'(
      reserve: string,
      add: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    removeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'removeOperator(address)'(
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setParams(
      _whiteList: string,
      _expectedRate: string,
      _feeBurner: string,
      _maxGasPrice: BigNumberish,
      _negligibleRateDiff: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setParams(address,address,address,uint256,uint256)'(
      _whiteList: string,
      _expectedRate: string,
      _feeBurner: string,
      _maxGasPrice: BigNumberish,
      _negligibleRateDiff: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    findBestRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    'findBestRate(address,address,uint256)'(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    trade(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'trade(address,uint256,address,address,uint256,uint256,address)'(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdrawEther(uint256,address)'(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    getNumReserves(overrides?: CallOverrides): Promise<[BigNumber]>

    'getNumReserves()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getBalance(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getBalance(address,address)'(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    admin(overrides?: CallOverrides): Promise<[string]>

    'admin()'(overrides?: CallOverrides): Promise<[string]>
  }

  removeAlerter(
    alerter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'removeAlerter(address)'(
    alerter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  listPairForReserve(
    reserve: string,
    src: string,
    dest: string,
    add: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'listPairForReserve(address,address,address,bool)'(
    reserve: string,
    src: string,
    dest: string,
    add: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  perReserveListedPairs(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>

  'perReserveListedPairs(address,bytes32)'(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>

  getReserves(overrides?: CallOverrides): Promise<string[]>

  'getReserves()'(overrides?: CallOverrides): Promise<string[]>

  enabled(overrides?: CallOverrides): Promise<boolean>

  'enabled()'(overrides?: CallOverrides): Promise<boolean>

  pendingAdmin(overrides?: CallOverrides): Promise<string>

  'pendingAdmin()'(overrides?: CallOverrides): Promise<string>

  getOperators(overrides?: CallOverrides): Promise<string[]>

  'getOperators()'(overrides?: CallOverrides): Promise<string[]>

  withdrawToken(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdrawToken(address,uint256,address)'(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>

  'maxGasPrice()'(overrides?: CallOverrides): Promise<BigNumber>

  addAlerter(
    newAlerter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'addAlerter(address)'(
    newAlerter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  negligibleRateDiff(overrides?: CallOverrides): Promise<BigNumber>

  'negligibleRateDiff()'(overrides?: CallOverrides): Promise<BigNumber>

  feeBurnerContract(overrides?: CallOverrides): Promise<string>

  'feeBurnerContract()'(overrides?: CallOverrides): Promise<string>

  expectedRateContract(overrides?: CallOverrides): Promise<string>

  'expectedRateContract()'(overrides?: CallOverrides): Promise<string>

  whiteListContract(overrides?: CallOverrides): Promise<string>

  'whiteListContract()'(overrides?: CallOverrides): Promise<string>

  getUserCapInWei(user: string, overrides?: CallOverrides): Promise<BigNumber>

  'getUserCapInWei(address)'(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  transferAdmin(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferAdmin(address)'(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setEnable(
    _enable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setEnable(bool)'(
    _enable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  claimAdmin(overrides?: Overrides): Promise<ContractTransaction>

  'claimAdmin()'(overrides?: Overrides): Promise<ContractTransaction>

  isReserve(arg0: string, overrides?: CallOverrides): Promise<boolean>

  'isReserve(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  getAlerters(overrides?: CallOverrides): Promise<string[]>

  'getAlerters()'(overrides?: CallOverrides): Promise<string[]>

  getExpectedRate(
    src: string,
    dest: string,
    srcQty: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      expectedRate: BigNumber
      slippageRate: BigNumber
    }
  >

  'getExpectedRate(address,address,uint256)'(
    src: string,
    dest: string,
    srcQty: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      expectedRate: BigNumber
      slippageRate: BigNumber
    }
  >

  reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  'reserves(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  addOperator(
    newOperator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'addOperator(address)'(
    newOperator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  addReserve(
    reserve: string,
    add: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'addReserve(address,bool)'(
    reserve: string,
    add: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  removeOperator(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'removeOperator(address)'(
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setParams(
    _whiteList: string,
    _expectedRate: string,
    _feeBurner: string,
    _maxGasPrice: BigNumberish,
    _negligibleRateDiff: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setParams(address,address,address,uint256,uint256)'(
    _whiteList: string,
    _expectedRate: string,
    _feeBurner: string,
    _maxGasPrice: BigNumberish,
    _negligibleRateDiff: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  findBestRate(
    src: string,
    dest: string,
    srcQty: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>

  'findBestRate(address,address,uint256)'(
    src: string,
    dest: string,
    srcQty: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>

  trade(
    src: string,
    srcAmount: BigNumberish,
    dest: string,
    destAddress: string,
    maxDestAmount: BigNumberish,
    minConversionRate: BigNumberish,
    walletId: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'trade(address,uint256,address,address,uint256,uint256,address)'(
    src: string,
    srcAmount: BigNumberish,
    dest: string,
    destAddress: string,
    maxDestAmount: BigNumberish,
    minConversionRate: BigNumberish,
    walletId: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  withdrawEther(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdrawEther(uint256,address)'(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  getNumReserves(overrides?: CallOverrides): Promise<BigNumber>

  'getNumReserves()'(overrides?: CallOverrides): Promise<BigNumber>

  getBalance(
    token: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getBalance(address,address)'(
    token: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  admin(overrides?: CallOverrides): Promise<string>

  'admin()'(overrides?: CallOverrides): Promise<string>

  callStatic: {
    removeAlerter(alerter: string, overrides?: CallOverrides): Promise<void>

    'removeAlerter(address)'(
      alerter: string,
      overrides?: CallOverrides
    ): Promise<void>

    listPairForReserve(
      reserve: string,
      src: string,
      dest: string,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'listPairForReserve(address,address,address,bool)'(
      reserve: string,
      src: string,
      dest: string,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    perReserveListedPairs(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>

    'perReserveListedPairs(address,bytes32)'(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>

    getReserves(overrides?: CallOverrides): Promise<string[]>

    'getReserves()'(overrides?: CallOverrides): Promise<string[]>

    enabled(overrides?: CallOverrides): Promise<boolean>

    'enabled()'(overrides?: CallOverrides): Promise<boolean>

    pendingAdmin(overrides?: CallOverrides): Promise<string>

    'pendingAdmin()'(overrides?: CallOverrides): Promise<string>

    getOperators(overrides?: CallOverrides): Promise<string[]>

    'getOperators()'(overrides?: CallOverrides): Promise<string[]>

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>

    'withdrawToken(address,uint256,address)'(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>

    'maxGasPrice()'(overrides?: CallOverrides): Promise<BigNumber>

    addAlerter(newAlerter: string, overrides?: CallOverrides): Promise<void>

    'addAlerter(address)'(
      newAlerter: string,
      overrides?: CallOverrides
    ): Promise<void>

    negligibleRateDiff(overrides?: CallOverrides): Promise<BigNumber>

    'negligibleRateDiff()'(overrides?: CallOverrides): Promise<BigNumber>

    feeBurnerContract(overrides?: CallOverrides): Promise<string>

    'feeBurnerContract()'(overrides?: CallOverrides): Promise<string>

    expectedRateContract(overrides?: CallOverrides): Promise<string>

    'expectedRateContract()'(overrides?: CallOverrides): Promise<string>

    whiteListContract(overrides?: CallOverrides): Promise<string>

    'whiteListContract()'(overrides?: CallOverrides): Promise<string>

    getUserCapInWei(user: string, overrides?: CallOverrides): Promise<BigNumber>

    'getUserCapInWei(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    transferAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>

    'transferAdmin(address)'(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>

    setEnable(_enable: boolean, overrides?: CallOverrides): Promise<void>

    'setEnable(bool)'(
      _enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    claimAdmin(overrides?: CallOverrides): Promise<void>

    'claimAdmin()'(overrides?: CallOverrides): Promise<void>

    isReserve(arg0: string, overrides?: CallOverrides): Promise<boolean>

    'isReserve(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    getAlerters(overrides?: CallOverrides): Promise<string[]>

    'getAlerters()'(overrides?: CallOverrides): Promise<string[]>

    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        expectedRate: BigNumber
        slippageRate: BigNumber
      }
    >

    'getExpectedRate(address,address,uint256)'(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        expectedRate: BigNumber
        slippageRate: BigNumber
      }
    >

    reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    'reserves(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    addOperator(newOperator: string, overrides?: CallOverrides): Promise<void>

    'addOperator(address)'(
      newOperator: string,
      overrides?: CallOverrides
    ): Promise<void>

    addReserve(
      reserve: string,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'addReserve(address,bool)'(
      reserve: string,
      add: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    removeOperator(operator: string, overrides?: CallOverrides): Promise<void>

    'removeOperator(address)'(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>

    setParams(
      _whiteList: string,
      _expectedRate: string,
      _feeBurner: string,
      _maxGasPrice: BigNumberish,
      _negligibleRateDiff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setParams(address,address,address,uint256,uint256)'(
      _whiteList: string,
      _expectedRate: string,
      _feeBurner: string,
      _maxGasPrice: BigNumberish,
      _negligibleRateDiff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    findBestRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    'findBestRate(address,address,uint256)'(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    trade(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'trade(address,uint256,address,address,uint256,uint256,address)'(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>

    'withdrawEther(uint256,address)'(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>

    getNumReserves(overrides?: CallOverrides): Promise<BigNumber>

    'getNumReserves()'(overrides?: CallOverrides): Promise<BigNumber>

    getBalance(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getBalance(address,address)'(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    admin(overrides?: CallOverrides): Promise<string>

    'admin()'(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    EtherReceival(sender: string | null, amount: null): EventFilter

    ExecuteTrade(
      sender: string | null,
      src: null,
      dest: null,
      actualSrcAmount: null,
      actualDestAmount: null
    ): EventFilter

    AddReserveToNetwork(reserve: null, add: null): EventFilter

    ListReservePairs(
      reserve: null,
      src: null,
      dest: null,
      add: null
    ): EventFilter

    TokenWithdraw(token: null, amount: null, sendTo: null): EventFilter

    EtherWithdraw(amount: null, sendTo: null): EventFilter

    TransferAdminPending(pendingAdmin: null): EventFilter

    AdminClaimed(newAdmin: null, previousAdmin: null): EventFilter

    AlerterAdded(newAlerter: null, isAdd: null): EventFilter

    OperatorAdded(newOperator: null, isAdd: null): EventFilter
  }

  estimateGas: {
    removeAlerter(alerter: string, overrides?: Overrides): Promise<BigNumber>

    'removeAlerter(address)'(
      alerter: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    listPairForReserve(
      reserve: string,
      src: string,
      dest: string,
      add: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'listPairForReserve(address,address,address,bool)'(
      reserve: string,
      src: string,
      dest: string,
      add: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    perReserveListedPairs(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'perReserveListedPairs(address,bytes32)'(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getReserves(overrides?: CallOverrides): Promise<BigNumber>

    'getReserves()'(overrides?: CallOverrides): Promise<BigNumber>

    enabled(overrides?: CallOverrides): Promise<BigNumber>

    'enabled()'(overrides?: CallOverrides): Promise<BigNumber>

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>

    'pendingAdmin()'(overrides?: CallOverrides): Promise<BigNumber>

    getOperators(overrides?: CallOverrides): Promise<BigNumber>

    'getOperators()'(overrides?: CallOverrides): Promise<BigNumber>

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'withdrawToken(address,uint256,address)'(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>

    'maxGasPrice()'(overrides?: CallOverrides): Promise<BigNumber>

    addAlerter(newAlerter: string, overrides?: Overrides): Promise<BigNumber>

    'addAlerter(address)'(
      newAlerter: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    negligibleRateDiff(overrides?: CallOverrides): Promise<BigNumber>

    'negligibleRateDiff()'(overrides?: CallOverrides): Promise<BigNumber>

    feeBurnerContract(overrides?: CallOverrides): Promise<BigNumber>

    'feeBurnerContract()'(overrides?: CallOverrides): Promise<BigNumber>

    expectedRateContract(overrides?: CallOverrides): Promise<BigNumber>

    'expectedRateContract()'(overrides?: CallOverrides): Promise<BigNumber>

    whiteListContract(overrides?: CallOverrides): Promise<BigNumber>

    'whiteListContract()'(overrides?: CallOverrides): Promise<BigNumber>

    getUserCapInWei(user: string, overrides?: CallOverrides): Promise<BigNumber>

    'getUserCapInWei(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    transferAdmin(newAdmin: string, overrides?: Overrides): Promise<BigNumber>

    'transferAdmin(address)'(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setEnable(_enable: boolean, overrides?: Overrides): Promise<BigNumber>

    'setEnable(bool)'(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    claimAdmin(overrides?: Overrides): Promise<BigNumber>

    'claimAdmin()'(overrides?: Overrides): Promise<BigNumber>

    isReserve(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'isReserve(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAlerters(overrides?: CallOverrides): Promise<BigNumber>

    'getAlerters()'(overrides?: CallOverrides): Promise<BigNumber>

    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getExpectedRate(address,address,uint256)'(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    reserves(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'reserves(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    addOperator(newOperator: string, overrides?: Overrides): Promise<BigNumber>

    'addOperator(address)'(
      newOperator: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    addReserve(
      reserve: string,
      add: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'addReserve(address,bool)'(
      reserve: string,
      add: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    removeOperator(operator: string, overrides?: Overrides): Promise<BigNumber>

    'removeOperator(address)'(
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setParams(
      _whiteList: string,
      _expectedRate: string,
      _feeBurner: string,
      _maxGasPrice: BigNumberish,
      _negligibleRateDiff: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setParams(address,address,address,uint256,uint256)'(
      _whiteList: string,
      _expectedRate: string,
      _feeBurner: string,
      _maxGasPrice: BigNumberish,
      _negligibleRateDiff: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    findBestRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'findBestRate(address,address,uint256)'(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    trade(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'trade(address,uint256,address,address,uint256,uint256,address)'(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'withdrawEther(uint256,address)'(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    getNumReserves(overrides?: CallOverrides): Promise<BigNumber>

    'getNumReserves()'(overrides?: CallOverrides): Promise<BigNumber>

    getBalance(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getBalance(address,address)'(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    admin(overrides?: CallOverrides): Promise<BigNumber>

    'admin()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    removeAlerter(
      alerter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'removeAlerter(address)'(
      alerter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    listPairForReserve(
      reserve: string,
      src: string,
      dest: string,
      add: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'listPairForReserve(address,address,address,bool)'(
      reserve: string,
      src: string,
      dest: string,
      add: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    perReserveListedPairs(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'perReserveListedPairs(address,bytes32)'(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getReserves()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    enabled(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'enabled()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'pendingAdmin()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getOperators(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getOperators()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdrawToken(address,uint256,address)'(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    maxGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'maxGasPrice()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    addAlerter(
      newAlerter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'addAlerter(address)'(
      newAlerter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    negligibleRateDiff(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'negligibleRateDiff()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    feeBurnerContract(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'feeBurnerContract()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    expectedRateContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'expectedRateContract()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    whiteListContract(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'whiteListContract()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getUserCapInWei(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getUserCapInWei(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    transferAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferAdmin(address)'(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setEnable(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setEnable(bool)'(
      _enable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    claimAdmin(overrides?: Overrides): Promise<PopulatedTransaction>

    'claimAdmin()'(overrides?: Overrides): Promise<PopulatedTransaction>

    isReserve(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'isReserve(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAlerters(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getAlerters()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getExpectedRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getExpectedRate(address,address,uint256)'(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    reserves(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'reserves(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    addOperator(
      newOperator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'addOperator(address)'(
      newOperator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    addReserve(
      reserve: string,
      add: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'addReserve(address,bool)'(
      reserve: string,
      add: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    removeOperator(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'removeOperator(address)'(
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setParams(
      _whiteList: string,
      _expectedRate: string,
      _feeBurner: string,
      _maxGasPrice: BigNumberish,
      _negligibleRateDiff: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setParams(address,address,address,uint256,uint256)'(
      _whiteList: string,
      _expectedRate: string,
      _feeBurner: string,
      _maxGasPrice: BigNumberish,
      _negligibleRateDiff: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    findBestRate(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'findBestRate(address,address,uint256)'(
      src: string,
      dest: string,
      srcQty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    trade(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'trade(address,uint256,address,address,uint256,uint256,address)'(
      src: string,
      srcAmount: BigNumberish,
      dest: string,
      destAddress: string,
      maxDestAmount: BigNumberish,
      minConversionRate: BigNumberish,
      walletId: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdrawEther(uint256,address)'(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    getNumReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getNumReserves()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getBalance(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getBalance(address,address)'(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'admin()'(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
