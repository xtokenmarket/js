/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface XSNXAdminInterface extends ethers.utils.Interface {
  functions: {
    'approveSetTransferProxy(address)': FunctionFragment
    'approveUsdc()': FunctionFragment
    'callFunction(address,tuple,bytes)': FunctionFragment
    'claim(uint256,uint256[],uint256[],bool)': FunctionFragment
    'hedge(uint256,uint256[],uint256[],uint256)': FunctionFragment
    'initialize(address,address,address,address,address,address,address,address)': FunctionFragment
    'isOwner()': FunctionFragment
    'lastClaimedTimestamp()': FunctionFragment
    'liquidationUnwind(uint256,uint256[],uint256[],uint256)': FunctionFragment
    'owner()': FunctionFragment
    'rebalanceSetToEth(uint256)': FunctionFragment
    'rebalanceTowardsHedge(uint256,uint256[],uint256[],uint256)': FunctionFragment
    'rebalanceTowardsSnx(uint256)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'repayDebt(uint256,uint256)': FunctionFragment
    'repayDebtWithEth(uint256,uint256)': FunctionFragment
    'sendEthOnRedemption(uint256)': FunctionFragment
    'setManagerAddress(address)': FunctionFragment
    'setNewXsnxTokenAddress(address)': FunctionFragment
    'swapEthForSnx(uint256,uint256)': FunctionFragment
    'swapSnxForEth(uint256,uint256,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unwindStakedPosition(uint256,uint256[],uint256[],uint256)': FunctionFragment
    'vest(uint256[])': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'approveSetTransferProxy',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'approveUsdc',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'callFunction',
    values: [string, { owner: string; number: BigNumberish }, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'claim',
    values: [BigNumberish, BigNumberish[], BigNumberish[], boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'hedge',
    values: [BigNumberish, BigNumberish[], BigNumberish[], BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, string, string, string, string, string]
  ): string
  encodeFunctionData(functionFragment: 'isOwner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'lastClaimedTimestamp',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'liquidationUnwind',
    values: [BigNumberish, BigNumberish[], BigNumberish[], BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'rebalanceSetToEth',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'rebalanceTowardsHedge',
    values: [BigNumberish, BigNumberish[], BigNumberish[], BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'rebalanceTowardsSnx',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'repayDebt',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'repayDebtWithEth',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'sendEthOnRedemption',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setManagerAddress',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'setNewXsnxTokenAddress',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'swapEthForSnx',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'swapSnxForEth',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'unwindStakedPosition',
    values: [BigNumberish, BigNumberish[], BigNumberish[], BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'vest', values: [BigNumberish[]]): string

  decodeFunctionResult(
    functionFragment: 'approveSetTransferProxy',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'approveUsdc', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'callFunction',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hedge', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lastClaimedTimestamp',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'liquidationUnwind',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'rebalanceSetToEth',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'rebalanceTowardsHedge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'rebalanceTowardsSnx',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'repayDebt', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'repayDebtWithEth',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'sendEthOnRedemption',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setManagerAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setNewXsnxTokenAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapEthForSnx',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapSnxForEth',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'unwindStakedPosition',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'vest', data: BytesLike): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
    'RebalanceToHedge(uint256,uint256)': EventFragment
    'RebalanceToSnx(uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RebalanceToHedge'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RebalanceToSnx'): EventFragment
}

export class XSNXAdmin extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: XSNXAdminInterface

  functions: {
    approveSetTransferProxy(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approveSetTransferProxy(address)'(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    approveUsdc(overrides?: Overrides): Promise<ContractTransaction>

    'approveUsdc()'(overrides?: Overrides): Promise<ContractTransaction>

    callFunction(
      sender: string,
      accountInfo: { owner: string; number: BigNumberish },
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'callFunction(address,tuple,bytes)'(
      sender: string,
      accountInfo: { owner: string; number: BigNumberish },
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    claim(
      susdToBurnToFixCollat: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      feesClaimable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'claim(uint256,uint256[],uint256[],bool)'(
      susdToBurnToFixCollat: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      feesClaimable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    hedge(
      mintAmount: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      ethAllocation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'hedge(uint256,uint256[],uint256[],uint256)'(
      mintAmount: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      ethAllocation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(address,address,address,address,address,address,address,address)'(
      _tradeAccountingAddress: string,
      _setAddress: string,
      _snxAddress: string,
      _susdAddress: string,
      _setTransferProxy: string,
      _addressResolver: string,
      _rebalancingModule: string,
      _ownerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(address)'(
      sender: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    isOwner(overrides?: CallOverrides): Promise<[boolean]>

    'isOwner()'(overrides?: CallOverrides): Promise<[boolean]>

    lastClaimedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>

    'lastClaimedTimestamp()'(overrides?: CallOverrides): Promise<[BigNumber]>

    liquidationUnwind(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'liquidationUnwind(uint256,uint256[],uint256[],uint256)'(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    rebalanceSetToEth(
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'rebalanceSetToEth(uint256)'(
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    rebalanceTowardsHedge(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'rebalanceTowardsHedge(uint256,uint256[],uint256[],uint256)'(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    rebalanceTowardsSnx(
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'rebalanceTowardsSnx(uint256)'(
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    repayDebt(
      loanAmount: BigNumberish,
      snxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'repayDebt(uint256,uint256)'(
      loanAmount: BigNumberish,
      snxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    repayDebtWithEth(
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'repayDebtWithEth(uint256,uint256)'(
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    sendEthOnRedemption(
      valueToSend: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'sendEthOnRedemption(uint256)'(
      valueToSend: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setManagerAddress(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setManagerAddress(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setNewXsnxTokenAddress(
      _newXsnxTokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setNewXsnxTokenAddress(address)'(
      _newXsnxTokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    swapEthForSnx(
      ethAmount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'swapEthForSnx(uint256,uint256)'(
      ethAmount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    swapSnxForEth(
      snxAmount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'swapSnxForEth(uint256,uint256,uint256)'(
      snxAmount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    unwindStakedPosition(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'unwindStakedPosition(uint256,uint256[],uint256[],uint256)'(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    vest(
      entryIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'vest(uint256[])'(
      entryIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  approveSetTransferProxy(
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approveSetTransferProxy(address)'(
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  approveUsdc(overrides?: Overrides): Promise<ContractTransaction>

  'approveUsdc()'(overrides?: Overrides): Promise<ContractTransaction>

  callFunction(
    sender: string,
    accountInfo: { owner: string; number: BigNumberish },
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'callFunction(address,tuple,bytes)'(
    sender: string,
    accountInfo: { owner: string; number: BigNumberish },
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  claim(
    susdToBurnToFixCollat: BigNumberish,
    minKyberRates: BigNumberish[],
    minCurveReturns: BigNumberish[],
    feesClaimable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'claim(uint256,uint256[],uint256[],bool)'(
    susdToBurnToFixCollat: BigNumberish,
    minKyberRates: BigNumberish[],
    minCurveReturns: BigNumberish[],
    feesClaimable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  hedge(
    mintAmount: BigNumberish,
    minKyberRates: BigNumberish[],
    minCurveReturns: BigNumberish[],
    ethAllocation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'hedge(uint256,uint256[],uint256[],uint256)'(
    mintAmount: BigNumberish,
    minKyberRates: BigNumberish[],
    minCurveReturns: BigNumberish[],
    ethAllocation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(address,address,address,address,address,address,address,address)'(
    _tradeAccountingAddress: string,
    _setAddress: string,
    _snxAddress: string,
    _susdAddress: string,
    _setTransferProxy: string,
    _addressResolver: string,
    _rebalancingModule: string,
    _ownerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(address)'(
    sender: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  isOwner(overrides?: CallOverrides): Promise<boolean>

  'isOwner()'(overrides?: CallOverrides): Promise<boolean>

  lastClaimedTimestamp(overrides?: CallOverrides): Promise<BigNumber>

  'lastClaimedTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

  liquidationUnwind(
    totalSusdToBurn: BigNumberish,
    minKyberRates: BigNumberish[],
    minCurveReturns: BigNumberish[],
    snxToSell: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'liquidationUnwind(uint256,uint256[],uint256[],uint256)'(
    totalSusdToBurn: BigNumberish,
    minKyberRates: BigNumberish[],
    minCurveReturns: BigNumberish[],
    snxToSell: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  rebalanceSetToEth(
    minRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'rebalanceSetToEth(uint256)'(
    minRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  rebalanceTowardsHedge(
    totalSusdToBurn: BigNumberish,
    minKyberRates: BigNumberish[],
    minCurveReturns: BigNumberish[],
    snxToSell: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'rebalanceTowardsHedge(uint256,uint256[],uint256[],uint256)'(
    totalSusdToBurn: BigNumberish,
    minKyberRates: BigNumberish[],
    minCurveReturns: BigNumberish[],
    snxToSell: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  rebalanceTowardsSnx(
    minRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'rebalanceTowardsSnx(uint256)'(
    minRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  repayDebt(
    loanAmount: BigNumberish,
    snxAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'repayDebt(uint256,uint256)'(
    loanAmount: BigNumberish,
    snxAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  repayDebtWithEth(
    amount: BigNumberish,
    minKyberRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'repayDebtWithEth(uint256,uint256)'(
    amount: BigNumberish,
    minKyberRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  sendEthOnRedemption(
    valueToSend: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'sendEthOnRedemption(uint256)'(
    valueToSend: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setManagerAddress(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setManagerAddress(address)'(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setNewXsnxTokenAddress(
    _newXsnxTokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setNewXsnxTokenAddress(address)'(
    _newXsnxTokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  swapEthForSnx(
    ethAmount: BigNumberish,
    minKyberRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'swapEthForSnx(uint256,uint256)'(
    ethAmount: BigNumberish,
    minKyberRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  swapSnxForEth(
    snxAmount: BigNumberish,
    minKyberRate: BigNumberish,
    minCurveReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'swapSnxForEth(uint256,uint256,uint256)'(
    snxAmount: BigNumberish,
    minKyberRate: BigNumberish,
    minCurveReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  unwindStakedPosition(
    totalSusdToBurn: BigNumberish,
    minKyberRates: BigNumberish[],
    minCurveReturns: BigNumberish[],
    snxToSell: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'unwindStakedPosition(uint256,uint256[],uint256[],uint256)'(
    totalSusdToBurn: BigNumberish,
    minKyberRates: BigNumberish[],
    minCurveReturns: BigNumberish[],
    snxToSell: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  vest(
    entryIDs: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'vest(uint256[])'(
    entryIDs: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    approveSetTransferProxy(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'approveSetTransferProxy(address)'(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    approveUsdc(overrides?: CallOverrides): Promise<void>

    'approveUsdc()'(overrides?: CallOverrides): Promise<void>

    callFunction(
      sender: string,
      accountInfo: { owner: string; number: BigNumberish },
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'callFunction(address,tuple,bytes)'(
      sender: string,
      accountInfo: { owner: string; number: BigNumberish },
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    claim(
      susdToBurnToFixCollat: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      feesClaimable: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'claim(uint256,uint256[],uint256[],bool)'(
      susdToBurnToFixCollat: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      feesClaimable: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    hedge(
      mintAmount: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      ethAllocation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'hedge(uint256,uint256[],uint256[],uint256)'(
      mintAmount: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      ethAllocation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(address,address,address,address,address,address,address,address)'(
      _tradeAccountingAddress: string,
      _setAddress: string,
      _snxAddress: string,
      _susdAddress: string,
      _setTransferProxy: string,
      _addressResolver: string,
      _rebalancingModule: string,
      _ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(address)'(
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>

    isOwner(overrides?: CallOverrides): Promise<boolean>

    'isOwner()'(overrides?: CallOverrides): Promise<boolean>

    lastClaimedTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'lastClaimedTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    liquidationUnwind(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'liquidationUnwind(uint256,uint256[],uint256[],uint256)'(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    rebalanceSetToEth(
      minRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'rebalanceSetToEth(uint256)'(
      minRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    rebalanceTowardsHedge(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'rebalanceTowardsHedge(uint256,uint256[],uint256[],uint256)'(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    rebalanceTowardsSnx(
      minRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'rebalanceTowardsSnx(uint256)'(
      minRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    repayDebt(
      loanAmount: BigNumberish,
      snxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'repayDebt(uint256,uint256)'(
      loanAmount: BigNumberish,
      snxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    repayDebtWithEth(
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'repayDebtWithEth(uint256,uint256)'(
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    sendEthOnRedemption(
      valueToSend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'sendEthOnRedemption(uint256)'(
      valueToSend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setManagerAddress(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setManagerAddress(address)'(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<void>

    setNewXsnxTokenAddress(
      _newXsnxTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setNewXsnxTokenAddress(address)'(
      _newXsnxTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    swapEthForSnx(
      ethAmount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'swapEthForSnx(uint256,uint256)'(
      ethAmount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    swapSnxForEth(
      snxAmount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'swapSnxForEth(uint256,uint256,uint256)'(
      snxAmount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    unwindStakedPosition(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'unwindStakedPosition(uint256,uint256[],uint256[],uint256)'(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    vest(entryIDs: BigNumberish[], overrides?: CallOverrides): Promise<void>

    'vest(uint256[])'(
      entryIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter

    RebalanceToHedge(timestamp: null, snxSold: null): EventFilter

    RebalanceToSnx(timestamp: null, setSold: null): EventFilter
  }

  estimateGas: {
    approveSetTransferProxy(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approveSetTransferProxy(address)'(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    approveUsdc(overrides?: Overrides): Promise<BigNumber>

    'approveUsdc()'(overrides?: Overrides): Promise<BigNumber>

    callFunction(
      sender: string,
      accountInfo: { owner: string; number: BigNumberish },
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'callFunction(address,tuple,bytes)'(
      sender: string,
      accountInfo: { owner: string; number: BigNumberish },
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    claim(
      susdToBurnToFixCollat: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      feesClaimable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'claim(uint256,uint256[],uint256[],bool)'(
      susdToBurnToFixCollat: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      feesClaimable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    hedge(
      mintAmount: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      ethAllocation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'hedge(uint256,uint256[],uint256[],uint256)'(
      mintAmount: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      ethAllocation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(address,address,address,address,address,address,address,address)'(
      _tradeAccountingAddress: string,
      _setAddress: string,
      _snxAddress: string,
      _susdAddress: string,
      _setTransferProxy: string,
      _addressResolver: string,
      _rebalancingModule: string,
      _ownerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(address)'(
      sender: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    isOwner(overrides?: CallOverrides): Promise<BigNumber>

    'isOwner()'(overrides?: CallOverrides): Promise<BigNumber>

    lastClaimedTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'lastClaimedTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    liquidationUnwind(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'liquidationUnwind(uint256,uint256[],uint256[],uint256)'(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    rebalanceSetToEth(
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'rebalanceSetToEth(uint256)'(
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    rebalanceTowardsHedge(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'rebalanceTowardsHedge(uint256,uint256[],uint256[],uint256)'(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    rebalanceTowardsSnx(
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'rebalanceTowardsSnx(uint256)'(
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    repayDebt(
      loanAmount: BigNumberish,
      snxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'repayDebt(uint256,uint256)'(
      loanAmount: BigNumberish,
      snxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    repayDebtWithEth(
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'repayDebtWithEth(uint256,uint256)'(
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    sendEthOnRedemption(
      valueToSend: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'sendEthOnRedemption(uint256)'(
      valueToSend: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setManagerAddress(
      _manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setManagerAddress(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setNewXsnxTokenAddress(
      _newXsnxTokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setNewXsnxTokenAddress(address)'(
      _newXsnxTokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    swapEthForSnx(
      ethAmount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'swapEthForSnx(uint256,uint256)'(
      ethAmount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    swapSnxForEth(
      snxAmount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'swapSnxForEth(uint256,uint256,uint256)'(
      snxAmount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    unwindStakedPosition(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'unwindStakedPosition(uint256,uint256[],uint256[],uint256)'(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    vest(entryIDs: BigNumberish[], overrides?: Overrides): Promise<BigNumber>

    'vest(uint256[])'(
      entryIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    approveSetTransferProxy(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approveSetTransferProxy(address)'(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    approveUsdc(overrides?: Overrides): Promise<PopulatedTransaction>

    'approveUsdc()'(overrides?: Overrides): Promise<PopulatedTransaction>

    callFunction(
      sender: string,
      accountInfo: { owner: string; number: BigNumberish },
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'callFunction(address,tuple,bytes)'(
      sender: string,
      accountInfo: { owner: string; number: BigNumberish },
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    claim(
      susdToBurnToFixCollat: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      feesClaimable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'claim(uint256,uint256[],uint256[],bool)'(
      susdToBurnToFixCollat: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      feesClaimable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    hedge(
      mintAmount: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      ethAllocation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'hedge(uint256,uint256[],uint256[],uint256)'(
      mintAmount: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      ethAllocation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(address,address,address,address,address,address,address,address)'(
      _tradeAccountingAddress: string,
      _setAddress: string,
      _snxAddress: string,
      _susdAddress: string,
      _setTransferProxy: string,
      _addressResolver: string,
      _rebalancingModule: string,
      _ownerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(address)'(
      sender: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isOwner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    lastClaimedTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'lastClaimedTimestamp()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    liquidationUnwind(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'liquidationUnwind(uint256,uint256[],uint256[],uint256)'(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rebalanceSetToEth(
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'rebalanceSetToEth(uint256)'(
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    rebalanceTowardsHedge(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'rebalanceTowardsHedge(uint256,uint256[],uint256[],uint256)'(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    rebalanceTowardsSnx(
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'rebalanceTowardsSnx(uint256)'(
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    repayDebt(
      loanAmount: BigNumberish,
      snxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'repayDebt(uint256,uint256)'(
      loanAmount: BigNumberish,
      snxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    repayDebtWithEth(
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'repayDebtWithEth(uint256,uint256)'(
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    sendEthOnRedemption(
      valueToSend: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'sendEthOnRedemption(uint256)'(
      valueToSend: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setManagerAddress(
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setManagerAddress(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setNewXsnxTokenAddress(
      _newXsnxTokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setNewXsnxTokenAddress(address)'(
      _newXsnxTokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    swapEthForSnx(
      ethAmount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'swapEthForSnx(uint256,uint256)'(
      ethAmount: BigNumberish,
      minKyberRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    swapSnxForEth(
      snxAmount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'swapSnxForEth(uint256,uint256,uint256)'(
      snxAmount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    unwindStakedPosition(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'unwindStakedPosition(uint256,uint256[],uint256[],uint256)'(
      totalSusdToBurn: BigNumberish,
      minKyberRates: BigNumberish[],
      minCurveReturns: BigNumberish[],
      snxToSell: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    vest(
      entryIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'vest(uint256[])'(
      entryIDs: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
