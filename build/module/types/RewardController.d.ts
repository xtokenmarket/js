/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface RewardControllerInterface extends ethers.utils.Interface {
  functions: {
    'initRewardDurationAndAmount(uint256,uint256)': FunctionFragment
    'initialize(address)': FunctionFragment
    'lastTimeRewardApplicable()': FunctionFragment
    'lastUpdateTime()': FunctionFragment
    'managementStakingModule()': FunctionFragment
    'owner()': FunctionFragment
    'periodFinish()': FunctionFragment
    'releaseReward()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'rewardRate()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'xtk()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'initRewardDurationAndAmount',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string
  encodeFunctionData(
    functionFragment: 'lastTimeRewardApplicable',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'lastUpdateTime',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'managementStakingModule',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'periodFinish',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'releaseReward',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'rewardRate', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'xtk', values?: undefined): string

  decodeFunctionResult(
    functionFragment: 'initRewardDurationAndAmount',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lastTimeRewardApplicable',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'lastUpdateTime',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'managementStakingModule',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'periodFinish',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'releaseReward',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'rewardRate', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'xtk', data: BytesLike): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
    'RewardReleased(uint256,uint256)': EventFragment
    'RewardScheduled(uint256,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RewardReleased'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RewardScheduled'): EventFragment
}

export class RewardController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: RewardControllerInterface

  functions: {
    initRewardDurationAndAmount(
      _rewardDuration: BigNumberish,
      _rewardPeriodAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initRewardDurationAndAmount(uint256,uint256)'(
      _rewardDuration: BigNumberish,
      _rewardPeriodAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    initialize(
      _managementStakingModule: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(address)'(
      _managementStakingModule: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<[BigNumber]>

    'lastTimeRewardApplicable()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>

    'lastUpdateTime()'(overrides?: CallOverrides): Promise<[BigNumber]>

    managementStakingModule(overrides?: CallOverrides): Promise<[string]>

    'managementStakingModule()'(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    periodFinish(overrides?: CallOverrides): Promise<[BigNumber]>

    'periodFinish()'(overrides?: CallOverrides): Promise<[BigNumber]>

    releaseReward(overrides?: Overrides): Promise<ContractTransaction>

    'releaseReward()'(overrides?: Overrides): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>

    'rewardRate()'(overrides?: CallOverrides): Promise<[BigNumber]>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    xtk(overrides?: CallOverrides): Promise<[string]>

    'xtk()'(overrides?: CallOverrides): Promise<[string]>
  }

  initRewardDurationAndAmount(
    _rewardDuration: BigNumberish,
    _rewardPeriodAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initRewardDurationAndAmount(uint256,uint256)'(
    _rewardDuration: BigNumberish,
    _rewardPeriodAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  initialize(
    _managementStakingModule: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(address)'(
    _managementStakingModule: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>

  'lastTimeRewardApplicable()'(overrides?: CallOverrides): Promise<BigNumber>

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>

  'lastUpdateTime()'(overrides?: CallOverrides): Promise<BigNumber>

  managementStakingModule(overrides?: CallOverrides): Promise<string>

  'managementStakingModule()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  periodFinish(overrides?: CallOverrides): Promise<BigNumber>

  'periodFinish()'(overrides?: CallOverrides): Promise<BigNumber>

  releaseReward(overrides?: Overrides): Promise<ContractTransaction>

  'releaseReward()'(overrides?: Overrides): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>

  'rewardRate()'(overrides?: CallOverrides): Promise<BigNumber>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  xtk(overrides?: CallOverrides): Promise<string>

  'xtk()'(overrides?: CallOverrides): Promise<string>

  callStatic: {
    initRewardDurationAndAmount(
      _rewardDuration: BigNumberish,
      _rewardPeriodAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'initRewardDurationAndAmount(uint256,uint256)'(
      _rewardDuration: BigNumberish,
      _rewardPeriodAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    initialize(
      _managementStakingModule: string,
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(address)'(
      _managementStakingModule: string,
      overrides?: CallOverrides
    ): Promise<void>

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>

    'lastTimeRewardApplicable()'(overrides?: CallOverrides): Promise<BigNumber>

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>

    'lastUpdateTime()'(overrides?: CallOverrides): Promise<BigNumber>

    managementStakingModule(overrides?: CallOverrides): Promise<string>

    'managementStakingModule()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>

    'periodFinish()'(overrides?: CallOverrides): Promise<BigNumber>

    releaseReward(overrides?: CallOverrides): Promise<void>

    'releaseReward()'(overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>

    'rewardRate()'(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    xtk(overrides?: CallOverrides): Promise<string>

    'xtk()'(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter

    RewardReleased(
      timestamp: BigNumberish | null,
      amountReleased: null
    ): EventFilter

    RewardScheduled(
      timestamp: BigNumberish | null,
      rewardDuration: null,
      rewardAmount: null
    ): EventFilter
  }

  estimateGas: {
    initRewardDurationAndAmount(
      _rewardDuration: BigNumberish,
      _rewardPeriodAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initRewardDurationAndAmount(uint256,uint256)'(
      _rewardDuration: BigNumberish,
      _rewardPeriodAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    initialize(
      _managementStakingModule: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(address)'(
      _managementStakingModule: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>

    'lastTimeRewardApplicable()'(overrides?: CallOverrides): Promise<BigNumber>

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>

    'lastUpdateTime()'(overrides?: CallOverrides): Promise<BigNumber>

    managementStakingModule(overrides?: CallOverrides): Promise<BigNumber>

    'managementStakingModule()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>

    'periodFinish()'(overrides?: CallOverrides): Promise<BigNumber>

    releaseReward(overrides?: Overrides): Promise<BigNumber>

    'releaseReward()'(overrides?: Overrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>

    'rewardRate()'(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    xtk(overrides?: CallOverrides): Promise<BigNumber>

    'xtk()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    initRewardDurationAndAmount(
      _rewardDuration: BigNumberish,
      _rewardPeriodAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initRewardDurationAndAmount(uint256,uint256)'(
      _rewardDuration: BigNumberish,
      _rewardPeriodAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    initialize(
      _managementStakingModule: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(address)'(
      _managementStakingModule: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    lastTimeRewardApplicable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'lastTimeRewardApplicable()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'lastUpdateTime()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    managementStakingModule(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'managementStakingModule()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'periodFinish()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    releaseReward(overrides?: Overrides): Promise<PopulatedTransaction>

    'releaseReward()'(overrides?: Overrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'rewardRate()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    xtk(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'xtk()'(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
