/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface TradeAccountingInterface extends ethers.utils.Interface {
  functions: {
    'approveCurve(address)': FunctionFragment
    'approveKyber(address)': FunctionFragment
    'calculateAssetChangesForRebalanceToSnx()': FunctionFragment
    'calculateIssueTokenPrice(uint256,uint256,uint256,uint256)': FunctionFragment
    'calculateRedeemTokenPrice(uint256,uint256,uint256)': FunctionFragment
    'calculateRedemptionValue(uint256,uint256)': FunctionFragment
    'calculateSetIssuanceQuantity()': FunctionFragment
    'calculateSetQuantity(uint256)': FunctionFragment
    'calculateSetRedemptionQuantity(uint256)': FunctionFragment
    'calculateSetToSellForRebalanceSetToEth()': FunctionFragment
    'calculateSusdToBurnForRedemption(uint256,uint256,uint256,uint256)': FunctionFragment
    'calculateSusdToBurnToEclipseEscrowed(uint256)': FunctionFragment
    'calculateSusdToBurnToFixRatioExternal()': FunctionFragment
    'calculateTokensToMintWithEth(uint256,uint256,uint256,uint256,bool)': FunctionFragment
    'calculateTokensToMintWithSnx(uint256,uint256,uint256)': FunctionFragment
    'confirmCurveAddress(address)': FunctionFragment
    'getActiveSetAssetBalance()': FunctionFragment
    'getAssetCurrentlyActiveInSet()': FunctionFragment
    'getEthAllocationOnHedge(uint256)': FunctionFragment
    'getEthBalance()': FunctionFragment
    'getMintWithEthUtils(uint256)': FunctionFragment
    'getRebalanceTowardsHedgeUtils()': FunctionFragment
    'getRebalanceTowardsSnxUtils()': FunctionFragment
    'getRebalanceUtils()': FunctionFragment
    'getSetHoldingsValueInWei()': FunctionFragment
    'getSnxBalance()': FunctionFragment
    'getSusdBalance()': FunctionFragment
    'initialize(address,address,address,address,address,address,bytes32[2],address[2],address)': FunctionFragment
    'isOwner()': FunctionFragment
    'isRebalanceTowardsHedgeRequired()': FunctionFragment
    'isRebalanceTowardsSnxRequired()': FunctionFragment
    'owner()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setAdminInstanceAddress(address)': FunctionFragment
    'setCurve(address,int128,int128)': FunctionFragment
    'shouldAllocateEthToEthReserve(uint256,uint256,uint256)': FunctionFragment
    'swapTokenToEther(address,uint256,uint256,uint256)': FunctionFragment
    'swapTokenToToken(address,uint256,address,uint256,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'approveCurve', values: [string]): string
  encodeFunctionData(functionFragment: 'approveKyber', values: [string]): string
  encodeFunctionData(
    functionFragment: 'calculateAssetChangesForRebalanceToSnx',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'calculateIssueTokenPrice',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateRedeemTokenPrice',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateRedemptionValue',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateSetIssuanceQuantity',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'calculateSetQuantity',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateSetRedemptionQuantity',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateSetToSellForRebalanceSetToEth',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'calculateSusdToBurnForRedemption',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateSusdToBurnToEclipseEscrowed',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateSusdToBurnToFixRatioExternal',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'calculateTokensToMintWithEth',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateTokensToMintWithSnx',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'confirmCurveAddress',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'getActiveSetAssetBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getAssetCurrentlyActiveInSet',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getEthAllocationOnHedge',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getEthBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getMintWithEthUtils',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getRebalanceTowardsHedgeUtils',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getRebalanceTowardsSnxUtils',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getRebalanceUtils',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getSetHoldingsValueInWei',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getSnxBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getSusdBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      [BytesLike, BytesLike],
      [string, string],
      string
    ]
  ): string
  encodeFunctionData(functionFragment: 'isOwner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'isRebalanceTowardsHedgeRequired',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'isRebalanceTowardsSnxRequired',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setAdminInstanceAddress',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'setCurve',
    values: [string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'shouldAllocateEthToEthReserve',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'swapTokenToEther',
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'swapTokenToToken',
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string

  decodeFunctionResult(
    functionFragment: 'approveCurve',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'approveKyber',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateAssetChangesForRebalanceToSnx',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateIssueTokenPrice',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateRedeemTokenPrice',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateRedemptionValue',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateSetIssuanceQuantity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateSetQuantity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateSetRedemptionQuantity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateSetToSellForRebalanceSetToEth',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateSusdToBurnForRedemption',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateSusdToBurnToEclipseEscrowed',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateSusdToBurnToFixRatioExternal',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateTokensToMintWithEth',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateTokensToMintWithSnx',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'confirmCurveAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getActiveSetAssetBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAssetCurrentlyActiveInSet',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getEthAllocationOnHedge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getEthBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getMintWithEthUtils',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRebalanceTowardsHedgeUtils',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRebalanceTowardsSnxUtils',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRebalanceUtils',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSetHoldingsValueInWei',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSnxBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSusdBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isRebalanceTowardsHedgeRequired',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'isRebalanceTowardsSnxRequired',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setAdminInstanceAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setCurve', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'shouldAllocateEthToEthReserve',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapTokenToEther',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapTokenToToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export class TradeAccounting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: TradeAccountingInterface

  functions: {
    approveCurve(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approveCurve(address)'(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    approveKyber(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approveKyber(address)'(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    calculateAssetChangesForRebalanceToSnx(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { setToSell: BigNumber }>

    'calculateAssetChangesForRebalanceToSnx()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { setToSell: BigNumber }>

    calculateIssueTokenPrice(
      weiPerOneSnx: BigNumberish,
      snxBalanceBefore: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pricePerToken: BigNumber }>

    'calculateIssueTokenPrice(uint256,uint256,uint256,uint256)'(
      weiPerOneSnx: BigNumberish,
      snxBalanceBefore: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pricePerToken: BigNumber }>

    calculateRedeemTokenPrice(
      totalSupply: BigNumberish,
      snxBalanceOwned: BigNumberish,
      contractDebtValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pricePerToken: BigNumber }>

    'calculateRedeemTokenPrice(uint256,uint256,uint256)'(
      totalSupply: BigNumberish,
      snxBalanceOwned: BigNumberish,
      contractDebtValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pricePerToken: BigNumber }>

    calculateRedemptionValue(
      totalSupply: BigNumberish,
      tokensToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { valueToRedeem: BigNumber }>

    'calculateRedemptionValue(uint256,uint256)'(
      totalSupply: BigNumberish,
      tokensToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { valueToRedeem: BigNumber }>

    calculateSetIssuanceQuantity(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rebalancingSetIssuable: BigNumber }>

    'calculateSetIssuanceQuantity()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rebalancingSetIssuable: BigNumber }>

    calculateSetQuantity(
      componentQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rebalancingSetQuantity: BigNumber }>

    'calculateSetQuantity(uint256)'(
      componentQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rebalancingSetQuantity: BigNumber }>

    calculateSetRedemptionQuantity(
      totalSusdToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rebalancingSetRedeemable: BigNumber }>

    'calculateSetRedemptionQuantity(uint256)'(
      totalSusdToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rebalancingSetRedeemable: BigNumber }>

    calculateSetToSellForRebalanceSetToEth(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { setQuantityToSell: BigNumber }>

    'calculateSetToSellForRebalanceSetToEth()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { setQuantityToSell: BigNumber }>

    calculateSusdToBurnForRedemption(
      tokensToRedeem: BigNumberish,
      totalSupply: BigNumberish,
      contractDebtValue: BigNumberish,
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { susdToBurn: BigNumber }>

    'calculateSusdToBurnForRedemption(uint256,uint256,uint256,uint256)'(
      tokensToRedeem: BigNumberish,
      totalSupply: BigNumberish,
      contractDebtValue: BigNumberish,
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { susdToBurn: BigNumber }>

    calculateSusdToBurnToEclipseEscrowed(
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'calculateSusdToBurnToEclipseEscrowed(uint256)'(
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    calculateSusdToBurnToFixRatioExternal(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'calculateSusdToBurnToFixRatioExternal()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    calculateTokensToMintWithEth(
      snxBalanceBefore: BigNumberish,
      ethContributed: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      allocateToEth: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'calculateTokensToMintWithEth(uint256,uint256,uint256,uint256,bool)'(
      snxBalanceBefore: BigNumberish,
      ethContributed: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      allocateToEth: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    calculateTokensToMintWithSnx(
      snxBalanceBefore: BigNumberish,
      snxAddedToBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'calculateTokensToMintWithSnx(uint256,uint256,uint256)'(
      snxBalanceBefore: BigNumberish,
      snxAddedToBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    confirmCurveAddress(
      _nextCurveAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'confirmCurveAddress(address)'(
      _nextCurveAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    getActiveSetAssetBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    'getActiveSetAssetBalance()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getAssetCurrentlyActiveInSet(overrides?: CallOverrides): Promise<[string]>

    'getAssetCurrentlyActiveInSet()'(
      overrides?: CallOverrides
    ): Promise<[string]>

    getEthAllocationOnHedge(
      susdBal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ethAllocation: BigNumber }>

    'getEthAllocationOnHedge(uint256)'(
      susdBal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ethAllocation: BigNumber }>

    getEthBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    'getEthBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getMintWithEthUtils(
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        allocateToEth: boolean
        nonSnxAssetValue: BigNumber
      }
    >

    'getMintWithEthUtils(uint256)'(
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        allocateToEth: boolean
        nonSnxAssetValue: BigNumber
      }
    >

    getRebalanceTowardsHedgeUtils(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>

    'getRebalanceTowardsHedgeUtils()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>

    getRebalanceTowardsSnxUtils(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { setToSell: BigNumber; activeAsset: string }
    >

    'getRebalanceTowardsSnxUtils()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { setToSell: BigNumber; activeAsset: string }
    >

    getRebalanceUtils(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        debtValueInWei: BigNumber
        hedgeAssetsBalance: BigNumber
      }
    >

    'getRebalanceUtils()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        debtValueInWei: BigNumber
        hedgeAssetsBalance: BigNumber
      }
    >

    getSetHoldingsValueInWei(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { setValInWei: BigNumber }>

    'getSetHoldingsValueInWei()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { setValInWei: BigNumber }>

    getSnxBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    'getSnxBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getSusdBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    'getSusdBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>

    'initialize(address,address,address,address,address,address,bytes32[2],address[2],address)'(
      _setAddress: string,
      _kyberProxyAddress: string,
      _addressResolver: string,
      _susdAddress: string,
      _usdcAddress: string,
      _addressValidator: string,
      _synthSymbols: [BytesLike, BytesLike],
      _setComponentAddresses: [string, string],
      _ownerAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(address)'(
      sender: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    isOwner(overrides?: CallOverrides): Promise<[boolean]>

    'isOwner()'(overrides?: CallOverrides): Promise<[boolean]>

    isRebalanceTowardsHedgeRequired(
      overrides?: CallOverrides
    ): Promise<[boolean]>

    'isRebalanceTowardsHedgeRequired()'(
      overrides?: CallOverrides
    ): Promise<[boolean]>

    isRebalanceTowardsSnxRequired(overrides?: CallOverrides): Promise<[boolean]>

    'isRebalanceTowardsSnxRequired()'(
      overrides?: CallOverrides
    ): Promise<[boolean]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    setAdminInstanceAddress(
      _xSNXAdminInstance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setAdminInstanceAddress(address)'(
      _xSNXAdminInstance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setCurve(
      curvePoolAddress: string,
      _usdcIndex: BigNumberish,
      _susdIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setCurve(address,int128,int128)'(
      curvePoolAddress: string,
      _usdcIndex: BigNumberish,
      _susdIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    shouldAllocateEthToEthReserve(
      setHoldingsInWei: BigNumberish,
      ethBalBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allocateToEth: boolean }>

    'shouldAllocateEthToEthReserve(uint256,uint256,uint256)'(
      setHoldingsInWei: BigNumberish,
      ethBalBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allocateToEth: boolean }>

    swapTokenToEther(
      fromToken: string,
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'swapTokenToEther(address,uint256,uint256,uint256)'(
      fromToken: string,
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    swapTokenToToken(
      fromToken: string,
      amount: BigNumberish,
      toToken: string,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'swapTokenToToken(address,uint256,address,uint256,uint256)'(
      fromToken: string,
      amount: BigNumberish,
      toToken: string,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  approveCurve(
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approveCurve(address)'(
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  approveKyber(
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approveKyber(address)'(
    tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  calculateAssetChangesForRebalanceToSnx(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateAssetChangesForRebalanceToSnx()'(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateIssueTokenPrice(
    weiPerOneSnx: BigNumberish,
    snxBalanceBefore: BigNumberish,
    nonSnxAssetValue: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateIssueTokenPrice(uint256,uint256,uint256,uint256)'(
    weiPerOneSnx: BigNumberish,
    snxBalanceBefore: BigNumberish,
    nonSnxAssetValue: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateRedeemTokenPrice(
    totalSupply: BigNumberish,
    snxBalanceOwned: BigNumberish,
    contractDebtValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateRedeemTokenPrice(uint256,uint256,uint256)'(
    totalSupply: BigNumberish,
    snxBalanceOwned: BigNumberish,
    contractDebtValue: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateRedemptionValue(
    totalSupply: BigNumberish,
    tokensToRedeem: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateRedemptionValue(uint256,uint256)'(
    totalSupply: BigNumberish,
    tokensToRedeem: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateSetIssuanceQuantity(overrides?: CallOverrides): Promise<BigNumber>

  'calculateSetIssuanceQuantity()'(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateSetQuantity(
    componentQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateSetQuantity(uint256)'(
    componentQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateSetRedemptionQuantity(
    totalSusdToBurn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateSetRedemptionQuantity(uint256)'(
    totalSusdToBurn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateSetToSellForRebalanceSetToEth(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateSetToSellForRebalanceSetToEth()'(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateSusdToBurnForRedemption(
    tokensToRedeem: BigNumberish,
    totalSupply: BigNumberish,
    contractDebtValue: BigNumberish,
    issuanceRatio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateSusdToBurnForRedemption(uint256,uint256,uint256,uint256)'(
    tokensToRedeem: BigNumberish,
    totalSupply: BigNumberish,
    contractDebtValue: BigNumberish,
    issuanceRatio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateSusdToBurnToEclipseEscrowed(
    issuanceRatio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateSusdToBurnToEclipseEscrowed(uint256)'(
    issuanceRatio: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateSusdToBurnToFixRatioExternal(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateSusdToBurnToFixRatioExternal()'(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateTokensToMintWithEth(
    snxBalanceBefore: BigNumberish,
    ethContributed: BigNumberish,
    nonSnxAssetValue: BigNumberish,
    totalSupply: BigNumberish,
    allocateToEth: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateTokensToMintWithEth(uint256,uint256,uint256,uint256,bool)'(
    snxBalanceBefore: BigNumberish,
    ethContributed: BigNumberish,
    nonSnxAssetValue: BigNumberish,
    totalSupply: BigNumberish,
    allocateToEth: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateTokensToMintWithSnx(
    snxBalanceBefore: BigNumberish,
    snxAddedToBalance: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateTokensToMintWithSnx(uint256,uint256,uint256)'(
    snxBalanceBefore: BigNumberish,
    snxAddedToBalance: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  confirmCurveAddress(
    _nextCurveAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'confirmCurveAddress(address)'(
    _nextCurveAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  getActiveSetAssetBalance(overrides?: CallOverrides): Promise<BigNumber>

  'getActiveSetAssetBalance()'(overrides?: CallOverrides): Promise<BigNumber>

  getAssetCurrentlyActiveInSet(overrides?: CallOverrides): Promise<string>

  'getAssetCurrentlyActiveInSet()'(overrides?: CallOverrides): Promise<string>

  getEthAllocationOnHedge(
    susdBal: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getEthAllocationOnHedge(uint256)'(
    susdBal: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getEthBalance(overrides?: CallOverrides): Promise<BigNumber>

  'getEthBalance()'(overrides?: CallOverrides): Promise<BigNumber>

  getMintWithEthUtils(
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & {
      allocateToEth: boolean
      nonSnxAssetValue: BigNumber
    }
  >

  'getMintWithEthUtils(uint256)'(
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & {
      allocateToEth: boolean
      nonSnxAssetValue: BigNumber
    }
  >

  getRebalanceTowardsHedgeUtils(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, string]>

  'getRebalanceTowardsHedgeUtils()'(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, string]>

  getRebalanceTowardsSnxUtils(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { setToSell: BigNumber; activeAsset: string }
  >

  'getRebalanceTowardsSnxUtils()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { setToSell: BigNumber; activeAsset: string }
  >

  getRebalanceUtils(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      debtValueInWei: BigNumber
      hedgeAssetsBalance: BigNumber
    }
  >

  'getRebalanceUtils()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      debtValueInWei: BigNumber
      hedgeAssetsBalance: BigNumber
    }
  >

  getSetHoldingsValueInWei(overrides?: CallOverrides): Promise<BigNumber>

  'getSetHoldingsValueInWei()'(overrides?: CallOverrides): Promise<BigNumber>

  getSnxBalance(overrides?: CallOverrides): Promise<BigNumber>

  'getSnxBalance()'(overrides?: CallOverrides): Promise<BigNumber>

  getSusdBalance(overrides?: CallOverrides): Promise<BigNumber>

  'getSusdBalance()'(overrides?: CallOverrides): Promise<BigNumber>

  'initialize(address,address,address,address,address,address,bytes32[2],address[2],address)'(
    _setAddress: string,
    _kyberProxyAddress: string,
    _addressResolver: string,
    _susdAddress: string,
    _usdcAddress: string,
    _addressValidator: string,
    _synthSymbols: [BytesLike, BytesLike],
    _setComponentAddresses: [string, string],
    _ownerAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(address)'(
    sender: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  isOwner(overrides?: CallOverrides): Promise<boolean>

  'isOwner()'(overrides?: CallOverrides): Promise<boolean>

  isRebalanceTowardsHedgeRequired(overrides?: CallOverrides): Promise<boolean>

  'isRebalanceTowardsHedgeRequired()'(
    overrides?: CallOverrides
  ): Promise<boolean>

  isRebalanceTowardsSnxRequired(overrides?: CallOverrides): Promise<boolean>

  'isRebalanceTowardsSnxRequired()'(overrides?: CallOverrides): Promise<boolean>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  setAdminInstanceAddress(
    _xSNXAdminInstance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setAdminInstanceAddress(address)'(
    _xSNXAdminInstance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setCurve(
    curvePoolAddress: string,
    _usdcIndex: BigNumberish,
    _susdIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setCurve(address,int128,int128)'(
    curvePoolAddress: string,
    _usdcIndex: BigNumberish,
    _susdIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  shouldAllocateEthToEthReserve(
    setHoldingsInWei: BigNumberish,
    ethBalBefore: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>

  'shouldAllocateEthToEthReserve(uint256,uint256,uint256)'(
    setHoldingsInWei: BigNumberish,
    ethBalBefore: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>

  swapTokenToEther(
    fromToken: string,
    amount: BigNumberish,
    minKyberRate: BigNumberish,
    minCurveReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'swapTokenToEther(address,uint256,uint256,uint256)'(
    fromToken: string,
    amount: BigNumberish,
    minKyberRate: BigNumberish,
    minCurveReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  swapTokenToToken(
    fromToken: string,
    amount: BigNumberish,
    toToken: string,
    minKyberRate: BigNumberish,
    minCurveReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'swapTokenToToken(address,uint256,address,uint256,uint256)'(
    fromToken: string,
    amount: BigNumberish,
    toToken: string,
    minKyberRate: BigNumberish,
    minCurveReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    approveCurve(tokenAddress: string, overrides?: CallOverrides): Promise<void>

    'approveCurve(address)'(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    approveKyber(tokenAddress: string, overrides?: CallOverrides): Promise<void>

    'approveKyber(address)'(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    calculateAssetChangesForRebalanceToSnx(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateAssetChangesForRebalanceToSnx()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateIssueTokenPrice(
      weiPerOneSnx: BigNumberish,
      snxBalanceBefore: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateIssueTokenPrice(uint256,uint256,uint256,uint256)'(
      weiPerOneSnx: BigNumberish,
      snxBalanceBefore: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateRedeemTokenPrice(
      totalSupply: BigNumberish,
      snxBalanceOwned: BigNumberish,
      contractDebtValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateRedeemTokenPrice(uint256,uint256,uint256)'(
      totalSupply: BigNumberish,
      snxBalanceOwned: BigNumberish,
      contractDebtValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateRedemptionValue(
      totalSupply: BigNumberish,
      tokensToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateRedemptionValue(uint256,uint256)'(
      totalSupply: BigNumberish,
      tokensToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateSetIssuanceQuantity(overrides?: CallOverrides): Promise<BigNumber>

    'calculateSetIssuanceQuantity()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateSetQuantity(
      componentQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateSetQuantity(uint256)'(
      componentQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateSetRedemptionQuantity(
      totalSusdToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateSetRedemptionQuantity(uint256)'(
      totalSusdToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateSetToSellForRebalanceSetToEth(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateSetToSellForRebalanceSetToEth()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateSusdToBurnForRedemption(
      tokensToRedeem: BigNumberish,
      totalSupply: BigNumberish,
      contractDebtValue: BigNumberish,
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateSusdToBurnForRedemption(uint256,uint256,uint256,uint256)'(
      tokensToRedeem: BigNumberish,
      totalSupply: BigNumberish,
      contractDebtValue: BigNumberish,
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateSusdToBurnToEclipseEscrowed(
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateSusdToBurnToEclipseEscrowed(uint256)'(
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateSusdToBurnToFixRatioExternal(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateSusdToBurnToFixRatioExternal()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateTokensToMintWithEth(
      snxBalanceBefore: BigNumberish,
      ethContributed: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      allocateToEth: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateTokensToMintWithEth(uint256,uint256,uint256,uint256,bool)'(
      snxBalanceBefore: BigNumberish,
      ethContributed: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      allocateToEth: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateTokensToMintWithSnx(
      snxBalanceBefore: BigNumberish,
      snxAddedToBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateTokensToMintWithSnx(uint256,uint256,uint256)'(
      snxBalanceBefore: BigNumberish,
      snxAddedToBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    confirmCurveAddress(
      _nextCurveAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'confirmCurveAddress(address)'(
      _nextCurveAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    getActiveSetAssetBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getActiveSetAssetBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getAssetCurrentlyActiveInSet(overrides?: CallOverrides): Promise<string>

    'getAssetCurrentlyActiveInSet()'(overrides?: CallOverrides): Promise<string>

    getEthAllocationOnHedge(
      susdBal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getEthAllocationOnHedge(uint256)'(
      susdBal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getEthBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getEthBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getMintWithEthUtils(
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        allocateToEth: boolean
        nonSnxAssetValue: BigNumber
      }
    >

    'getMintWithEthUtils(uint256)'(
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        allocateToEth: boolean
        nonSnxAssetValue: BigNumber
      }
    >

    getRebalanceTowardsHedgeUtils(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>

    'getRebalanceTowardsHedgeUtils()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>

    getRebalanceTowardsSnxUtils(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { setToSell: BigNumber; activeAsset: string }
    >

    'getRebalanceTowardsSnxUtils()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { setToSell: BigNumber; activeAsset: string }
    >

    getRebalanceUtils(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        debtValueInWei: BigNumber
        hedgeAssetsBalance: BigNumber
      }
    >

    'getRebalanceUtils()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        debtValueInWei: BigNumber
        hedgeAssetsBalance: BigNumber
      }
    >

    getSetHoldingsValueInWei(overrides?: CallOverrides): Promise<BigNumber>

    'getSetHoldingsValueInWei()'(overrides?: CallOverrides): Promise<BigNumber>

    getSnxBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getSnxBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getSusdBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getSusdBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    'initialize(address,address,address,address,address,address,bytes32[2],address[2],address)'(
      _setAddress: string,
      _kyberProxyAddress: string,
      _addressResolver: string,
      _susdAddress: string,
      _usdcAddress: string,
      _addressValidator: string,
      _synthSymbols: [BytesLike, BytesLike],
      _setComponentAddresses: [string, string],
      _ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(address)'(
      sender: string,
      overrides?: CallOverrides
    ): Promise<void>

    isOwner(overrides?: CallOverrides): Promise<boolean>

    'isOwner()'(overrides?: CallOverrides): Promise<boolean>

    isRebalanceTowardsHedgeRequired(overrides?: CallOverrides): Promise<boolean>

    'isRebalanceTowardsHedgeRequired()'(
      overrides?: CallOverrides
    ): Promise<boolean>

    isRebalanceTowardsSnxRequired(overrides?: CallOverrides): Promise<boolean>

    'isRebalanceTowardsSnxRequired()'(
      overrides?: CallOverrides
    ): Promise<boolean>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    setAdminInstanceAddress(
      _xSNXAdminInstance: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setAdminInstanceAddress(address)'(
      _xSNXAdminInstance: string,
      overrides?: CallOverrides
    ): Promise<void>

    setCurve(
      curvePoolAddress: string,
      _usdcIndex: BigNumberish,
      _susdIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setCurve(address,int128,int128)'(
      curvePoolAddress: string,
      _usdcIndex: BigNumberish,
      _susdIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    shouldAllocateEthToEthReserve(
      setHoldingsInWei: BigNumberish,
      ethBalBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'shouldAllocateEthToEthReserve(uint256,uint256,uint256)'(
      setHoldingsInWei: BigNumberish,
      ethBalBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    swapTokenToEther(
      fromToken: string,
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'swapTokenToEther(address,uint256,uint256,uint256)'(
      fromToken: string,
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    swapTokenToToken(
      fromToken: string,
      amount: BigNumberish,
      toToken: string,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'swapTokenToToken(address,uint256,address,uint256,uint256)'(
      fromToken: string,
      amount: BigNumberish,
      toToken: string,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter
  }

  estimateGas: {
    approveCurve(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approveCurve(address)'(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    approveKyber(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approveKyber(address)'(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    calculateAssetChangesForRebalanceToSnx(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateAssetChangesForRebalanceToSnx()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateIssueTokenPrice(
      weiPerOneSnx: BigNumberish,
      snxBalanceBefore: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateIssueTokenPrice(uint256,uint256,uint256,uint256)'(
      weiPerOneSnx: BigNumberish,
      snxBalanceBefore: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateRedeemTokenPrice(
      totalSupply: BigNumberish,
      snxBalanceOwned: BigNumberish,
      contractDebtValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateRedeemTokenPrice(uint256,uint256,uint256)'(
      totalSupply: BigNumberish,
      snxBalanceOwned: BigNumberish,
      contractDebtValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateRedemptionValue(
      totalSupply: BigNumberish,
      tokensToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateRedemptionValue(uint256,uint256)'(
      totalSupply: BigNumberish,
      tokensToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateSetIssuanceQuantity(overrides?: CallOverrides): Promise<BigNumber>

    'calculateSetIssuanceQuantity()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateSetQuantity(
      componentQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateSetQuantity(uint256)'(
      componentQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateSetRedemptionQuantity(
      totalSusdToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateSetRedemptionQuantity(uint256)'(
      totalSusdToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateSetToSellForRebalanceSetToEth(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateSetToSellForRebalanceSetToEth()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateSusdToBurnForRedemption(
      tokensToRedeem: BigNumberish,
      totalSupply: BigNumberish,
      contractDebtValue: BigNumberish,
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateSusdToBurnForRedemption(uint256,uint256,uint256,uint256)'(
      tokensToRedeem: BigNumberish,
      totalSupply: BigNumberish,
      contractDebtValue: BigNumberish,
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateSusdToBurnToEclipseEscrowed(
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateSusdToBurnToEclipseEscrowed(uint256)'(
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateSusdToBurnToFixRatioExternal(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateSusdToBurnToFixRatioExternal()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateTokensToMintWithEth(
      snxBalanceBefore: BigNumberish,
      ethContributed: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      allocateToEth: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateTokensToMintWithEth(uint256,uint256,uint256,uint256,bool)'(
      snxBalanceBefore: BigNumberish,
      ethContributed: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      allocateToEth: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateTokensToMintWithSnx(
      snxBalanceBefore: BigNumberish,
      snxAddedToBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateTokensToMintWithSnx(uint256,uint256,uint256)'(
      snxBalanceBefore: BigNumberish,
      snxAddedToBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    confirmCurveAddress(
      _nextCurveAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'confirmCurveAddress(address)'(
      _nextCurveAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    getActiveSetAssetBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getActiveSetAssetBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getAssetCurrentlyActiveInSet(overrides?: CallOverrides): Promise<BigNumber>

    'getAssetCurrentlyActiveInSet()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getEthAllocationOnHedge(
      susdBal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getEthAllocationOnHedge(uint256)'(
      susdBal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getEthBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getEthBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getMintWithEthUtils(
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getMintWithEthUtils(uint256)'(
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRebalanceTowardsHedgeUtils(overrides?: CallOverrides): Promise<BigNumber>

    'getRebalanceTowardsHedgeUtils()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRebalanceTowardsSnxUtils(overrides?: CallOverrides): Promise<BigNumber>

    'getRebalanceTowardsSnxUtils()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRebalanceUtils(overrides?: CallOverrides): Promise<BigNumber>

    'getRebalanceUtils()'(overrides?: CallOverrides): Promise<BigNumber>

    getSetHoldingsValueInWei(overrides?: CallOverrides): Promise<BigNumber>

    'getSetHoldingsValueInWei()'(overrides?: CallOverrides): Promise<BigNumber>

    getSnxBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getSnxBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getSusdBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getSusdBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    'initialize(address,address,address,address,address,address,bytes32[2],address[2],address)'(
      _setAddress: string,
      _kyberProxyAddress: string,
      _addressResolver: string,
      _susdAddress: string,
      _usdcAddress: string,
      _addressValidator: string,
      _synthSymbols: [BytesLike, BytesLike],
      _setComponentAddresses: [string, string],
      _ownerAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(address)'(
      sender: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    isOwner(overrides?: CallOverrides): Promise<BigNumber>

    'isOwner()'(overrides?: CallOverrides): Promise<BigNumber>

    isRebalanceTowardsHedgeRequired(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'isRebalanceTowardsHedgeRequired()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isRebalanceTowardsSnxRequired(overrides?: CallOverrides): Promise<BigNumber>

    'isRebalanceTowardsSnxRequired()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    setAdminInstanceAddress(
      _xSNXAdminInstance: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setAdminInstanceAddress(address)'(
      _xSNXAdminInstance: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setCurve(
      curvePoolAddress: string,
      _usdcIndex: BigNumberish,
      _susdIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setCurve(address,int128,int128)'(
      curvePoolAddress: string,
      _usdcIndex: BigNumberish,
      _susdIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    shouldAllocateEthToEthReserve(
      setHoldingsInWei: BigNumberish,
      ethBalBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'shouldAllocateEthToEthReserve(uint256,uint256,uint256)'(
      setHoldingsInWei: BigNumberish,
      ethBalBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    swapTokenToEther(
      fromToken: string,
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'swapTokenToEther(address,uint256,uint256,uint256)'(
      fromToken: string,
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    swapTokenToToken(
      fromToken: string,
      amount: BigNumberish,
      toToken: string,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'swapTokenToToken(address,uint256,address,uint256,uint256)'(
      fromToken: string,
      amount: BigNumberish,
      toToken: string,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    approveCurve(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approveCurve(address)'(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    approveKyber(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approveKyber(address)'(
      tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    calculateAssetChangesForRebalanceToSnx(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateAssetChangesForRebalanceToSnx()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateIssueTokenPrice(
      weiPerOneSnx: BigNumberish,
      snxBalanceBefore: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateIssueTokenPrice(uint256,uint256,uint256,uint256)'(
      weiPerOneSnx: BigNumberish,
      snxBalanceBefore: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateRedeemTokenPrice(
      totalSupply: BigNumberish,
      snxBalanceOwned: BigNumberish,
      contractDebtValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateRedeemTokenPrice(uint256,uint256,uint256)'(
      totalSupply: BigNumberish,
      snxBalanceOwned: BigNumberish,
      contractDebtValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateRedemptionValue(
      totalSupply: BigNumberish,
      tokensToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateRedemptionValue(uint256,uint256)'(
      totalSupply: BigNumberish,
      tokensToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateSetIssuanceQuantity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateSetIssuanceQuantity()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateSetQuantity(
      componentQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateSetQuantity(uint256)'(
      componentQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateSetRedemptionQuantity(
      totalSusdToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateSetRedemptionQuantity(uint256)'(
      totalSusdToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateSetToSellForRebalanceSetToEth(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateSetToSellForRebalanceSetToEth()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateSusdToBurnForRedemption(
      tokensToRedeem: BigNumberish,
      totalSupply: BigNumberish,
      contractDebtValue: BigNumberish,
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateSusdToBurnForRedemption(uint256,uint256,uint256,uint256)'(
      tokensToRedeem: BigNumberish,
      totalSupply: BigNumberish,
      contractDebtValue: BigNumberish,
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateSusdToBurnToEclipseEscrowed(
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateSusdToBurnToEclipseEscrowed(uint256)'(
      issuanceRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateSusdToBurnToFixRatioExternal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateSusdToBurnToFixRatioExternal()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateTokensToMintWithEth(
      snxBalanceBefore: BigNumberish,
      ethContributed: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      allocateToEth: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateTokensToMintWithEth(uint256,uint256,uint256,uint256,bool)'(
      snxBalanceBefore: BigNumberish,
      ethContributed: BigNumberish,
      nonSnxAssetValue: BigNumberish,
      totalSupply: BigNumberish,
      allocateToEth: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateTokensToMintWithSnx(
      snxBalanceBefore: BigNumberish,
      snxAddedToBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateTokensToMintWithSnx(uint256,uint256,uint256)'(
      snxBalanceBefore: BigNumberish,
      snxAddedToBalance: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    confirmCurveAddress(
      _nextCurveAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'confirmCurveAddress(address)'(
      _nextCurveAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    getActiveSetAssetBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getActiveSetAssetBalance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAssetCurrentlyActiveInSet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getAssetCurrentlyActiveInSet()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getEthAllocationOnHedge(
      susdBal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getEthAllocationOnHedge(uint256)'(
      susdBal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getEthBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getEthBalance()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getMintWithEthUtils(
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getMintWithEthUtils(uint256)'(
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRebalanceTowardsHedgeUtils(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getRebalanceTowardsHedgeUtils()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRebalanceTowardsSnxUtils(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getRebalanceTowardsSnxUtils()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRebalanceUtils(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getRebalanceUtils()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getSetHoldingsValueInWei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getSetHoldingsValueInWei()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getSnxBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getSnxBalance()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getSusdBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getSusdBalance()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'initialize(address,address,address,address,address,address,bytes32[2],address[2],address)'(
      _setAddress: string,
      _kyberProxyAddress: string,
      _addressResolver: string,
      _susdAddress: string,
      _usdcAddress: string,
      _addressValidator: string,
      _synthSymbols: [BytesLike, BytesLike],
      _setComponentAddresses: [string, string],
      _ownerAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(address)'(
      sender: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isOwner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isRebalanceTowardsHedgeRequired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'isRebalanceTowardsHedgeRequired()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isRebalanceTowardsSnxRequired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'isRebalanceTowardsSnxRequired()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    setAdminInstanceAddress(
      _xSNXAdminInstance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setAdminInstanceAddress(address)'(
      _xSNXAdminInstance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setCurve(
      curvePoolAddress: string,
      _usdcIndex: BigNumberish,
      _susdIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setCurve(address,int128,int128)'(
      curvePoolAddress: string,
      _usdcIndex: BigNumberish,
      _susdIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    shouldAllocateEthToEthReserve(
      setHoldingsInWei: BigNumberish,
      ethBalBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'shouldAllocateEthToEthReserve(uint256,uint256,uint256)'(
      setHoldingsInWei: BigNumberish,
      ethBalBefore: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    swapTokenToEther(
      fromToken: string,
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'swapTokenToEther(address,uint256,uint256,uint256)'(
      fromToken: string,
      amount: BigNumberish,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    swapTokenToToken(
      fromToken: string,
      amount: BigNumberish,
      toToken: string,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'swapTokenToToken(address,uint256,address,uint256,uint256)'(
      fromToken: string,
      amount: BigNumberish,
      toToken: string,
      minKyberRate: BigNumberish,
      minCurveReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
