/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface InchLiquidityProtocolInterface extends ethers.utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'decayPeriod()': FunctionFragment
    'decayPeriodVote(uint256)': FunctionFragment
    'decayPeriodVotes(address)': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'discardDecayPeriodVote()': FunctionFragment
    'discardFeeVote()': FunctionFragment
    'discardSlippageFeeVote()': FunctionFragment
    'fee()': FunctionFragment
    'feeVote(uint256)': FunctionFragment
    'feeVotes(address)': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'mooniswapFactoryGovernance()': FunctionFragment
    'name()': FunctionFragment
    'owner()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'slippageFee()': FunctionFragment
    'slippageFeeVote(uint256)': FunctionFragment
    'slippageFeeVotes(address)': FunctionFragment
    'symbol()': FunctionFragment
    'token0()': FunctionFragment
    'token1()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'virtualBalancesForAddition(address)': FunctionFragment
    'virtualBalancesForRemoval(address)': FunctionFragment
    'virtualDecayPeriod()': FunctionFragment
    'virtualFee()': FunctionFragment
    'virtualSlippageFee()': FunctionFragment
    'volumes(address)': FunctionFragment
    'getTokens()': FunctionFragment
    'tokens(uint256)': FunctionFragment
    'getBalanceForAddition(address)': FunctionFragment
    'getBalanceForRemoval(address)': FunctionFragment
    'getReturn(address,address,uint256)': FunctionFragment
    'deposit(uint256[2],uint256[2])': FunctionFragment
    'depositFor(uint256[2],uint256[2],address)': FunctionFragment
    'withdraw(uint256,uint256[])': FunctionFragment
    'withdrawFor(uint256,uint256[],address)': FunctionFragment
    'swap(address,address,uint256,uint256,address)': FunctionFragment
    'swapFor(address,address,uint256,uint256,address,address)': FunctionFragment
    'rescueFunds(address,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(
    functionFragment: 'decayPeriod',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'decayPeriodVote',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'decayPeriodVotes',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'discardDecayPeriodVote',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'discardFeeVote',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'discardSlippageFeeVote',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'fee', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'feeVote',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'feeVotes', values: [string]): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'mooniswapFactoryGovernance',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'slippageFee',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'slippageFeeVote',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'slippageFeeVotes',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(functionFragment: 'token0', values?: undefined): string
  encodeFunctionData(functionFragment: 'token1', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'virtualBalancesForAddition',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'virtualBalancesForRemoval',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'virtualDecayPeriod',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'virtualFee', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'virtualSlippageFee',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'volumes', values: [string]): string
  encodeFunctionData(functionFragment: 'getTokens', values?: undefined): string
  encodeFunctionData(functionFragment: 'tokens', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'getBalanceForAddition',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'getBalanceForRemoval',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'getReturn',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]]
  ): string
  encodeFunctionData(
    functionFragment: 'depositFor',
    values: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish], string]
  ): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish, BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawFor',
    values: [BigNumberish, BigNumberish[], string]
  ): string
  encodeFunctionData(
    functionFragment: 'swap',
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'swapFor',
    values: [string, string, BigNumberish, BigNumberish, string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'rescueFunds',
    values: [string, BigNumberish]
  ): string

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decayPeriod', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decayPeriodVote',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'decayPeriodVotes',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'discardDecayPeriodVote',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'discardFeeVote',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'discardSlippageFeeVote',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'fee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'feeVote', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'feeVotes', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'mooniswapFactoryGovernance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'slippageFee', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'slippageFeeVote',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'slippageFeeVotes',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token0', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token1', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'virtualBalancesForAddition',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'virtualBalancesForRemoval',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'virtualDecayPeriod',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'virtualFee', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'virtualSlippageFee',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'volumes', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getTokens', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokens', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getBalanceForAddition',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getBalanceForRemoval',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getReturn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositFor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawFor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'swap', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'swapFor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rescueFunds', data: BytesLike): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'DecayPeriodVoteUpdate(address,uint256,bool,uint256)': EventFragment
    'Deposited(address,address,uint256,uint256,uint256)': EventFragment
    'FeeVoteUpdate(address,uint256,bool,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'SlippageFeeVoteUpdate(address,uint256,bool,uint256)': EventFragment
    'Swapped(address,address,address,address,uint256,uint256,uint256,uint256,address)': EventFragment
    'Sync(uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Withdrawn(address,address,uint256,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DecayPeriodVoteUpdate'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Deposited'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FeeVoteUpdate'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SlippageFeeVoteUpdate'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Swapped'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Sync'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment
}

export class InchLiquidityProtocol extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: InchLiquidityProtocolInterface

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    decayPeriod(overrides?: CallOverrides): Promise<[BigNumber]>

    'decayPeriod()'(overrides?: CallOverrides): Promise<[BigNumber]>

    decayPeriodVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'decayPeriodVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    decayPeriodVotes(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'decayPeriodVotes(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    decimals(overrides?: CallOverrides): Promise<[number]>

    'decimals()'(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    discardDecayPeriodVote(overrides?: Overrides): Promise<ContractTransaction>

    'discardDecayPeriodVote()'(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    discardFeeVote(overrides?: Overrides): Promise<ContractTransaction>

    'discardFeeVote()'(overrides?: Overrides): Promise<ContractTransaction>

    discardSlippageFeeVote(overrides?: Overrides): Promise<ContractTransaction>

    'discardSlippageFeeVote()'(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    fee(overrides?: CallOverrides): Promise<[BigNumber]>

    'fee()'(overrides?: CallOverrides): Promise<[BigNumber]>

    feeVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'feeVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    feeVotes(user: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'feeVotes(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    mooniswapFactoryGovernance(overrides?: CallOverrides): Promise<[string]>

    'mooniswapFactoryGovernance()'(overrides?: CallOverrides): Promise<[string]>

    name(overrides?: CallOverrides): Promise<[string]>

    'name()'(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    slippageFee(overrides?: CallOverrides): Promise<[BigNumber]>

    'slippageFee()'(overrides?: CallOverrides): Promise<[BigNumber]>

    slippageFeeVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'slippageFeeVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    slippageFeeVotes(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'slippageFeeVotes(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    symbol(overrides?: CallOverrides): Promise<[string]>

    'symbol()'(overrides?: CallOverrides): Promise<[string]>

    token0(overrides?: CallOverrides): Promise<[string]>

    'token0()'(overrides?: CallOverrides): Promise<[string]>

    token1(overrides?: CallOverrides): Promise<[string]>

    'token1()'(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    virtualBalancesForAddition(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { balance: BigNumber; time: number }>

    'virtualBalancesForAddition(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { balance: BigNumber; time: number }>

    virtualBalancesForRemoval(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { balance: BigNumber; time: number }>

    'virtualBalancesForRemoval(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { balance: BigNumber; time: number }>

    virtualDecayPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>

    'virtualDecayPeriod()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>

    virtualFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>

    'virtualFee()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>

    virtualSlippageFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>

    'virtualSlippageFee()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>

    volumes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { confirmed: BigNumber; result: BigNumber }
    >

    'volumes(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { confirmed: BigNumber; result: BigNumber }
    >

    getTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>

    'getTokens()'(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>

    tokens(i: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    'tokens(uint256)'(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    getBalanceForAddition(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getBalanceForAddition(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getBalanceForRemoval(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getBalanceForRemoval(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getReturn(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getReturn(address,address,uint256)'(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    deposit(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'deposit(uint256[2],uint256[2])'(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    depositFor(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      target: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'depositFor(uint256[2],uint256[2],address)'(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      target: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    withdraw(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdraw(uint256,uint256[])'(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    withdrawFor(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdrawFor(uint256,uint256[],address)'(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    swap(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'swap(address,address,uint256,uint256,address)'(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    swapFor(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      receiver: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'swapFor(address,address,uint256,uint256,address,address)'(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      receiver: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'rescueFunds(address,uint256)'(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

  'balanceOf(address)'(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  decayPeriod(overrides?: CallOverrides): Promise<BigNumber>

  'decayPeriod()'(overrides?: CallOverrides): Promise<BigNumber>

  decayPeriodVote(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'decayPeriodVote(uint256)'(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  decayPeriodVotes(user: string, overrides?: CallOverrides): Promise<BigNumber>

  'decayPeriodVotes(address)'(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  decimals(overrides?: CallOverrides): Promise<number>

  'decimals()'(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  discardDecayPeriodVote(overrides?: Overrides): Promise<ContractTransaction>

  'discardDecayPeriodVote()'(
    overrides?: Overrides
  ): Promise<ContractTransaction>

  discardFeeVote(overrides?: Overrides): Promise<ContractTransaction>

  'discardFeeVote()'(overrides?: Overrides): Promise<ContractTransaction>

  discardSlippageFeeVote(overrides?: Overrides): Promise<ContractTransaction>

  'discardSlippageFeeVote()'(
    overrides?: Overrides
  ): Promise<ContractTransaction>

  fee(overrides?: CallOverrides): Promise<BigNumber>

  'fee()'(overrides?: CallOverrides): Promise<BigNumber>

  feeVote(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'feeVote(uint256)'(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  feeVotes(user: string, overrides?: CallOverrides): Promise<BigNumber>

  'feeVotes(address)'(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  mooniswapFactoryGovernance(overrides?: CallOverrides): Promise<string>

  'mooniswapFactoryGovernance()'(overrides?: CallOverrides): Promise<string>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  slippageFee(overrides?: CallOverrides): Promise<BigNumber>

  'slippageFee()'(overrides?: CallOverrides): Promise<BigNumber>

  slippageFeeVote(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'slippageFeeVote(uint256)'(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  slippageFeeVotes(user: string, overrides?: CallOverrides): Promise<BigNumber>

  'slippageFeeVotes(address)'(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  symbol(overrides?: CallOverrides): Promise<string>

  'symbol()'(overrides?: CallOverrides): Promise<string>

  token0(overrides?: CallOverrides): Promise<string>

  'token0()'(overrides?: CallOverrides): Promise<string>

  token1(overrides?: CallOverrides): Promise<string>

  'token1()'(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferFrom(address,address,uint256)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  virtualBalancesForAddition(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { balance: BigNumber; time: number }>

  'virtualBalancesForAddition(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { balance: BigNumber; time: number }>

  virtualBalancesForRemoval(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { balance: BigNumber; time: number }>

  'virtualBalancesForRemoval(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { balance: BigNumber; time: number }>

  virtualDecayPeriod(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, number]>

  'virtualDecayPeriod()'(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, number]>

  virtualFee(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, number]>

  'virtualFee()'(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, number]>

  virtualSlippageFee(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, number]>

  'virtualSlippageFee()'(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, number]>

  volumes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { confirmed: BigNumber; result: BigNumber }
  >

  'volumes(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { confirmed: BigNumber; result: BigNumber }
  >

  getTokens(overrides?: CallOverrides): Promise<string[]>

  'getTokens()'(overrides?: CallOverrides): Promise<string[]>

  tokens(i: BigNumberish, overrides?: CallOverrides): Promise<string>

  'tokens(uint256)'(i: BigNumberish, overrides?: CallOverrides): Promise<string>

  getBalanceForAddition(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getBalanceForAddition(address)'(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getBalanceForRemoval(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getBalanceForRemoval(address)'(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getReturn(
    src: string,
    dst: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getReturn(address,address,uint256)'(
    src: string,
    dst: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  deposit(
    maxAmounts: [BigNumberish, BigNumberish],
    minAmounts: [BigNumberish, BigNumberish],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'deposit(uint256[2],uint256[2])'(
    maxAmounts: [BigNumberish, BigNumberish],
    minAmounts: [BigNumberish, BigNumberish],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  depositFor(
    maxAmounts: [BigNumberish, BigNumberish],
    minAmounts: [BigNumberish, BigNumberish],
    target: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'depositFor(uint256[2],uint256[2],address)'(
    maxAmounts: [BigNumberish, BigNumberish],
    minAmounts: [BigNumberish, BigNumberish],
    target: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  withdraw(
    amount: BigNumberish,
    minReturns: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdraw(uint256,uint256[])'(
    amount: BigNumberish,
    minReturns: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  withdrawFor(
    amount: BigNumberish,
    minReturns: BigNumberish[],
    target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdrawFor(uint256,uint256[],address)'(
    amount: BigNumberish,
    minReturns: BigNumberish[],
    target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  swap(
    src: string,
    dst: string,
    amount: BigNumberish,
    minReturn: BigNumberish,
    referral: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'swap(address,address,uint256,uint256,address)'(
    src: string,
    dst: string,
    amount: BigNumberish,
    minReturn: BigNumberish,
    referral: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  swapFor(
    src: string,
    dst: string,
    amount: BigNumberish,
    minReturn: BigNumberish,
    referral: string,
    receiver: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'swapFor(address,address,uint256,uint256,address,address)'(
    src: string,
    dst: string,
    amount: BigNumberish,
    minReturn: BigNumberish,
    referral: string,
    receiver: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  rescueFunds(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'rescueFunds(address,uint256)'(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    decayPeriod(overrides?: CallOverrides): Promise<BigNumber>

    'decayPeriod()'(overrides?: CallOverrides): Promise<BigNumber>

    decayPeriodVote(
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'decayPeriodVote(uint256)'(
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    decayPeriodVotes(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'decayPeriodVotes(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<number>

    'decimals()'(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    discardDecayPeriodVote(overrides?: CallOverrides): Promise<void>

    'discardDecayPeriodVote()'(overrides?: CallOverrides): Promise<void>

    discardFeeVote(overrides?: CallOverrides): Promise<void>

    'discardFeeVote()'(overrides?: CallOverrides): Promise<void>

    discardSlippageFeeVote(overrides?: CallOverrides): Promise<void>

    'discardSlippageFeeVote()'(overrides?: CallOverrides): Promise<void>

    fee(overrides?: CallOverrides): Promise<BigNumber>

    'fee()'(overrides?: CallOverrides): Promise<BigNumber>

    feeVote(vote: BigNumberish, overrides?: CallOverrides): Promise<void>

    'feeVote(uint256)'(
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    feeVotes(user: string, overrides?: CallOverrides): Promise<BigNumber>

    'feeVotes(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    mooniswapFactoryGovernance(overrides?: CallOverrides): Promise<string>

    'mooniswapFactoryGovernance()'(overrides?: CallOverrides): Promise<string>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    slippageFee(overrides?: CallOverrides): Promise<BigNumber>

    'slippageFee()'(overrides?: CallOverrides): Promise<BigNumber>

    slippageFeeVote(
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'slippageFeeVote(uint256)'(
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    slippageFeeVotes(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'slippageFeeVotes(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<string>

    'symbol()'(overrides?: CallOverrides): Promise<string>

    token0(overrides?: CallOverrides): Promise<string>

    'token0()'(overrides?: CallOverrides): Promise<string>

    token1(overrides?: CallOverrides): Promise<string>

    'token1()'(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    virtualBalancesForAddition(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { balance: BigNumber; time: number }>

    'virtualBalancesForAddition(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { balance: BigNumber; time: number }>

    virtualBalancesForRemoval(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { balance: BigNumber; time: number }>

    'virtualBalancesForRemoval(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { balance: BigNumber; time: number }>

    virtualDecayPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>

    'virtualDecayPeriod()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>

    virtualFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>

    'virtualFee()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>

    virtualSlippageFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>

    'virtualSlippageFee()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number]>

    volumes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { confirmed: BigNumber; result: BigNumber }
    >

    'volumes(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { confirmed: BigNumber; result: BigNumber }
    >

    getTokens(overrides?: CallOverrides): Promise<string[]>

    'getTokens()'(overrides?: CallOverrides): Promise<string[]>

    tokens(i: BigNumberish, overrides?: CallOverrides): Promise<string>

    'tokens(uint256)'(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    getBalanceForAddition(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getBalanceForAddition(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getBalanceForRemoval(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getBalanceForRemoval(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getReturn(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getReturn(address,address,uint256)'(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    deposit(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, [BigNumber, BigNumber]] & {
        fairSupply: BigNumber
        receivedAmounts: [BigNumber, BigNumber]
      }
    >

    'deposit(uint256[2],uint256[2])'(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, [BigNumber, BigNumber]] & {
        fairSupply: BigNumber
        receivedAmounts: [BigNumber, BigNumber]
      }
    >

    depositFor(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      target: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, [BigNumber, BigNumber]] & {
        fairSupply: BigNumber
        receivedAmounts: [BigNumber, BigNumber]
      }
    >

    'depositFor(uint256[2],uint256[2],address)'(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      target: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, [BigNumber, BigNumber]] & {
        fairSupply: BigNumber
        receivedAmounts: [BigNumber, BigNumber]
      }
    >

    withdraw(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    'withdraw(uint256,uint256[])'(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    withdrawFor(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      target: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    'withdrawFor(uint256,uint256[],address)'(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      target: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    swap(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'swap(address,address,uint256,uint256,address)'(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    swapFor(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'swapFor(address,address,uint256,uint256,address,address)'(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'rescueFunds(address,uint256)'(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter

    DecayPeriodVoteUpdate(
      user: string | null,
      decayPeriod: null,
      isDefault: null,
      amount: null
    ): EventFilter

    Deposited(
      sender: string | null,
      receiver: string | null,
      share: null,
      token0Amount: null,
      token1Amount: null
    ): EventFilter

    FeeVoteUpdate(
      user: string | null,
      fee: null,
      isDefault: null,
      amount: null
    ): EventFilter

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter

    SlippageFeeVoteUpdate(
      user: string | null,
      slippageFee: null,
      isDefault: null,
      amount: null
    ): EventFilter

    Swapped(
      sender: string | null,
      receiver: string | null,
      srcToken: string | null,
      dstToken: null,
      amount: null,
      result: null,
      srcAdditionBalance: null,
      dstRemovalBalance: null,
      referral: null
    ): EventFilter

    Sync(
      srcBalance: null,
      dstBalance: null,
      fee: null,
      slippageFee: null,
      referralShare: null,
      governanceShare: null
    ): EventFilter

    Transfer(from: string | null, to: string | null, value: null): EventFilter

    Withdrawn(
      sender: string | null,
      receiver: string | null,
      share: null,
      token0Amount: null,
      token1Amount: null
    ): EventFilter
  }

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    decayPeriod(overrides?: CallOverrides): Promise<BigNumber>

    'decayPeriod()'(overrides?: CallOverrides): Promise<BigNumber>

    decayPeriodVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'decayPeriodVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    decayPeriodVotes(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'decayPeriodVotes(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    discardDecayPeriodVote(overrides?: Overrides): Promise<BigNumber>

    'discardDecayPeriodVote()'(overrides?: Overrides): Promise<BigNumber>

    discardFeeVote(overrides?: Overrides): Promise<BigNumber>

    'discardFeeVote()'(overrides?: Overrides): Promise<BigNumber>

    discardSlippageFeeVote(overrides?: Overrides): Promise<BigNumber>

    'discardSlippageFeeVote()'(overrides?: Overrides): Promise<BigNumber>

    fee(overrides?: CallOverrides): Promise<BigNumber>

    'fee()'(overrides?: CallOverrides): Promise<BigNumber>

    feeVote(vote: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'feeVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    feeVotes(user: string, overrides?: CallOverrides): Promise<BigNumber>

    'feeVotes(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    mooniswapFactoryGovernance(overrides?: CallOverrides): Promise<BigNumber>

    'mooniswapFactoryGovernance()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    slippageFee(overrides?: CallOverrides): Promise<BigNumber>

    'slippageFee()'(overrides?: CallOverrides): Promise<BigNumber>

    slippageFeeVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'slippageFeeVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    slippageFeeVotes(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'slippageFeeVotes(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>

    token0(overrides?: CallOverrides): Promise<BigNumber>

    'token0()'(overrides?: CallOverrides): Promise<BigNumber>

    token1(overrides?: CallOverrides): Promise<BigNumber>

    'token1()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    virtualBalancesForAddition(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'virtualBalancesForAddition(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    virtualBalancesForRemoval(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'virtualBalancesForRemoval(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    virtualDecayPeriod(overrides?: CallOverrides): Promise<BigNumber>

    'virtualDecayPeriod()'(overrides?: CallOverrides): Promise<BigNumber>

    virtualFee(overrides?: CallOverrides): Promise<BigNumber>

    'virtualFee()'(overrides?: CallOverrides): Promise<BigNumber>

    virtualSlippageFee(overrides?: CallOverrides): Promise<BigNumber>

    'virtualSlippageFee()'(overrides?: CallOverrides): Promise<BigNumber>

    volumes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'volumes(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTokens(overrides?: CallOverrides): Promise<BigNumber>

    'getTokens()'(overrides?: CallOverrides): Promise<BigNumber>

    tokens(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'tokens(uint256)'(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getBalanceForAddition(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getBalanceForAddition(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getBalanceForRemoval(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getBalanceForRemoval(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getReturn(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getReturn(address,address,uint256)'(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    deposit(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'deposit(uint256[2],uint256[2])'(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    depositFor(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      target: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'depositFor(uint256[2],uint256[2],address)'(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      target: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    withdraw(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'withdraw(uint256,uint256[])'(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>

    withdrawFor(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      target: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'withdrawFor(uint256,uint256[],address)'(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      target: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    swap(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'swap(address,address,uint256,uint256,address)'(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    swapFor(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      receiver: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'swapFor(address,address,uint256,uint256,address,address)'(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      receiver: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'rescueFunds(address,uint256)'(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    decayPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'decayPeriod()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decayPeriodVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'decayPeriodVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    decayPeriodVotes(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'decayPeriodVotes(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    discardDecayPeriodVote(overrides?: Overrides): Promise<PopulatedTransaction>

    'discardDecayPeriodVote()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    discardFeeVote(overrides?: Overrides): Promise<PopulatedTransaction>

    'discardFeeVote()'(overrides?: Overrides): Promise<PopulatedTransaction>

    discardSlippageFeeVote(overrides?: Overrides): Promise<PopulatedTransaction>

    'discardSlippageFeeVote()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'fee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    feeVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'feeVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    feeVotes(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'feeVotes(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    mooniswapFactoryGovernance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'mooniswapFactoryGovernance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    slippageFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'slippageFee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    slippageFeeVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'slippageFeeVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    slippageFeeVotes(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'slippageFeeVotes(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'token0()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'token1()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    virtualBalancesForAddition(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'virtualBalancesForAddition(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    virtualBalancesForRemoval(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'virtualBalancesForRemoval(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    virtualDecayPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'virtualDecayPeriod()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    virtualFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'virtualFee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    virtualSlippageFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'virtualSlippageFee()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    volumes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'volumes(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getTokens()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokens(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'tokens(uint256)'(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getBalanceForAddition(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getBalanceForAddition(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getBalanceForRemoval(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getBalanceForRemoval(address)'(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getReturn(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getReturn(address,address,uint256)'(
      src: string,
      dst: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    deposit(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'deposit(uint256[2],uint256[2])'(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    depositFor(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      target: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'depositFor(uint256[2],uint256[2],address)'(
      maxAmounts: [BigNumberish, BigNumberish],
      minAmounts: [BigNumberish, BigNumberish],
      target: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    withdraw(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdraw(uint256,uint256[])'(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    withdrawFor(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdrawFor(uint256,uint256[],address)'(
      amount: BigNumberish,
      minReturns: BigNumberish[],
      target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    swap(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'swap(address,address,uint256,uint256,address)'(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    swapFor(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      receiver: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'swapFor(address,address,uint256,uint256,address,address)'(
      src: string,
      dst: string,
      amount: BigNumberish,
      minReturn: BigNumberish,
      referral: string,
      receiver: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    rescueFunds(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'rescueFunds(address,uint256)'(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
