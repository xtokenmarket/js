/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface LiquidityPoolInterface extends ethers.utils.Interface {
  functions: {
    'borrow(uint256)': FunctionFragment
    'borrowRate()': FunctionFragment
    'borrowRatePerBlock()': FunctionFragment
    'comptroller()': FunctionFragment
    'currentLiquidity()': FunctionFragment
    'getBaseBorrowRate()': FunctionFragment
    'getLPTBaseValue()': FunctionFragment
    'getLPTValue()': FunctionFragment
    'getLiquidationPenaltyFactor()': FunctionFragment
    'getMinimumLoanValue()': FunctionFragment
    'getOptimalUtilizationRate()': FunctionFragment
    'getReserveFactor()': FunctionFragment
    'getSlope1()': FunctionFragment
    'getSlope2()': FunctionFragment
    'getXtkFeeFactor()': FunctionFragment
    'initialize(address)': FunctionFragment
    'lastLockedBlock(address)': FunctionFragment
    'liquidate(address,uint256)': FunctionFragment
    'liquidateWithPreference(address,uint256,address[])': FunctionFragment
    'owner()': FunctionFragment
    'pauseContract()': FunctionFragment
    'paused()': FunctionFragment
    'payAll()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'repay(uint256)': FunctionFragment
    'reserves()': FunctionFragment
    'setComptroller(address)': FunctionFragment
    'setInterestModelParameters(uint256,uint256,uint256,uint256)': FunctionFragment
    'setLPTBaseValue(uint256)': FunctionFragment
    'setLiquidationPenaltyFactor(uint256)': FunctionFragment
    'setLiquidityPoolToken(address)': FunctionFragment
    'setMinimumLoanValue(uint256)': FunctionFragment
    'setReserveFactor(uint256)': FunctionFragment
    'setXtkFeeFactor(uint256)': FunctionFragment
    'supply(uint256)': FunctionFragment
    'totalBorrows()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpauseContract()': FunctionFragment
    'updatedBorrowBy(address)': FunctionFragment
    'utilizationRate()': FunctionFragment
    'withdraw(uint256)': FunctionFragment
    'withdrawFees(address)': FunctionFragment
    'xtkEarns()': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'borrow', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'borrowRate', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'borrowRatePerBlock',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'comptroller',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'currentLiquidity',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getBaseBorrowRate',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getLPTBaseValue',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getLPTValue',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getLiquidationPenaltyFactor',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getMinimumLoanValue',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getOptimalUtilizationRate',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getReserveFactor',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'getSlope1', values?: undefined): string
  encodeFunctionData(functionFragment: 'getSlope2', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getXtkFeeFactor',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string
  encodeFunctionData(
    functionFragment: 'lastLockedBlock',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'liquidate',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'liquidateWithPreference',
    values: [string, BigNumberish, string[]]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'pauseContract',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(functionFragment: 'payAll', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'repay', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'reserves', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setComptroller',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'setInterestModelParameters',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setLPTBaseValue',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setLiquidationPenaltyFactor',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setLiquidityPoolToken',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'setMinimumLoanValue',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setReserveFactor',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setXtkFeeFactor',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'supply', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'totalBorrows',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'unpauseContract',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'updatedBorrowBy',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'utilizationRate',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'withdrawFees', values: [string]): string
  encodeFunctionData(functionFragment: 'xtkEarns', values?: undefined): string

  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'borrowRate', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'borrowRatePerBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'comptroller', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'currentLiquidity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getBaseBorrowRate',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLPTBaseValue',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getLPTValue', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getLiquidationPenaltyFactor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getMinimumLoanValue',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getOptimalUtilizationRate',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getReserveFactor',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getSlope1', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getSlope2', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getXtkFeeFactor',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lastLockedBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'liquidateWithPreference',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'pauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'payAll', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'reserves', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setComptroller',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setInterestModelParameters',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setLPTBaseValue',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setLiquidationPenaltyFactor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setLiquidityPoolToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setMinimumLoanValue',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setReserveFactor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setXtkFeeFactor',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'supply', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'totalBorrows',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'unpauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updatedBorrowBy',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'utilizationRate',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'withdrawFees',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'xtkEarns', data: BytesLike): Result

  events: {
    'BorrowEvent(address,uint256,uint256)': EventFragment
    'LiquidateEvent(address,address,uint256,address[])': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'RepayEvent(address,uint256,uint256)': EventFragment
    'Unpaused(address)': EventFragment
    'UpdateComptroller(address)': EventFragment
    'UpdateInterestModelParameters(uint256,uint256,uint256,uint256)': EventFragment
    'UpdateLPTBaseValue(uint256)': EventFragment
    'UpdateLiquidationPenaltyFactor(uint256)': EventFragment
    'UpdateLiquidityPoolToken(address)': EventFragment
    'UpdateMiniumLoanValue(uint256)': EventFragment
    'UpdateReserveFeeFactor(uint256)': EventFragment
    'UpdateXtkFeeFactor(uint256)': EventFragment
    'WithdrawFee(address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'BorrowEvent'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LiquidateEvent'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RepayEvent'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateComptroller'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'UpdateInterestModelParameters'
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateLPTBaseValue'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'UpdateLiquidationPenaltyFactor'
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateLiquidityPoolToken'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateMiniumLoanValue'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateReserveFeeFactor'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateXtkFeeFactor'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WithdrawFee'): EventFragment
}

export class LiquidityPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: LiquidityPoolInterface

  functions: {
    borrow(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'borrow(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    borrowRate(overrides?: CallOverrides): Promise<[BigNumber]>

    'borrowRate()'(overrides?: CallOverrides): Promise<[BigNumber]>

    borrowRatePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    'borrowRatePerBlock()'(overrides?: CallOverrides): Promise<[BigNumber]>

    comptroller(overrides?: CallOverrides): Promise<[string]>

    'comptroller()'(overrides?: CallOverrides): Promise<[string]>

    currentLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>

    'currentLiquidity()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getBaseBorrowRate(overrides?: CallOverrides): Promise<[BigNumber]>

    'getBaseBorrowRate()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getLPTBaseValue(overrides?: CallOverrides): Promise<[BigNumber]>

    'getLPTBaseValue()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getLPTValue(overrides?: CallOverrides): Promise<[BigNumber]>

    'getLPTValue()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getLiquidationPenaltyFactor(overrides?: CallOverrides): Promise<[BigNumber]>

    'getLiquidationPenaltyFactor()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getMinimumLoanValue(overrides?: CallOverrides): Promise<[BigNumber]>

    'getMinimumLoanValue()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getOptimalUtilizationRate(overrides?: CallOverrides): Promise<[BigNumber]>

    'getOptimalUtilizationRate()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getReserveFactor(overrides?: CallOverrides): Promise<[BigNumber]>

    'getReserveFactor()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getSlope1(overrides?: CallOverrides): Promise<[BigNumber]>

    'getSlope1()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getSlope2(overrides?: CallOverrides): Promise<[BigNumber]>

    'getSlope2()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getXtkFeeFactor(overrides?: CallOverrides): Promise<[BigNumber]>

    'getXtkFeeFactor()'(overrides?: CallOverrides): Promise<[BigNumber]>

    initialize(
      _stableCoin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(address)'(
      _stableCoin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    lastLockedBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    liquidate(
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'liquidate(address,uint256)'(
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    liquidateWithPreference(
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'liquidateWithPreference(address,uint256,address[])'(
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    pauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>

    payAll(overrides?: Overrides): Promise<ContractTransaction>

    'payAll()'(overrides?: Overrides): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    repay(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'repay(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    reserves(overrides?: CallOverrides): Promise<[BigNumber]>

    'reserves()'(overrides?: CallOverrides): Promise<[BigNumber]>

    setComptroller(
      _comptroller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setComptroller(address)'(
      _comptroller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setInterestModelParameters(
      _optimalUtilizationRate: BigNumberish,
      _baseBorrowRate: BigNumberish,
      _slope1: BigNumberish,
      _slope2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setInterestModelParameters(uint256,uint256,uint256,uint256)'(
      _optimalUtilizationRate: BigNumberish,
      _baseBorrowRate: BigNumberish,
      _slope1: BigNumberish,
      _slope2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setLPTBaseValue(
      _lptBaseValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setLPTBaseValue(uint256)'(
      _lptBaseValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setLiquidationPenaltyFactor(
      _liquidityPenaltyFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setLiquidationPenaltyFactor(uint256)'(
      _liquidityPenaltyFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setLiquidityPoolToken(
      _liquidityPoolToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setLiquidityPoolToken(address)'(
      _liquidityPoolToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setMinimumLoanValue(
      _minimumLoanValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setMinimumLoanValue(uint256)'(
      _minimumLoanValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setReserveFactor(
      _reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setReserveFactor(uint256)'(
      _reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setXtkFeeFactor(
      _xtkFeeFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setXtkFeeFactor(uint256)'(
      _xtkFeeFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    supply(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'supply(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    totalBorrows(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalBorrows()'(overrides?: CallOverrides): Promise<[BigNumber]>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    updatedBorrowBy(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'updatedBorrowBy(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    utilizationRate(overrides?: CallOverrides): Promise<[BigNumber]>

    'utilizationRate()'(overrides?: CallOverrides): Promise<[BigNumber]>

    withdraw(
      _lptAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdraw(uint256)'(
      _lptAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    withdrawFees(
      _recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdrawFees(address)'(
      _recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    xtkEarns(overrides?: CallOverrides): Promise<[BigNumber]>

    'xtkEarns()'(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  borrow(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'borrow(uint256)'(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  borrowRate(overrides?: CallOverrides): Promise<BigNumber>

  'borrowRate()'(overrides?: CallOverrides): Promise<BigNumber>

  borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>

  'borrowRatePerBlock()'(overrides?: CallOverrides): Promise<BigNumber>

  comptroller(overrides?: CallOverrides): Promise<string>

  'comptroller()'(overrides?: CallOverrides): Promise<string>

  currentLiquidity(overrides?: CallOverrides): Promise<BigNumber>

  'currentLiquidity()'(overrides?: CallOverrides): Promise<BigNumber>

  getBaseBorrowRate(overrides?: CallOverrides): Promise<BigNumber>

  'getBaseBorrowRate()'(overrides?: CallOverrides): Promise<BigNumber>

  getLPTBaseValue(overrides?: CallOverrides): Promise<BigNumber>

  'getLPTBaseValue()'(overrides?: CallOverrides): Promise<BigNumber>

  getLPTValue(overrides?: CallOverrides): Promise<BigNumber>

  'getLPTValue()'(overrides?: CallOverrides): Promise<BigNumber>

  getLiquidationPenaltyFactor(overrides?: CallOverrides): Promise<BigNumber>

  'getLiquidationPenaltyFactor()'(overrides?: CallOverrides): Promise<BigNumber>

  getMinimumLoanValue(overrides?: CallOverrides): Promise<BigNumber>

  'getMinimumLoanValue()'(overrides?: CallOverrides): Promise<BigNumber>

  getOptimalUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>

  'getOptimalUtilizationRate()'(overrides?: CallOverrides): Promise<BigNumber>

  getReserveFactor(overrides?: CallOverrides): Promise<BigNumber>

  'getReserveFactor()'(overrides?: CallOverrides): Promise<BigNumber>

  getSlope1(overrides?: CallOverrides): Promise<BigNumber>

  'getSlope1()'(overrides?: CallOverrides): Promise<BigNumber>

  getSlope2(overrides?: CallOverrides): Promise<BigNumber>

  'getSlope2()'(overrides?: CallOverrides): Promise<BigNumber>

  getXtkFeeFactor(overrides?: CallOverrides): Promise<BigNumber>

  'getXtkFeeFactor()'(overrides?: CallOverrides): Promise<BigNumber>

  initialize(
    _stableCoin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(address)'(
    _stableCoin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'lastLockedBlock(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  liquidate(
    _borrower: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'liquidate(address,uint256)'(
    _borrower: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  liquidateWithPreference(
    _borrower: string,
    _amount: BigNumberish,
    _markets: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'liquidateWithPreference(address,uint256,address[])'(
    _borrower: string,
    _amount: BigNumberish,
    _markets: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  pauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  'paused()'(overrides?: CallOverrides): Promise<boolean>

  payAll(overrides?: Overrides): Promise<ContractTransaction>

  'payAll()'(overrides?: Overrides): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  repay(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'repay(uint256)'(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  reserves(overrides?: CallOverrides): Promise<BigNumber>

  'reserves()'(overrides?: CallOverrides): Promise<BigNumber>

  setComptroller(
    _comptroller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setComptroller(address)'(
    _comptroller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setInterestModelParameters(
    _optimalUtilizationRate: BigNumberish,
    _baseBorrowRate: BigNumberish,
    _slope1: BigNumberish,
    _slope2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setInterestModelParameters(uint256,uint256,uint256,uint256)'(
    _optimalUtilizationRate: BigNumberish,
    _baseBorrowRate: BigNumberish,
    _slope1: BigNumberish,
    _slope2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setLPTBaseValue(
    _lptBaseValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setLPTBaseValue(uint256)'(
    _lptBaseValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setLiquidationPenaltyFactor(
    _liquidityPenaltyFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setLiquidationPenaltyFactor(uint256)'(
    _liquidityPenaltyFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setLiquidityPoolToken(
    _liquidityPoolToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setLiquidityPoolToken(address)'(
    _liquidityPoolToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setMinimumLoanValue(
    _minimumLoanValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setMinimumLoanValue(uint256)'(
    _minimumLoanValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setReserveFactor(
    _reserveFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setReserveFactor(uint256)'(
    _reserveFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setXtkFeeFactor(
    _xtkFeeFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setXtkFeeFactor(uint256)'(
    _xtkFeeFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  supply(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'supply(uint256)'(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  totalBorrows(overrides?: CallOverrides): Promise<BigNumber>

  'totalBorrows()'(overrides?: CallOverrides): Promise<BigNumber>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  updatedBorrowBy(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'updatedBorrowBy(address)'(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  utilizationRate(overrides?: CallOverrides): Promise<BigNumber>

  'utilizationRate()'(overrides?: CallOverrides): Promise<BigNumber>

  withdraw(
    _lptAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdraw(uint256)'(
    _lptAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  withdrawFees(
    _recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdrawFees(address)'(
    _recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  xtkEarns(overrides?: CallOverrides): Promise<BigNumber>

  'xtkEarns()'(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    borrow(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    'borrow(uint256)'(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    borrowRate(overrides?: CallOverrides): Promise<BigNumber>

    'borrowRate()'(overrides?: CallOverrides): Promise<BigNumber>

    borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>

    'borrowRatePerBlock()'(overrides?: CallOverrides): Promise<BigNumber>

    comptroller(overrides?: CallOverrides): Promise<string>

    'comptroller()'(overrides?: CallOverrides): Promise<string>

    currentLiquidity(overrides?: CallOverrides): Promise<BigNumber>

    'currentLiquidity()'(overrides?: CallOverrides): Promise<BigNumber>

    getBaseBorrowRate(overrides?: CallOverrides): Promise<BigNumber>

    'getBaseBorrowRate()'(overrides?: CallOverrides): Promise<BigNumber>

    getLPTBaseValue(overrides?: CallOverrides): Promise<BigNumber>

    'getLPTBaseValue()'(overrides?: CallOverrides): Promise<BigNumber>

    getLPTValue(overrides?: CallOverrides): Promise<BigNumber>

    'getLPTValue()'(overrides?: CallOverrides): Promise<BigNumber>

    getLiquidationPenaltyFactor(overrides?: CallOverrides): Promise<BigNumber>

    'getLiquidationPenaltyFactor()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getMinimumLoanValue(overrides?: CallOverrides): Promise<BigNumber>

    'getMinimumLoanValue()'(overrides?: CallOverrides): Promise<BigNumber>

    getOptimalUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>

    'getOptimalUtilizationRate()'(overrides?: CallOverrides): Promise<BigNumber>

    getReserveFactor(overrides?: CallOverrides): Promise<BigNumber>

    'getReserveFactor()'(overrides?: CallOverrides): Promise<BigNumber>

    getSlope1(overrides?: CallOverrides): Promise<BigNumber>

    'getSlope1()'(overrides?: CallOverrides): Promise<BigNumber>

    getSlope2(overrides?: CallOverrides): Promise<BigNumber>

    'getSlope2()'(overrides?: CallOverrides): Promise<BigNumber>

    getXtkFeeFactor(overrides?: CallOverrides): Promise<BigNumber>

    'getXtkFeeFactor()'(overrides?: CallOverrides): Promise<BigNumber>

    initialize(_stableCoin: string, overrides?: CallOverrides): Promise<void>

    'initialize(address)'(
      _stableCoin: string,
      overrides?: CallOverrides
    ): Promise<void>

    lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    liquidate(
      _borrower: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'liquidate(address,uint256)'(
      _borrower: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    liquidateWithPreference(
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: CallOverrides
    ): Promise<void>

    'liquidateWithPreference(address,uint256,address[])'(
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: CallOverrides
    ): Promise<void>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    pauseContract(overrides?: CallOverrides): Promise<void>

    'pauseContract()'(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    'paused()'(overrides?: CallOverrides): Promise<boolean>

    payAll(overrides?: CallOverrides): Promise<void>

    'payAll()'(overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    repay(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    'repay(uint256)'(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    reserves(overrides?: CallOverrides): Promise<BigNumber>

    'reserves()'(overrides?: CallOverrides): Promise<BigNumber>

    setComptroller(
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setComptroller(address)'(
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<void>

    setInterestModelParameters(
      _optimalUtilizationRate: BigNumberish,
      _baseBorrowRate: BigNumberish,
      _slope1: BigNumberish,
      _slope2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setInterestModelParameters(uint256,uint256,uint256,uint256)'(
      _optimalUtilizationRate: BigNumberish,
      _baseBorrowRate: BigNumberish,
      _slope1: BigNumberish,
      _slope2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setLPTBaseValue(
      _lptBaseValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setLPTBaseValue(uint256)'(
      _lptBaseValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setLiquidationPenaltyFactor(
      _liquidityPenaltyFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setLiquidationPenaltyFactor(uint256)'(
      _liquidityPenaltyFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setLiquidityPoolToken(
      _liquidityPoolToken: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setLiquidityPoolToken(address)'(
      _liquidityPoolToken: string,
      overrides?: CallOverrides
    ): Promise<void>

    setMinimumLoanValue(
      _minimumLoanValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setMinimumLoanValue(uint256)'(
      _minimumLoanValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setReserveFactor(
      _reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setReserveFactor(uint256)'(
      _reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setXtkFeeFactor(
      _xtkFeeFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setXtkFeeFactor(uint256)'(
      _xtkFeeFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    supply(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    'supply(uint256)'(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>

    'totalBorrows()'(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    unpauseContract(overrides?: CallOverrides): Promise<void>

    'unpauseContract()'(overrides?: CallOverrides): Promise<void>

    updatedBorrowBy(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'updatedBorrowBy(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    utilizationRate(overrides?: CallOverrides): Promise<BigNumber>

    'utilizationRate()'(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(_lptAmount: BigNumberish, overrides?: CallOverrides): Promise<void>

    'withdraw(uint256)'(
      _lptAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawFees(_recipient: string, overrides?: CallOverrides): Promise<void>

    'withdrawFees(address)'(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>

    xtkEarns(overrides?: CallOverrides): Promise<BigNumber>

    'xtkEarns()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    BorrowEvent(
      borrower: string | null,
      borrowAmount: null,
      debtAmount: null
    ): EventFilter

    LiquidateEvent(
      borrower: string | null,
      liquidator: string | null,
      amount: null,
      markets: null
    ): EventFilter

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter

    Paused(account: null): EventFilter

    RepayEvent(
      borrower: string | null,
      repayAmount: null,
      debtAmount: null
    ): EventFilter

    Unpaused(account: null): EventFilter

    UpdateComptroller(comptroller: string | null): EventFilter

    UpdateInterestModelParameters(
      optimalUtilizationRate: null,
      baseBorrowRate: null,
      slope1: null,
      slope2: null
    ): EventFilter

    UpdateLPTBaseValue(lptBaseValue: null): EventFilter

    UpdateLiquidationPenaltyFactor(liquidityPenaltyFactor: null): EventFilter

    UpdateLiquidityPoolToken(liquidityPoolToken: string | null): EventFilter

    UpdateMiniumLoanValue(minimumLoanValue: null): EventFilter

    UpdateReserveFeeFactor(reserveFactor: null): EventFilter

    UpdateXtkFeeFactor(xtkFeeFactor: null): EventFilter

    WithdrawFee(recipient: string | null, xtkEarns: null): EventFilter
  }

  estimateGas: {
    borrow(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'borrow(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    borrowRate(overrides?: CallOverrides): Promise<BigNumber>

    'borrowRate()'(overrides?: CallOverrides): Promise<BigNumber>

    borrowRatePerBlock(overrides?: CallOverrides): Promise<BigNumber>

    'borrowRatePerBlock()'(overrides?: CallOverrides): Promise<BigNumber>

    comptroller(overrides?: CallOverrides): Promise<BigNumber>

    'comptroller()'(overrides?: CallOverrides): Promise<BigNumber>

    currentLiquidity(overrides?: CallOverrides): Promise<BigNumber>

    'currentLiquidity()'(overrides?: CallOverrides): Promise<BigNumber>

    getBaseBorrowRate(overrides?: CallOverrides): Promise<BigNumber>

    'getBaseBorrowRate()'(overrides?: CallOverrides): Promise<BigNumber>

    getLPTBaseValue(overrides?: CallOverrides): Promise<BigNumber>

    'getLPTBaseValue()'(overrides?: CallOverrides): Promise<BigNumber>

    getLPTValue(overrides?: CallOverrides): Promise<BigNumber>

    'getLPTValue()'(overrides?: CallOverrides): Promise<BigNumber>

    getLiquidationPenaltyFactor(overrides?: CallOverrides): Promise<BigNumber>

    'getLiquidationPenaltyFactor()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getMinimumLoanValue(overrides?: CallOverrides): Promise<BigNumber>

    'getMinimumLoanValue()'(overrides?: CallOverrides): Promise<BigNumber>

    getOptimalUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>

    'getOptimalUtilizationRate()'(overrides?: CallOverrides): Promise<BigNumber>

    getReserveFactor(overrides?: CallOverrides): Promise<BigNumber>

    'getReserveFactor()'(overrides?: CallOverrides): Promise<BigNumber>

    getSlope1(overrides?: CallOverrides): Promise<BigNumber>

    'getSlope1()'(overrides?: CallOverrides): Promise<BigNumber>

    getSlope2(overrides?: CallOverrides): Promise<BigNumber>

    'getSlope2()'(overrides?: CallOverrides): Promise<BigNumber>

    getXtkFeeFactor(overrides?: CallOverrides): Promise<BigNumber>

    'getXtkFeeFactor()'(overrides?: CallOverrides): Promise<BigNumber>

    initialize(_stableCoin: string, overrides?: Overrides): Promise<BigNumber>

    'initialize(address)'(
      _stableCoin: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    liquidate(
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'liquidate(address,uint256)'(
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    liquidateWithPreference(
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'liquidateWithPreference(address,uint256,address[])'(
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: Overrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    pauseContract(overrides?: Overrides): Promise<BigNumber>

    'pauseContract()'(overrides?: Overrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>

    payAll(overrides?: Overrides): Promise<BigNumber>

    'payAll()'(overrides?: Overrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    repay(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'repay(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    reserves(overrides?: CallOverrides): Promise<BigNumber>

    'reserves()'(overrides?: CallOverrides): Promise<BigNumber>

    setComptroller(
      _comptroller: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setComptroller(address)'(
      _comptroller: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setInterestModelParameters(
      _optimalUtilizationRate: BigNumberish,
      _baseBorrowRate: BigNumberish,
      _slope1: BigNumberish,
      _slope2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setInterestModelParameters(uint256,uint256,uint256,uint256)'(
      _optimalUtilizationRate: BigNumberish,
      _baseBorrowRate: BigNumberish,
      _slope1: BigNumberish,
      _slope2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setLPTBaseValue(
      _lptBaseValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setLPTBaseValue(uint256)'(
      _lptBaseValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setLiquidationPenaltyFactor(
      _liquidityPenaltyFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setLiquidationPenaltyFactor(uint256)'(
      _liquidityPenaltyFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setLiquidityPoolToken(
      _liquidityPoolToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setLiquidityPoolToken(address)'(
      _liquidityPoolToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setMinimumLoanValue(
      _minimumLoanValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setMinimumLoanValue(uint256)'(
      _minimumLoanValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setReserveFactor(
      _reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setReserveFactor(uint256)'(
      _reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setXtkFeeFactor(
      _xtkFeeFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setXtkFeeFactor(uint256)'(
      _xtkFeeFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    supply(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'supply(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    totalBorrows(overrides?: CallOverrides): Promise<BigNumber>

    'totalBorrows()'(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    unpauseContract(overrides?: Overrides): Promise<BigNumber>

    'unpauseContract()'(overrides?: Overrides): Promise<BigNumber>

    updatedBorrowBy(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'updatedBorrowBy(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    utilizationRate(overrides?: CallOverrides): Promise<BigNumber>

    'utilizationRate()'(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(
      _lptAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'withdraw(uint256)'(
      _lptAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    withdrawFees(_recipient: string, overrides?: Overrides): Promise<BigNumber>

    'withdrawFees(address)'(
      _recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    xtkEarns(overrides?: CallOverrides): Promise<BigNumber>

    'xtkEarns()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    borrow(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'borrow(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    borrowRate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'borrowRate()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    borrowRatePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'borrowRatePerBlock()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    comptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'comptroller()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    currentLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'currentLiquidity()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getBaseBorrowRate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getBaseBorrowRate()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLPTBaseValue(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getLPTBaseValue()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLPTValue(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getLPTValue()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getLiquidationPenaltyFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getLiquidationPenaltyFactor()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getMinimumLoanValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getMinimumLoanValue()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getOptimalUtilizationRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getOptimalUtilizationRate()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getReserveFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getReserveFactor()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getSlope1(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getSlope1()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getSlope2(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getSlope2()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getXtkFeeFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getXtkFeeFactor()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(
      _stableCoin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(address)'(
      _stableCoin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    lastLockedBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    liquidate(
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'liquidate(address,uint256)'(
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    liquidateWithPreference(
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'liquidateWithPreference(address,uint256,address[])'(
      _borrower: string,
      _amount: BigNumberish,
      _markets: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    payAll(overrides?: Overrides): Promise<PopulatedTransaction>

    'payAll()'(overrides?: Overrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    repay(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'repay(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    reserves(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'reserves()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setComptroller(
      _comptroller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setComptroller(address)'(
      _comptroller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setInterestModelParameters(
      _optimalUtilizationRate: BigNumberish,
      _baseBorrowRate: BigNumberish,
      _slope1: BigNumberish,
      _slope2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setInterestModelParameters(uint256,uint256,uint256,uint256)'(
      _optimalUtilizationRate: BigNumberish,
      _baseBorrowRate: BigNumberish,
      _slope1: BigNumberish,
      _slope2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setLPTBaseValue(
      _lptBaseValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setLPTBaseValue(uint256)'(
      _lptBaseValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setLiquidationPenaltyFactor(
      _liquidityPenaltyFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setLiquidationPenaltyFactor(uint256)'(
      _liquidityPenaltyFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setLiquidityPoolToken(
      _liquidityPoolToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setLiquidityPoolToken(address)'(
      _liquidityPoolToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setMinimumLoanValue(
      _minimumLoanValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setMinimumLoanValue(uint256)'(
      _minimumLoanValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setReserveFactor(
      _reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setReserveFactor(uint256)'(
      _reserveFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setXtkFeeFactor(
      _xtkFeeFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setXtkFeeFactor(uint256)'(
      _xtkFeeFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    supply(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'supply(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    totalBorrows(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalBorrows()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    unpauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    updatedBorrowBy(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'updatedBorrowBy(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    utilizationRate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'utilizationRate()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    withdraw(
      _lptAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdraw(uint256)'(
      _lptAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    withdrawFees(
      _recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdrawFees(address)'(
      _recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    xtkEarns(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'xtkEarns()'(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
