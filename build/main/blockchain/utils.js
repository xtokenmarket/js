'use strict'
Object.defineProperty(exports, '__esModule', { value: true })
exports.toTitleCase = exports.getSignerAddress = exports.getSigner = exports.getUniswapPoolContract = exports.getUniswapPoolAddress = exports.getExchangeRateContract = exports.getUserAvailableTokenBalance = exports.getTokenBalance = exports.parseFees = exports.getLPTokenSymbol = exports.getTokenSymbol = exports.getKyberPoolContract = exports.getKyberPoolAddress = exports.getInchPoolContract = exports.getInchPoolAddress = exports.getExpectedRate = exports.getContract = exports.getBancorPoolContract = exports.getBancorPoolAddress = exports.getBalancerPoolContract = exports.getBalancerPoolAddress = exports.getAbi = exports.capitalizeToken = void 0
const abis_1 = require('@xtoken/abis')
const ethers_1 = require('ethers')
const constants_1 = require('../constants')
const { formatEther, parseEther } = ethers_1.ethers.utils
const capitalizeToken = (symbol) => {
  if (![abis_1.REN_BTC, abis_1.S_ETH, abis_1.S_USD].includes(symbol)) {
    return symbol.toUpperCase()
  }
  return symbol
}
exports.capitalizeToken = capitalizeToken
const getAbi = (contractName) => {
  switch (contractName) {
    case abis_1.AAVE:
    case abis_1.BNT:
    case abis_1.BUSD:
    case abis_1.INCH:
    case abis_1.KNC:
    case abis_1.DAI:
    case abis_1.FRAX:
    case abis_1.REN_BTC:
    case abis_1.S_ETH:
    case abis_1.S_USD:
    case abis_1.USDC:
    case abis_1.USDT:
    case abis_1.UST:
    case abis_1.WBTC:
    case abis_1.WETH:
      return abis_1.Abi.ERC20
    case abis_1.EXCHANGE_RATES:
      return abis_1.Abi.ExchangeRates
    case abis_1.INCH_LIQUIDITY_PROTOCOL:
      return abis_1.Abi.InchLiquidityProtocol
    case abis_1.KYBER_PROXY:
      return abis_1.Abi.KyberProxy
    case abis_1.SNX:
      return abis_1.Abi.Synthetix
    case abis_1.TRADE_ACCOUNTING:
      return abis_1.Abi.TradeAccounting
    case abis_1.UNISWAP_V2_PAIR:
      return abis_1.Abi.UniswapV2Pair
    case abis_1.X_AAVE_A:
    case abis_1.X_AAVE_B:
      return abis_1.Abi.xAAVE
    case abis_1.X_BNT_A:
      return abis_1.Abi.xBNT
    case abis_1.X_INCH_A:
    case abis_1.X_INCH_B:
      return abis_1.Abi.xINCH
    case abis_1.X_KNC_A:
    case abis_1.X_KNC_B:
      return abis_1.Abi.xKNC
    case abis_1.X_SNX_A:
      return abis_1.Abi.xSNX
    case abis_1.X_U3LP_A:
    case abis_1.X_U3LP_B:
    case abis_1.X_U3LP_C:
    case abis_1.X_U3LP_D:
    case abis_1.X_U3LP_E:
    case abis_1.X_U3LP_F:
    case abis_1.X_U3LP_G:
    case abis_1.X_U3LP_H:
      return abis_1.Abi.xU3LP
    case abis_1.XTK_MANAGEMENT_STAKING_MODULE:
      return abis_1.Abi.XTKManagementStakingModule
    case abis_1.LENDING_COMPTROLLER:
      return abis_1.Abi.Comptroller
    case abis_1.LENDING_LIQUIDITY_POOL:
      return abis_1.Abi.LiquidityPool
    case abis_1.LENDING_LPT:
      return abis_1.Abi.LPT
    case abis_1.LENDING_X_AAVE_A_MARKET:
    case abis_1.LENDING_X_AAVE_B_MARKET:
    case abis_1.LENDING_X_INCH_A_MARKET:
    case abis_1.LENDING_X_INCH_B_MARKET:
    case abis_1.LENDING_X_KNC_A_MARKET:
    case abis_1.LENDING_X_KNC_B_MARKET:
      return abis_1.Abi.Market
    case abis_1.LENDING_X_AAVE_A_PRICE:
    case abis_1.LENDING_X_AAVE_B_PRICE:
      return abis_1.Abi.xAAVEPrice
    case abis_1.LENDING_X_INCH_A_PRICE:
    case abis_1.LENDING_X_INCH_B_PRICE:
      return abis_1.Abi.xINCHPrice
    case abis_1.LENDING_X_KNC_A_PRICE:
    case abis_1.LENDING_X_KNC_B_PRICE:
      return abis_1.Abi.xKNCPrice
  }
}
exports.getAbi = getAbi
const getBalancerPoolAddress = (symbol, chainId) => {
  let address
  switch (symbol) {
    case abis_1.X_AAVE_A:
      address = abis_1.ADDRESSES[abis_1.X_AAVE_A_BALANCER_POOL][chainId]
      break
    case abis_1.X_AAVE_B:
      address = abis_1.ADDRESSES[abis_1.X_AAVE_B_BALANCER_POOL][chainId]
      break
    case abis_1.X_SNX_A:
      address = abis_1.ADDRESSES[abis_1.X_SNX_A_BALANCER_POOL_V2][chainId]
      break
    default:
      address = null
  }
  return address
}
exports.getBalancerPoolAddress = getBalancerPoolAddress
const getBalancerPoolContract = (symbol, provider, chainId) => {
  if (!provider || !symbol) return null
  const address = exports.getBalancerPoolAddress(symbol, chainId)
  if (!address) return null
  return new ethers_1.ethers.Contract(
    address,
    abis_1.Abi.BalancerPool,
    exports.getSigner(provider)
  )
}
exports.getBalancerPoolContract = getBalancerPoolContract
const getBancorPoolAddress = (symbol, chainId) => {
  let address
  switch (symbol) {
    case abis_1.X_BNT_A:
      address = abis_1.ADDRESSES[abis_1.X_BNT_A_BANCOR_POOL][chainId]
      break
    default:
      address = null
  }
  return address
}
exports.getBancorPoolAddress = getBancorPoolAddress
const getBancorPoolContract = (symbol, provider, chainId) => {
  if (!provider || !symbol) return null
  const address = exports.getBancorPoolAddress(symbol, chainId)
  if (!address) return null
  return new ethers_1.ethers.Contract(
    address,
    abis_1.Abi.BancorSmartToken,
    exports.getSigner(provider)
  )
}
exports.getBancorPoolContract = getBancorPoolContract
const getContract = (contractName, provider, network) => {
  if (!provider) return null
  const address = abis_1.ADDRESSES[contractName][network.chainId]
  if (!address) return null
  return new ethers_1.ethers.Contract(
    address,
    exports.getAbi(contractName),
    exports.getSigner(provider)
  )
}
exports.getContract = getContract
const getExpectedRate = async (
  kyberProxyContract,
  inputAsset,
  outputAsset,
  amount,
  isMinRate = false
) => {
  if (isMinRate) {
    return constants_1.ZERO_NUMBER
  }
  const { expectedRate } = await kyberProxyContract.getExpectedRate(
    inputAsset,
    outputAsset,
    amount
  )
  return expectedRate
}
exports.getExpectedRate = getExpectedRate
const getInchPoolAddress = (symbol, chainId) => {
  let address
  switch (symbol) {
    case abis_1.X_INCH_A:
      address = abis_1.ADDRESSES[abis_1.X_INCH_A_INCH_POOL][chainId]
      break
    case abis_1.X_INCH_B:
      address = abis_1.ADDRESSES[abis_1.X_INCH_B_INCH_POOL][chainId]
      break
    default:
      address = null
  }
  return address
}
exports.getInchPoolAddress = getInchPoolAddress
const getInchPoolContract = (symbol, provider, chainId) => {
  if (!provider || !symbol) return null
  const address = exports.getInchPoolAddress(symbol, chainId)
  return new ethers_1.ethers.Contract(
    address,
    abis_1.Abi.InchLiquidityProtocol,
    exports.getSigner(provider)
  )
}
exports.getInchPoolContract = getInchPoolContract
const getKyberPoolAddress = (symbol, chainId) => {
  let address
  switch (symbol) {
    case abis_1.X_KNC_A:
      address = abis_1.ADDRESSES[abis_1.X_KNC_A_KYBER_POOL][chainId]
      break
    default:
      address = null
  }
  return address
}
exports.getKyberPoolAddress = getKyberPoolAddress
const getKyberPoolContract = (symbol, provider, chainId) => {
  if (!provider || !symbol) return null
  const address = exports.getKyberPoolAddress(symbol, chainId)
  return new ethers_1.ethers.Contract(
    address,
    abis_1.Abi.DMMPool,
    exports.getSigner(provider)
  )
}
exports.getKyberPoolContract = getKyberPoolContract
const getTokenSymbol = (symbol) => {
  switch (symbol) {
    case abis_1.X_AAVE_A:
    case abis_1.X_AAVE_B:
      return abis_1.AAVE
    case abis_1.X_BNT_A:
      return abis_1.BNT
    case abis_1.X_INCH_A:
    case abis_1.X_INCH_B:
      return abis_1.INCH
    case abis_1.X_KNC_A:
    case abis_1.X_KNC_B:
      return abis_1.KNC
    case abis_1.X_SNX_A:
      return abis_1.SNX
  }
}
exports.getTokenSymbol = getTokenSymbol
const getLPTokenSymbol = (symbol) => {
  switch (symbol) {
    case abis_1.X_U3LP_A:
      return { 0: abis_1.DAI, 1: abis_1.USDC }
    case abis_1.X_U3LP_B:
      return { 0: abis_1.USDC, 1: abis_1.USDT }
    case abis_1.X_U3LP_C:
      return { 0: abis_1.S_USD, 1: abis_1.USDC }
    case abis_1.X_U3LP_D:
      return { 0: abis_1.S_ETH, 1: abis_1.WETH }
    case abis_1.X_U3LP_E:
      return { 0: abis_1.WBTC, 1: abis_1.REN_BTC }
    case abis_1.X_U3LP_F:
      return { 0: abis_1.USDC, 1: abis_1.UST }
    case abis_1.X_U3LP_G:
      return { 0: abis_1.FRAX, 1: abis_1.USDC }
    case abis_1.X_U3LP_H:
      return { 0: abis_1.BUSD, 1: abis_1.USDT }
  }
}
exports.getLPTokenSymbol = getLPTokenSymbol
const parseFees = (fee) => {
  return parseEther(fee.isZero() ? '1' : String(1 - 1 / fee.toNumber()))
}
exports.parseFees = parseFees
const getTokenBalance = async (tokenAddress, userAddress, provider) => {
  const contract = new ethers_1.ethers.Contract(
    tokenAddress,
    abis_1.Abi.ERC20,
    provider
  )
  return contract.balanceOf(userAddress)
}
exports.getTokenBalance = getTokenBalance
const getUserAvailableTokenBalance = async (contract, address) => {
  let balance
  if (contract.address === abis_1.ADDRESSES[abis_1.SNX][1]) {
    balance = await contract.transferableSynthetix(address)
  } else {
    balance = await contract.balanceOf(address)
  }
  return Math.floor(Number(formatEther(balance.toString())) * 10000) / 10000
}
exports.getUserAvailableTokenBalance = getUserAvailableTokenBalance
const getExchangeRateContract = async (provider) => {
  if (!provider) return null
  const resolver = new ethers_1.ethers.Contract(
    abis_1.ADDRESSES[abis_1.SYNTHETIX_ADDRESS_RESOLVER][1],
    abis_1.Abi.AddressResolver,
    provider
  )
  const address = resolver.getAddress(
    ethers_1.ethers.utils.formatBytes32String('ExchangeRates')
  )
  if (!address) return null
  return new ethers_1.ethers.Contract(
    address,
    abis_1.Abi.ExchangeRates,
    exports.getSigner(provider)
  )
}
exports.getExchangeRateContract = getExchangeRateContract
const getUniswapPoolAddress = (symbol, chainId) => {
  let address
  switch (symbol) {
    case abis_1.X_KNC_A:
      address = abis_1.ADDRESSES[abis_1.X_KNC_A_UNISWAP_POOL][chainId]
      break
    case abis_1.X_KNC_B:
      address = abis_1.ADDRESSES[abis_1.X_KNC_B_UNISWAP_POOL][chainId]
      break
    default:
      address = null
  }
  return address
}
exports.getUniswapPoolAddress = getUniswapPoolAddress
const getUniswapPoolContract = (symbol, provider, chainId) => {
  if (!provider || !symbol) return null
  const address = exports.getUniswapPoolAddress(symbol, chainId)
  return new ethers_1.ethers.Contract(
    address,
    abis_1.Abi.UniswapV2Pair,
    exports.getSigner(provider)
  )
}
exports.getUniswapPoolContract = getUniswapPoolContract
const getSigner = (provider) => {
  try {
    return provider.getSigner()
  } catch (e) {
    return provider
  }
}
exports.getSigner = getSigner
const getSignerAddress = async (provider) => {
  const signer = provider.getSigner()
  return signer.getAddress()
}
exports.getSignerAddress = getSignerAddress
const toTitleCase = (text) => {
  return text[0].toUpperCase() + text.slice(1).toLowerCase()
}
exports.toTitleCase = toTitleCase
//# sourceMappingURL=data:application/json;base64,
