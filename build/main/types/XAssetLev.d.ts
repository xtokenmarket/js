/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface XAssetLevInterface extends ethers.utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'baseToken()': FunctionFragment
    'blockLockExempt(address)': FunctionFragment
    'burn(uint256,bool,uint256)': FunctionFragment
    'calculateMintAmount(uint256,uint256)': FunctionFragment
    'claimFees()': FunctionFragment
    'claimableFees()': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'delever(uint256,tuple)': FunctionFragment
    'deposit(uint256)': FunctionFragment
    'executeOperation(uint256,uint256,bytes)': FunctionFragment
    'exemptFromBlockLock(address)': FunctionFragment
    'feeDivisors()': FunctionFragment
    'getBufferBalance()': FunctionFragment
    'getFundBalances()': FunctionFragment
    'getLiquidityBuffer()': FunctionFragment
    'getWithdrawableFees()': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'initialize(string,tuple,tuple,address,uint24,address,tuple,tuple,tuple)': FunctionFragment
    'lastLockedBlock(address)': FunctionFragment
    'lever(uint256,uint256,tuple)': FunctionFragment
    'liquidityBuffer()': FunctionFragment
    'mint(uint256)': FunctionFragment
    'mintWithToken(uint256)': FunctionFragment
    'name()': FunctionFragment
    'owner()': FunctionFragment
    'pauseContract()': FunctionFragment
    'paused()': FunctionFragment
    'removeBlockLockExemption(address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setFeeDivisor(tuple)': FunctionFragment
    'setLiquidityBufferActive(bool)': FunctionFragment
    'setLiquidityBufferAmount(uint256)': FunctionFragment
    'setTotalSupplyCap(uint256)': FunctionFragment
    'setUserBalanceCap(uint256)': FunctionFragment
    'supplyData()': FunctionFragment
    'symbol()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpauseContract()': FunctionFragment
    'withdraw(uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'baseToken', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'blockLockExempt',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'burn',
    values: [BigNumberish, boolean, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateMintAmount',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'claimFees', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'claimableFees',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'delever',
    values: [
      BigNumberish,
      {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'executeOperation',
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'exemptFromBlockLock',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'feeDivisors',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getBufferBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getFundBalances',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getLiquidityBuffer',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getWithdrawableFees',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      { baseToken: string; weth: string; usdc: string },
      { liquidityPool: string; market: string; price: string },
      string,
      BigNumberish,
      string,
      { mintFee: BigNumberish; burnFee: BigNumberish },
      {
        totalCap: BigNumberish
        userCap: BigNumberish
        initialSupplyMultiplier: BigNumberish
      },
      { active: boolean; amount: BigNumberish }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'lastLockedBlock',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'lever',
    values: [
      BigNumberish,
      BigNumberish,
      {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'liquidityBuffer',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'mintWithToken',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'pauseContract',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'removeBlockLockExemption',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setFeeDivisor',
    values: [{ mintFee: BigNumberish; burnFee: BigNumberish }]
  ): string
  encodeFunctionData(
    functionFragment: 'setLiquidityBufferActive',
    values: [boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'setLiquidityBufferAmount',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setTotalSupplyCap',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setUserBalanceCap',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'supplyData', values?: undefined): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'unpauseContract',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish]
  ): string

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'baseToken', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'blockLockExempt',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'calculateMintAmount',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'claimFees', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'claimableFees',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'delever', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'executeOperation',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'exemptFromBlockLock',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'feeDivisors', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getBufferBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getFundBalances',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLiquidityBuffer',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getWithdrawableFees',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lastLockedBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'lever', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'liquidityBuffer',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'mintWithToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'pauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removeBlockLockExemption',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setFeeDivisor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setLiquidityBufferActive',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setLiquidityBufferAmount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setTotalSupplyCap',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setUserBalanceCap',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'supplyData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'unpauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'CollateralDeposit(uint256)': EventFragment
    'CollateralWithdraw(uint256)': EventFragment
    'Delevered(uint256,uint256)': EventFragment
    'Levered(uint256,uint256,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CollateralDeposit'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CollateralWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Delevered'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Levered'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export class XAssetLev extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: XAssetLevInterface

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    baseToken(overrides?: CallOverrides): Promise<[string]>

    'baseToken()'(overrides?: CallOverrides): Promise<[string]>

    blockLockExempt(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    'blockLockExempt(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    burn(
      xassetAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'burn(uint256,bool,uint256)'(
      xassetAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    calculateMintAmount(
      incrementalToken: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'calculateMintAmount(uint256,uint256)'(
      incrementalToken: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    claimFees(overrides?: Overrides): Promise<ContractTransaction>

    'claimFees()'(overrides?: Overrides): Promise<ContractTransaction>

    claimableFees(overrides?: CallOverrides): Promise<[BigNumber]>

    'claimableFees()'(overrides?: CallOverrides): Promise<[BigNumber]>

    decimals(overrides?: CallOverrides): Promise<[number]>

    'decimals()'(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    delever(
      withdrawAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'delever(uint256,tuple)'(
      withdrawAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    deposit(
      depositAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'deposit(uint256)'(
      depositAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    executeOperation(
      _amount: BigNumberish,
      _fee: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'executeOperation(uint256,uint256,bytes)'(
      _amount: BigNumberish,
      _fee: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    exemptFromBlockLock(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'exemptFromBlockLock(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    feeDivisors(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { mintFee: BigNumber; burnFee: BigNumber }
    >

    'feeDivisors()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { mintFee: BigNumber; burnFee: BigNumber }
    >

    getBufferBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getFundBalances(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        marketBalance: BigNumber
        bufferBalance: BigNumber
      }
    >

    'getFundBalances()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        marketBalance: BigNumber
        bufferBalance: BigNumber
      }
    >

    getLiquidityBuffer(overrides?: CallOverrides): Promise<[BigNumber]>

    'getLiquidityBuffer()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getWithdrawableFees(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { feeAsset: string; feeAmount: BigNumber }>

    'getWithdrawableFees()'(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { feeAsset: string; feeAmount: BigNumber }>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    initialize(
      _symbol: string,
      _tokens: { baseToken: string; weth: string; usdc: string },
      _lending: { liquidityPool: string; market: string; price: string },
      _uniswapV3Router: string,
      _uniswapFee: BigNumberish,
      _xTokenManager: string,
      _feeDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      _supplyData: {
        totalCap: BigNumberish
        userCap: BigNumberish
        initialSupplyMultiplier: BigNumberish
      },
      _liquidityBuffer: { active: boolean; amount: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(string,tuple,tuple,address,uint24,address,tuple,tuple,tuple)'(
      _symbol: string,
      _tokens: { baseToken: string; weth: string; usdc: string },
      _lending: { liquidityPool: string; market: string; price: string },
      _uniswapV3Router: string,
      _uniswapFee: BigNumberish,
      _xTokenManager: string,
      _feeDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      _supplyData: {
        totalCap: BigNumberish
        userCap: BigNumberish
        initialSupplyMultiplier: BigNumberish
      },
      _liquidityBuffer: { active: boolean; amount: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    lastLockedBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    lever(
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'lever(uint256,uint256,tuple)'(
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    liquidityBuffer(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { active: boolean; amount: BigNumber }>

    'liquidityBuffer()'(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { active: boolean; amount: BigNumber }>

    mint(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'mint(uint256)'(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    mintWithToken(
      inputAssetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'mintWithToken(uint256)'(
      inputAssetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    'name()'(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    pauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>

    removeBlockLockExemption(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'removeBlockLockExemption(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    setFeeDivisor(
      newDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setFeeDivisor(tuple)'(
      newDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setLiquidityBufferActive(
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setLiquidityBufferActive(bool)'(
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setLiquidityBufferAmount(
      _liquidityBufferAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setLiquidityBufferAmount(uint256)'(
      _liquidityBufferAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setTotalSupplyCap(
      _supplyCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setTotalSupplyCap(uint256)'(
      _supplyCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setUserBalanceCap(
      _userBalanceCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setUserBalanceCap(uint256)'(
      _userBalanceCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    supplyData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalCap: BigNumber
        userCap: BigNumber
        initialSupplyMultiplier: BigNumber
      }
    >

    'supplyData()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalCap: BigNumber
        userCap: BigNumber
        initialSupplyMultiplier: BigNumber
      }
    >

    symbol(overrides?: CallOverrides): Promise<[string]>

    'symbol()'(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    withdraw(
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdraw(uint256)'(
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

  'balanceOf(address)'(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  baseToken(overrides?: CallOverrides): Promise<string>

  'baseToken()'(overrides?: CallOverrides): Promise<string>

  blockLockExempt(arg0: string, overrides?: CallOverrides): Promise<boolean>

  'blockLockExempt(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  burn(
    xassetAmount: BigNumberish,
    redeemForEth: boolean,
    minReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'burn(uint256,bool,uint256)'(
    xassetAmount: BigNumberish,
    redeemForEth: boolean,
    minReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  calculateMintAmount(
    incrementalToken: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateMintAmount(uint256,uint256)'(
    incrementalToken: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  claimFees(overrides?: Overrides): Promise<ContractTransaction>

  'claimFees()'(overrides?: Overrides): Promise<ContractTransaction>

  claimableFees(overrides?: CallOverrides): Promise<BigNumber>

  'claimableFees()'(overrides?: CallOverrides): Promise<BigNumber>

  decimals(overrides?: CallOverrides): Promise<number>

  'decimals()'(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  delever(
    withdrawAmount: BigNumberish,
    params: {
      checkNav: boolean
      multiHop: boolean
      maxNavLoss: BigNumberish
      tradePath: BytesLike
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'delever(uint256,tuple)'(
    withdrawAmount: BigNumberish,
    params: {
      checkNav: boolean
      multiHop: boolean
      maxNavLoss: BigNumberish
      tradePath: BytesLike
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  deposit(
    depositAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'deposit(uint256)'(
    depositAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  executeOperation(
    _amount: BigNumberish,
    _fee: BigNumberish,
    _params: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'executeOperation(uint256,uint256,bytes)'(
    _amount: BigNumberish,
    _fee: BigNumberish,
    _params: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  exemptFromBlockLock(
    lockAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'exemptFromBlockLock(address)'(
    lockAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  feeDivisors(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { mintFee: BigNumber; burnFee: BigNumber }
  >

  'feeDivisors()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { mintFee: BigNumber; burnFee: BigNumber }
  >

  getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

  'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

  getFundBalances(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      marketBalance: BigNumber
      bufferBalance: BigNumber
    }
  >

  'getFundBalances()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      marketBalance: BigNumber
      bufferBalance: BigNumber
    }
  >

  getLiquidityBuffer(overrides?: CallOverrides): Promise<BigNumber>

  'getLiquidityBuffer()'(overrides?: CallOverrides): Promise<BigNumber>

  getWithdrawableFees(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { feeAsset: string; feeAmount: BigNumber }>

  'getWithdrawableFees()'(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { feeAsset: string; feeAmount: BigNumber }>

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  initialize(
    _symbol: string,
    _tokens: { baseToken: string; weth: string; usdc: string },
    _lending: { liquidityPool: string; market: string; price: string },
    _uniswapV3Router: string,
    _uniswapFee: BigNumberish,
    _xTokenManager: string,
    _feeDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
    _supplyData: {
      totalCap: BigNumberish
      userCap: BigNumberish
      initialSupplyMultiplier: BigNumberish
    },
    _liquidityBuffer: { active: boolean; amount: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(string,tuple,tuple,address,uint24,address,tuple,tuple,tuple)'(
    _symbol: string,
    _tokens: { baseToken: string; weth: string; usdc: string },
    _lending: { liquidityPool: string; market: string; price: string },
    _uniswapV3Router: string,
    _uniswapFee: BigNumberish,
    _xTokenManager: string,
    _feeDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
    _supplyData: {
      totalCap: BigNumberish
      userCap: BigNumberish
      initialSupplyMultiplier: BigNumberish
    },
    _liquidityBuffer: { active: boolean; amount: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'lastLockedBlock(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  lever(
    depositAmount: BigNumberish,
    borrowAmount: BigNumberish,
    params: {
      checkNav: boolean
      multiHop: boolean
      maxNavLoss: BigNumberish
      tradePath: BytesLike
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'lever(uint256,uint256,tuple)'(
    depositAmount: BigNumberish,
    borrowAmount: BigNumberish,
    params: {
      checkNav: boolean
      multiHop: boolean
      maxNavLoss: BigNumberish
      tradePath: BytesLike
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  liquidityBuffer(
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { active: boolean; amount: BigNumber }>

  'liquidityBuffer()'(
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { active: boolean; amount: BigNumber }>

  mint(
    minReturn: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'mint(uint256)'(
    minReturn: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  mintWithToken(
    inputAssetAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'mintWithToken(uint256)'(
    inputAssetAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  pauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  'paused()'(overrides?: CallOverrides): Promise<boolean>

  removeBlockLockExemption(
    lockAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'removeBlockLockExemption(address)'(
    lockAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  setFeeDivisor(
    newDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setFeeDivisor(tuple)'(
    newDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setLiquidityBufferActive(
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setLiquidityBufferActive(bool)'(
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setLiquidityBufferAmount(
    _liquidityBufferAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setLiquidityBufferAmount(uint256)'(
    _liquidityBufferAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setTotalSupplyCap(
    _supplyCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setTotalSupplyCap(uint256)'(
    _supplyCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setUserBalanceCap(
    _userBalanceCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setUserBalanceCap(uint256)'(
    _userBalanceCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  supplyData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      totalCap: BigNumber
      userCap: BigNumber
      initialSupplyMultiplier: BigNumber
    }
  >

  'supplyData()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      totalCap: BigNumber
      userCap: BigNumber
      initialSupplyMultiplier: BigNumber
    }
  >

  symbol(overrides?: CallOverrides): Promise<string>

  'symbol()'(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferFrom(address,address,uint256)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  withdraw(
    withdrawAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdraw(uint256)'(
    withdrawAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    baseToken(overrides?: CallOverrides): Promise<string>

    'baseToken()'(overrides?: CallOverrides): Promise<string>

    blockLockExempt(arg0: string, overrides?: CallOverrides): Promise<boolean>

    'blockLockExempt(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    burn(
      xassetAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'burn(uint256,bool,uint256)'(
      xassetAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    calculateMintAmount(
      incrementalToken: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateMintAmount(uint256,uint256)'(
      incrementalToken: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    claimFees(overrides?: CallOverrides): Promise<void>

    'claimFees()'(overrides?: CallOverrides): Promise<void>

    claimableFees(overrides?: CallOverrides): Promise<BigNumber>

    'claimableFees()'(overrides?: CallOverrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<number>

    'decimals()'(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    delever(
      withdrawAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: CallOverrides
    ): Promise<void>

    'delever(uint256,tuple)'(
      withdrawAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: CallOverrides
    ): Promise<void>

    deposit(
      depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'deposit(uint256)'(
      depositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    executeOperation(
      _amount: BigNumberish,
      _fee: BigNumberish,
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'executeOperation(uint256,uint256,bytes)'(
      _amount: BigNumberish,
      _fee: BigNumberish,
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    exemptFromBlockLock(
      lockAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'exemptFromBlockLock(address)'(
      lockAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    feeDivisors(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { mintFee: BigNumber; burnFee: BigNumber }
    >

    'feeDivisors()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { mintFee: BigNumber; burnFee: BigNumber }
    >

    getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getFundBalances(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        marketBalance: BigNumber
        bufferBalance: BigNumber
      }
    >

    'getFundBalances()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        marketBalance: BigNumber
        bufferBalance: BigNumber
      }
    >

    getLiquidityBuffer(overrides?: CallOverrides): Promise<BigNumber>

    'getLiquidityBuffer()'(overrides?: CallOverrides): Promise<BigNumber>

    getWithdrawableFees(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { feeAsset: string; feeAmount: BigNumber }>

    'getWithdrawableFees()'(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { feeAsset: string; feeAmount: BigNumber }>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    initialize(
      _symbol: string,
      _tokens: { baseToken: string; weth: string; usdc: string },
      _lending: { liquidityPool: string; market: string; price: string },
      _uniswapV3Router: string,
      _uniswapFee: BigNumberish,
      _xTokenManager: string,
      _feeDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      _supplyData: {
        totalCap: BigNumberish
        userCap: BigNumberish
        initialSupplyMultiplier: BigNumberish
      },
      _liquidityBuffer: { active: boolean; amount: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(string,tuple,tuple,address,uint24,address,tuple,tuple,tuple)'(
      _symbol: string,
      _tokens: { baseToken: string; weth: string; usdc: string },
      _lending: { liquidityPool: string; market: string; price: string },
      _uniswapV3Router: string,
      _uniswapFee: BigNumberish,
      _xTokenManager: string,
      _feeDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      _supplyData: {
        totalCap: BigNumberish
        userCap: BigNumberish
        initialSupplyMultiplier: BigNumberish
      },
      _liquidityBuffer: { active: boolean; amount: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>

    lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    lever(
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: CallOverrides
    ): Promise<void>

    'lever(uint256,uint256,tuple)'(
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: CallOverrides
    ): Promise<void>

    liquidityBuffer(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { active: boolean; amount: BigNumber }>

    'liquidityBuffer()'(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { active: boolean; amount: BigNumber }>

    mint(minReturn: BigNumberish, overrides?: CallOverrides): Promise<void>

    'mint(uint256)'(
      minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    mintWithToken(
      inputAssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'mintWithToken(uint256)'(
      inputAssetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    pauseContract(overrides?: CallOverrides): Promise<void>

    'pauseContract()'(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    'paused()'(overrides?: CallOverrides): Promise<boolean>

    removeBlockLockExemption(
      lockAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'removeBlockLockExemption(address)'(
      lockAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    setFeeDivisor(
      newDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>

    'setFeeDivisor(tuple)'(
      newDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>

    setLiquidityBufferActive(
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'setLiquidityBufferActive(bool)'(
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    setLiquidityBufferAmount(
      _liquidityBufferAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setLiquidityBufferAmount(uint256)'(
      _liquidityBufferAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setTotalSupplyCap(
      _supplyCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setTotalSupplyCap(uint256)'(
      _supplyCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setUserBalanceCap(
      _userBalanceCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setUserBalanceCap(uint256)'(
      _userBalanceCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    supplyData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalCap: BigNumber
        userCap: BigNumber
        initialSupplyMultiplier: BigNumber
      }
    >

    'supplyData()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalCap: BigNumber
        userCap: BigNumber
        initialSupplyMultiplier: BigNumber
      }
    >

    symbol(overrides?: CallOverrides): Promise<string>

    'symbol()'(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    unpauseContract(overrides?: CallOverrides): Promise<void>

    'unpauseContract()'(overrides?: CallOverrides): Promise<void>

    withdraw(
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'withdraw(uint256)'(
      withdrawAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter

    CollateralDeposit(collateral: null): EventFilter

    CollateralWithdraw(collateral: null): EventFilter

    Delevered(withdrawAmount: null, swapReturn: null): EventFilter

    Levered(
      depositAmount: null,
      borrowAmount: null,
      swapReturn: null
    ): EventFilter

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter

    Paused(account: null): EventFilter

    Transfer(from: string | null, to: string | null, value: null): EventFilter

    Unpaused(account: null): EventFilter
  }

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    baseToken(overrides?: CallOverrides): Promise<BigNumber>

    'baseToken()'(overrides?: CallOverrides): Promise<BigNumber>

    blockLockExempt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'blockLockExempt(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      xassetAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'burn(uint256,bool,uint256)'(
      xassetAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    calculateMintAmount(
      incrementalToken: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateMintAmount(uint256,uint256)'(
      incrementalToken: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    claimFees(overrides?: Overrides): Promise<BigNumber>

    'claimFees()'(overrides?: Overrides): Promise<BigNumber>

    claimableFees(overrides?: CallOverrides): Promise<BigNumber>

    'claimableFees()'(overrides?: CallOverrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    delever(
      withdrawAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: Overrides
    ): Promise<BigNumber>

    'delever(uint256,tuple)'(
      withdrawAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: Overrides
    ): Promise<BigNumber>

    deposit(
      depositAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'deposit(uint256)'(
      depositAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    executeOperation(
      _amount: BigNumberish,
      _fee: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'executeOperation(uint256,uint256,bytes)'(
      _amount: BigNumberish,
      _fee: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    exemptFromBlockLock(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'exemptFromBlockLock(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    feeDivisors(overrides?: CallOverrides): Promise<BigNumber>

    'feeDivisors()'(overrides?: CallOverrides): Promise<BigNumber>

    getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getFundBalances(overrides?: CallOverrides): Promise<BigNumber>

    'getFundBalances()'(overrides?: CallOverrides): Promise<BigNumber>

    getLiquidityBuffer(overrides?: CallOverrides): Promise<BigNumber>

    'getLiquidityBuffer()'(overrides?: CallOverrides): Promise<BigNumber>

    getWithdrawableFees(overrides?: CallOverrides): Promise<BigNumber>

    'getWithdrawableFees()'(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    initialize(
      _symbol: string,
      _tokens: { baseToken: string; weth: string; usdc: string },
      _lending: { liquidityPool: string; market: string; price: string },
      _uniswapV3Router: string,
      _uniswapFee: BigNumberish,
      _xTokenManager: string,
      _feeDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      _supplyData: {
        totalCap: BigNumberish
        userCap: BigNumberish
        initialSupplyMultiplier: BigNumberish
      },
      _liquidityBuffer: { active: boolean; amount: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(string,tuple,tuple,address,uint24,address,tuple,tuple,tuple)'(
      _symbol: string,
      _tokens: { baseToken: string; weth: string; usdc: string },
      _lending: { liquidityPool: string; market: string; price: string },
      _uniswapV3Router: string,
      _uniswapFee: BigNumberish,
      _xTokenManager: string,
      _feeDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      _supplyData: {
        totalCap: BigNumberish
        userCap: BigNumberish
        initialSupplyMultiplier: BigNumberish
      },
      _liquidityBuffer: { active: boolean; amount: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>

    lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    lever(
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: Overrides
    ): Promise<BigNumber>

    'lever(uint256,uint256,tuple)'(
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: Overrides
    ): Promise<BigNumber>

    liquidityBuffer(overrides?: CallOverrides): Promise<BigNumber>

    'liquidityBuffer()'(overrides?: CallOverrides): Promise<BigNumber>

    mint(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'mint(uint256)'(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    mintWithToken(
      inputAssetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'mintWithToken(uint256)'(
      inputAssetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    pauseContract(overrides?: Overrides): Promise<BigNumber>

    'pauseContract()'(overrides?: Overrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>

    removeBlockLockExemption(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'removeBlockLockExemption(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    setFeeDivisor(
      newDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>

    'setFeeDivisor(tuple)'(
      newDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>

    setLiquidityBufferActive(
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setLiquidityBufferActive(bool)'(
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    setLiquidityBufferAmount(
      _liquidityBufferAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setLiquidityBufferAmount(uint256)'(
      _liquidityBufferAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setTotalSupplyCap(
      _supplyCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setTotalSupplyCap(uint256)'(
      _supplyCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setUserBalanceCap(
      _userBalanceCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setUserBalanceCap(uint256)'(
      _userBalanceCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    supplyData(overrides?: CallOverrides): Promise<BigNumber>

    'supplyData()'(overrides?: CallOverrides): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    unpauseContract(overrides?: Overrides): Promise<BigNumber>

    'unpauseContract()'(overrides?: Overrides): Promise<BigNumber>

    withdraw(
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'withdraw(uint256)'(
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'baseToken()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    blockLockExempt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'blockLockExempt(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    burn(
      xassetAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'burn(uint256,bool,uint256)'(
      xassetAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    calculateMintAmount(
      incrementalToken: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateMintAmount(uint256,uint256)'(
      incrementalToken: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    claimFees(overrides?: Overrides): Promise<PopulatedTransaction>

    'claimFees()'(overrides?: Overrides): Promise<PopulatedTransaction>

    claimableFees(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'claimableFees()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    delever(
      withdrawAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'delever(uint256,tuple)'(
      withdrawAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    deposit(
      depositAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'deposit(uint256)'(
      depositAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    executeOperation(
      _amount: BigNumberish,
      _fee: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'executeOperation(uint256,uint256,bytes)'(
      _amount: BigNumberish,
      _fee: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    exemptFromBlockLock(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'exemptFromBlockLock(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    feeDivisors(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'feeDivisors()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getBufferBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getBufferBalance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getFundBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getFundBalances()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLiquidityBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getLiquidityBuffer()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getWithdrawableFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getWithdrawableFees()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    initialize(
      _symbol: string,
      _tokens: { baseToken: string; weth: string; usdc: string },
      _lending: { liquidityPool: string; market: string; price: string },
      _uniswapV3Router: string,
      _uniswapFee: BigNumberish,
      _xTokenManager: string,
      _feeDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      _supplyData: {
        totalCap: BigNumberish
        userCap: BigNumberish
        initialSupplyMultiplier: BigNumberish
      },
      _liquidityBuffer: { active: boolean; amount: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(string,tuple,tuple,address,uint24,address,tuple,tuple,tuple)'(
      _symbol: string,
      _tokens: { baseToken: string; weth: string; usdc: string },
      _lending: { liquidityPool: string; market: string; price: string },
      _uniswapV3Router: string,
      _uniswapFee: BigNumberish,
      _xTokenManager: string,
      _feeDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      _supplyData: {
        totalCap: BigNumberish
        userCap: BigNumberish
        initialSupplyMultiplier: BigNumberish
      },
      _liquidityBuffer: { active: boolean; amount: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    lastLockedBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    lever(
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'lever(uint256,uint256,tuple)'(
      depositAmount: BigNumberish,
      borrowAmount: BigNumberish,
      params: {
        checkNav: boolean
        multiHop: boolean
        maxNavLoss: BigNumberish
        tradePath: BytesLike
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    liquidityBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'liquidityBuffer()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    mint(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'mint(uint256)'(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    mintWithToken(
      inputAssetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'mintWithToken(uint256)'(
      inputAssetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    removeBlockLockExemption(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'removeBlockLockExemption(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    setFeeDivisor(
      newDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setFeeDivisor(tuple)'(
      newDivisors: { mintFee: BigNumberish; burnFee: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setLiquidityBufferActive(
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setLiquidityBufferActive(bool)'(
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setLiquidityBufferAmount(
      _liquidityBufferAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setLiquidityBufferAmount(uint256)'(
      _liquidityBufferAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setTotalSupplyCap(
      _supplyCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setTotalSupplyCap(uint256)'(
      _supplyCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setUserBalanceCap(
      _userBalanceCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setUserBalanceCap(uint256)'(
      _userBalanceCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    supplyData(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'supplyData()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    unpauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    withdraw(
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdraw(uint256)'(
      withdrawAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
