/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface RevenueControllerInterface extends ethers.utils.Interface {
  functions: {
    'addFund(address,address[])': FunctionFragment
    'claimAndSwap(uint256,bytes[])': FunctionFragment
    'getFundAssets(address)': FunctionFragment
    'getFundIndex(address)': FunctionFragment
    'initialize(address,address,address)': FunctionFragment
    'managementStakingModule()': FunctionFragment
    'nextFundIndex()': FunctionFragment
    'oneInchExchange()': FunctionFragment
    'owner()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'swapOnceClaimed(uint256,uint256,bytes)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'xtk()': FunctionFragment
    'xtokenManager()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'addFund',
    values: [string, string[]]
  ): string
  encodeFunctionData(
    functionFragment: 'claimAndSwap',
    values: [BigNumberish, BytesLike[]]
  ): string
  encodeFunctionData(
    functionFragment: 'getFundAssets',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'getFundIndex', values: [string]): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'managementStakingModule',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'nextFundIndex',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'oneInchExchange',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'swapOnceClaimed',
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'xtk', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'xtokenManager',
    values?: undefined
  ): string

  decodeFunctionResult(functionFragment: 'addFund', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'claimAndSwap',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getFundAssets',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getFundIndex',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'managementStakingModule',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'nextFundIndex',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'oneInchExchange',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'swapOnceClaimed',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'xtk', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'xtokenManager',
    data: BytesLike
  ): Result

  events: {
    'FeesClaimed(address,address,uint256)': EventFragment
    'FundAdded(address,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'RevenueAccrued(address,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'FeesClaimed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FundAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RevenueAccrued'): EventFragment
}

export class RevenueController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: RevenueControllerInterface

  functions: {
    addFund(
      _fund: string,
      _assets: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'addFund(address,address[])'(
      _fund: string,
      _assets: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    claimAndSwap(
      _fundIndex: BigNumberish,
      _oneInchData: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'claimAndSwap(uint256,bytes[])'(
      _fundIndex: BigNumberish,
      _oneInchData: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    getFundAssets(_fund: string, overrides?: CallOverrides): Promise<[string[]]>

    'getFundAssets(address)'(
      _fund: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>

    getFundIndex(_fund: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'getFundIndex(address)'(
      _fund: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    initialize(
      _managementStakingModule: string,
      _oneInchExchange: string,
      _xtokenManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(address,address,address)'(
      _managementStakingModule: string,
      _oneInchExchange: string,
      _xtokenManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    managementStakingModule(overrides?: CallOverrides): Promise<[string]>

    'managementStakingModule()'(overrides?: CallOverrides): Promise<[string]>

    nextFundIndex(overrides?: CallOverrides): Promise<[BigNumber]>

    'nextFundIndex()'(overrides?: CallOverrides): Promise<[BigNumber]>

    oneInchExchange(overrides?: CallOverrides): Promise<[string]>

    'oneInchExchange()'(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    swapOnceClaimed(
      _fundIndex: BigNumberish,
      _fundAssetIndex: BigNumberish,
      _oneInchData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'swapOnceClaimed(uint256,uint256,bytes)'(
      _fundIndex: BigNumberish,
      _fundAssetIndex: BigNumberish,
      _oneInchData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    xtk(overrides?: CallOverrides): Promise<[string]>

    'xtk()'(overrides?: CallOverrides): Promise<[string]>

    xtokenManager(overrides?: CallOverrides): Promise<[string]>

    'xtokenManager()'(overrides?: CallOverrides): Promise<[string]>
  }

  addFund(
    _fund: string,
    _assets: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'addFund(address,address[])'(
    _fund: string,
    _assets: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  claimAndSwap(
    _fundIndex: BigNumberish,
    _oneInchData: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'claimAndSwap(uint256,bytes[])'(
    _fundIndex: BigNumberish,
    _oneInchData: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  getFundAssets(_fund: string, overrides?: CallOverrides): Promise<string[]>

  'getFundAssets(address)'(
    _fund: string,
    overrides?: CallOverrides
  ): Promise<string[]>

  getFundIndex(_fund: string, overrides?: CallOverrides): Promise<BigNumber>

  'getFundIndex(address)'(
    _fund: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  initialize(
    _managementStakingModule: string,
    _oneInchExchange: string,
    _xtokenManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(address,address,address)'(
    _managementStakingModule: string,
    _oneInchExchange: string,
    _xtokenManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  managementStakingModule(overrides?: CallOverrides): Promise<string>

  'managementStakingModule()'(overrides?: CallOverrides): Promise<string>

  nextFundIndex(overrides?: CallOverrides): Promise<BigNumber>

  'nextFundIndex()'(overrides?: CallOverrides): Promise<BigNumber>

  oneInchExchange(overrides?: CallOverrides): Promise<string>

  'oneInchExchange()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  swapOnceClaimed(
    _fundIndex: BigNumberish,
    _fundAssetIndex: BigNumberish,
    _oneInchData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'swapOnceClaimed(uint256,uint256,bytes)'(
    _fundIndex: BigNumberish,
    _fundAssetIndex: BigNumberish,
    _oneInchData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  xtk(overrides?: CallOverrides): Promise<string>

  'xtk()'(overrides?: CallOverrides): Promise<string>

  xtokenManager(overrides?: CallOverrides): Promise<string>

  'xtokenManager()'(overrides?: CallOverrides): Promise<string>

  callStatic: {
    addFund(
      _fund: string,
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<void>

    'addFund(address,address[])'(
      _fund: string,
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<void>

    claimAndSwap(
      _fundIndex: BigNumberish,
      _oneInchData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>

    'claimAndSwap(uint256,bytes[])'(
      _fundIndex: BigNumberish,
      _oneInchData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>

    getFundAssets(_fund: string, overrides?: CallOverrides): Promise<string[]>

    'getFundAssets(address)'(
      _fund: string,
      overrides?: CallOverrides
    ): Promise<string[]>

    getFundIndex(_fund: string, overrides?: CallOverrides): Promise<BigNumber>

    'getFundIndex(address)'(
      _fund: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(
      _managementStakingModule: string,
      _oneInchExchange: string,
      _xtokenManager: string,
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(address,address,address)'(
      _managementStakingModule: string,
      _oneInchExchange: string,
      _xtokenManager: string,
      overrides?: CallOverrides
    ): Promise<void>

    managementStakingModule(overrides?: CallOverrides): Promise<string>

    'managementStakingModule()'(overrides?: CallOverrides): Promise<string>

    nextFundIndex(overrides?: CallOverrides): Promise<BigNumber>

    'nextFundIndex()'(overrides?: CallOverrides): Promise<BigNumber>

    oneInchExchange(overrides?: CallOverrides): Promise<string>

    'oneInchExchange()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    swapOnceClaimed(
      _fundIndex: BigNumberish,
      _fundAssetIndex: BigNumberish,
      _oneInchData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'swapOnceClaimed(uint256,uint256,bytes)'(
      _fundIndex: BigNumberish,
      _fundAssetIndex: BigNumberish,
      _oneInchData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    xtk(overrides?: CallOverrides): Promise<string>

    'xtk()'(overrides?: CallOverrides): Promise<string>

    xtokenManager(overrides?: CallOverrides): Promise<string>

    'xtokenManager()'(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    FeesClaimed(
      fund: string | null,
      revenueToken: string | null,
      revenueTokenAmount: null
    ): EventFilter

    FundAdded(fund: string | null, fundIndex: BigNumberish | null): EventFilter

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter

    RevenueAccrued(
      fund: string | null,
      xtkAccrued: null,
      timestamp: null
    ): EventFilter
  }

  estimateGas: {
    addFund(
      _fund: string,
      _assets: string[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'addFund(address,address[])'(
      _fund: string,
      _assets: string[],
      overrides?: Overrides
    ): Promise<BigNumber>

    claimAndSwap(
      _fundIndex: BigNumberish,
      _oneInchData: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'claimAndSwap(uint256,bytes[])'(
      _fundIndex: BigNumberish,
      _oneInchData: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>

    getFundAssets(_fund: string, overrides?: CallOverrides): Promise<BigNumber>

    'getFundAssets(address)'(
      _fund: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getFundIndex(_fund: string, overrides?: CallOverrides): Promise<BigNumber>

    'getFundIndex(address)'(
      _fund: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initialize(
      _managementStakingModule: string,
      _oneInchExchange: string,
      _xtokenManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(address,address,address)'(
      _managementStakingModule: string,
      _oneInchExchange: string,
      _xtokenManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    managementStakingModule(overrides?: CallOverrides): Promise<BigNumber>

    'managementStakingModule()'(overrides?: CallOverrides): Promise<BigNumber>

    nextFundIndex(overrides?: CallOverrides): Promise<BigNumber>

    'nextFundIndex()'(overrides?: CallOverrides): Promise<BigNumber>

    oneInchExchange(overrides?: CallOverrides): Promise<BigNumber>

    'oneInchExchange()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    swapOnceClaimed(
      _fundIndex: BigNumberish,
      _fundAssetIndex: BigNumberish,
      _oneInchData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'swapOnceClaimed(uint256,uint256,bytes)'(
      _fundIndex: BigNumberish,
      _fundAssetIndex: BigNumberish,
      _oneInchData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    xtk(overrides?: CallOverrides): Promise<BigNumber>

    'xtk()'(overrides?: CallOverrides): Promise<BigNumber>

    xtokenManager(overrides?: CallOverrides): Promise<BigNumber>

    'xtokenManager()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    addFund(
      _fund: string,
      _assets: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'addFund(address,address[])'(
      _fund: string,
      _assets: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    claimAndSwap(
      _fundIndex: BigNumberish,
      _oneInchData: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'claimAndSwap(uint256,bytes[])'(
      _fundIndex: BigNumberish,
      _oneInchData: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    getFundAssets(
      _fund: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getFundAssets(address)'(
      _fund: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getFundIndex(
      _fund: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getFundIndex(address)'(
      _fund: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(
      _managementStakingModule: string,
      _oneInchExchange: string,
      _xtokenManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(address,address,address)'(
      _managementStakingModule: string,
      _oneInchExchange: string,
      _xtokenManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    managementStakingModule(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'managementStakingModule()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    nextFundIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'nextFundIndex()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    oneInchExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'oneInchExchange()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    swapOnceClaimed(
      _fundIndex: BigNumberish,
      _fundAssetIndex: BigNumberish,
      _oneInchData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'swapOnceClaimed(uint256,uint256,bytes)'(
      _fundIndex: BigNumberish,
      _fundAssetIndex: BigNumberish,
      _oneInchData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    xtk(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'xtk()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    xtokenManager(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'xtokenManager()'(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
