/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface AddressResolverInterface extends ethers.utils.Interface {
  functions: {
    'acceptOwnership()': FunctionFragment
    'getAddress(bytes32)': FunctionFragment
    'getSynth(bytes32)': FunctionFragment
    'importAddresses(bytes32[],address[])': FunctionFragment
    'nominateNewOwner(address)': FunctionFragment
    'nominatedOwner()': FunctionFragment
    'owner()': FunctionFragment
    'repository(bytes32)': FunctionFragment
    'requireAndGetAddress(bytes32,string)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'acceptOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getAddress',
    values: [BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'getSynth', values: [BytesLike]): string
  encodeFunctionData(
    functionFragment: 'importAddresses',
    values: [BytesLike[], string[]]
  ): string
  encodeFunctionData(
    functionFragment: 'nominateNewOwner',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'nominatedOwner',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'repository',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'requireAndGetAddress',
    values: [BytesLike, string]
  ): string

  decodeFunctionResult(
    functionFragment: 'acceptOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getSynth', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'importAddresses',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'nominateNewOwner',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'nominatedOwner',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'repository', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'requireAndGetAddress',
    data: BytesLike
  ): Result

  events: {
    'OwnerChanged(address,address)': EventFragment
    'OwnerNominated(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment
}

export class AddressResolver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: AddressResolverInterface

  functions: {
    acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'acceptOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<[string]>

    'getAddress(bytes32)'(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>

    getSynth(key: BytesLike, overrides?: CallOverrides): Promise<[string]>

    'getSynth(bytes32)'(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>

    importAddresses(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'importAddresses(bytes32[],address[])'(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'nominateNewOwner(address)'(
      _owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>

    'nominatedOwner()'(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    repository(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>

    'repository(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>

    requireAndGetAddress(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<[string]>

    'requireAndGetAddress(bytes32,string)'(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<[string]>
  }

  acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'acceptOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  getAddress(name: BytesLike, overrides?: CallOverrides): Promise<string>

  'getAddress(bytes32)'(
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>

  getSynth(key: BytesLike, overrides?: CallOverrides): Promise<string>

  'getSynth(bytes32)'(
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>

  importAddresses(
    names: BytesLike[],
    destinations: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'importAddresses(bytes32[],address[])'(
    names: BytesLike[],
    destinations: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'nominateNewOwner(address)'(
    _owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  nominatedOwner(overrides?: CallOverrides): Promise<string>

  'nominatedOwner()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  repository(arg0: BytesLike, overrides?: CallOverrides): Promise<string>

  'repository(bytes32)'(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>

  requireAndGetAddress(
    name: BytesLike,
    reason: string,
    overrides?: CallOverrides
  ): Promise<string>

  'requireAndGetAddress(bytes32,string)'(
    name: BytesLike,
    reason: string,
    overrides?: CallOverrides
  ): Promise<string>

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>

    'acceptOwnership()'(overrides?: CallOverrides): Promise<void>

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<string>

    'getAddress(bytes32)'(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>

    getSynth(key: BytesLike, overrides?: CallOverrides): Promise<string>

    'getSynth(bytes32)'(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>

    importAddresses(
      names: BytesLike[],
      destinations: string[],
      overrides?: CallOverrides
    ): Promise<void>

    'importAddresses(bytes32[],address[])'(
      names: BytesLike[],
      destinations: string[],
      overrides?: CallOverrides
    ): Promise<void>

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>

    'nominateNewOwner(address)'(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>

    nominatedOwner(overrides?: CallOverrides): Promise<string>

    'nominatedOwner()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    repository(arg0: BytesLike, overrides?: CallOverrides): Promise<string>

    'repository(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>

    requireAndGetAddress(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<string>

    'requireAndGetAddress(bytes32,string)'(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<string>
  }

  filters: {
    OwnerChanged(oldOwner: null, newOwner: null): EventFilter

    OwnerNominated(newOwner: null): EventFilter
  }

  estimateGas: {
    acceptOwnership(overrides?: Overrides): Promise<BigNumber>

    'acceptOwnership()'(overrides?: Overrides): Promise<BigNumber>

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'getAddress(bytes32)'(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getSynth(key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'getSynth(bytes32)'(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    importAddresses(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'importAddresses(bytes32[],address[])'(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides
    ): Promise<BigNumber>

    nominateNewOwner(_owner: string, overrides?: Overrides): Promise<BigNumber>

    'nominateNewOwner(address)'(
      _owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>

    'nominatedOwner()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    repository(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'repository(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    requireAndGetAddress(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'requireAndGetAddress(bytes32,string)'(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    acceptOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'acceptOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    getAddress(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getAddress(bytes32)'(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getSynth(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getSynth(bytes32)'(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    importAddresses(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'importAddresses(bytes32[],address[])'(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'nominateNewOwner(address)'(
      _owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'nominatedOwner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    repository(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'repository(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    requireAndGetAddress(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'requireAndGetAddress(bytes32,string)'(
      name: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
