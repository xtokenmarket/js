/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    'blockLockExempt(address)': FunctionFragment
    'borrowingLimit(address)': FunctionFragment
    'collateral(address)': FunctionFragment
    'collateralize(uint256)': FunctionFragment
    'exemptFromBlockLock(address)': FunctionFragment
    'getCollateralCap()': FunctionFragment
    'getCollateralFactor()': FunctionFragment
    'initialize(address,uint256,uint256)': FunctionFragment
    'lastLockedBlock(address)': FunctionFragment
    'marketActive()': FunctionFragment
    'owner()': FunctionFragment
    'pauseContract()': FunctionFragment
    'paused()': FunctionFragment
    'removeBlockLockExemption(address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'sendCollateralToLiquidator(address,address,uint256)': FunctionFragment
    'setCollateralCap(uint256)': FunctionFragment
    'setCollateralFactor(uint256)': FunctionFragment
    'setCollateralizationActive(bool)': FunctionFragment
    'setComptroller(address)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpauseContract()': FunctionFragment
    'withdraw(uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'blockLockExempt',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'borrowingLimit',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'collateral', values: [string]): string
  encodeFunctionData(
    functionFragment: 'collateralize',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'exemptFromBlockLock',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'getCollateralCap',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getCollateralFactor',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'lastLockedBlock',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'marketActive',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'pauseContract',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'removeBlockLockExemption',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'sendCollateralToLiquidator',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setCollateralCap',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setCollateralFactor',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setCollateralizationActive',
    values: [boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'setComptroller',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'unpauseContract',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'blockLockExempt',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'borrowingLimit',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'collateral', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'collateralize',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'exemptFromBlockLock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCollateralCap',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCollateralFactor',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lastLockedBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'marketActive',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'pauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removeBlockLockExemption',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'sendCollateralToLiquidator',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setCollateralCap',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setCollateralFactor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setCollateralizationActive',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setComptroller',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'unpauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'Collateralize(uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'Unpaused(address)': EventFragment
    'UpdateCollateralCap(uint256)': EventFragment
    'UpdateCollateralFactor(uint256)': EventFragment
    'UpdateCollateralizationActive(bool)': EventFragment
    'UpdateComptroller(address)': EventFragment
    'Withdraw(uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Collateralize'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateCollateralCap'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateCollateralFactor'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'UpdateCollateralizationActive'
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateComptroller'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
}

export class Market extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: MarketInterface

  functions: {
    blockLockExempt(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    'blockLockExempt(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    borrowingLimit(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'borrowingLimit(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    collateral(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'collateral(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    collateralize(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'collateralize(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    exemptFromBlockLock(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'exemptFromBlockLock(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    getCollateralCap(overrides?: CallOverrides): Promise<[BigNumber]>

    'getCollateralCap()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getCollateralFactor(overrides?: CallOverrides): Promise<[BigNumber]>

    'getCollateralFactor()'(overrides?: CallOverrides): Promise<[BigNumber]>

    initialize(
      _assetPriceAddress: string,
      _collateralFactor: BigNumberish,
      _collateralCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(address,uint256,uint256)'(
      _assetPriceAddress: string,
      _collateralFactor: BigNumberish,
      _collateralCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    lastLockedBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    marketActive(overrides?: CallOverrides): Promise<[boolean]>

    'marketActive()'(overrides?: CallOverrides): Promise<[boolean]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    pauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>

    removeBlockLockExemption(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'removeBlockLockExemption(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    sendCollateralToLiquidator(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'sendCollateralToLiquidator(address,address,uint256)'(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setCollateralCap(
      _collateralCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setCollateralCap(uint256)'(
      _collateralCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setCollateralFactor(
      _collateralFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setCollateralFactor(uint256)'(
      _collateralFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setCollateralizationActive(
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setCollateralizationActive(bool)'(
      _active: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setComptroller(
      _comptroller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setComptroller(address)'(
      _comptroller: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdraw(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  blockLockExempt(arg0: string, overrides?: CallOverrides): Promise<boolean>

  'blockLockExempt(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  borrowingLimit(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'borrowingLimit(address)'(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  collateral(_borrower: string, overrides?: CallOverrides): Promise<BigNumber>

  'collateral(address)'(
    _borrower: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  collateralize(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'collateralize(uint256)'(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  exemptFromBlockLock(
    lockAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'exemptFromBlockLock(address)'(
    lockAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  getCollateralCap(overrides?: CallOverrides): Promise<BigNumber>

  'getCollateralCap()'(overrides?: CallOverrides): Promise<BigNumber>

  getCollateralFactor(overrides?: CallOverrides): Promise<BigNumber>

  'getCollateralFactor()'(overrides?: CallOverrides): Promise<BigNumber>

  initialize(
    _assetPriceAddress: string,
    _collateralFactor: BigNumberish,
    _collateralCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(address,uint256,uint256)'(
    _assetPriceAddress: string,
    _collateralFactor: BigNumberish,
    _collateralCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'lastLockedBlock(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  marketActive(overrides?: CallOverrides): Promise<boolean>

  'marketActive()'(overrides?: CallOverrides): Promise<boolean>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  pauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  'paused()'(overrides?: CallOverrides): Promise<boolean>

  removeBlockLockExemption(
    lockAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'removeBlockLockExemption(address)'(
    lockAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  sendCollateralToLiquidator(
    _liquidator: string,
    _borrower: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'sendCollateralToLiquidator(address,address,uint256)'(
    _liquidator: string,
    _borrower: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setCollateralCap(
    _collateralCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setCollateralCap(uint256)'(
    _collateralCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setCollateralFactor(
    _collateralFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setCollateralFactor(uint256)'(
    _collateralFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setCollateralizationActive(
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setCollateralizationActive(bool)'(
    _active: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setComptroller(
    _comptroller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setComptroller(address)'(
    _comptroller: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdraw(uint256)'(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    blockLockExempt(arg0: string, overrides?: CallOverrides): Promise<boolean>

    'blockLockExempt(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    borrowingLimit(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'borrowingLimit(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    collateral(_borrower: string, overrides?: CallOverrides): Promise<BigNumber>

    'collateral(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    collateralize(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'collateralize(uint256)'(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    exemptFromBlockLock(
      lockAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'exemptFromBlockLock(address)'(
      lockAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    getCollateralCap(overrides?: CallOverrides): Promise<BigNumber>

    'getCollateralCap()'(overrides?: CallOverrides): Promise<BigNumber>

    getCollateralFactor(overrides?: CallOverrides): Promise<BigNumber>

    'getCollateralFactor()'(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _assetPriceAddress: string,
      _collateralFactor: BigNumberish,
      _collateralCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(address,uint256,uint256)'(
      _assetPriceAddress: string,
      _collateralFactor: BigNumberish,
      _collateralCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    marketActive(overrides?: CallOverrides): Promise<boolean>

    'marketActive()'(overrides?: CallOverrides): Promise<boolean>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    pauseContract(overrides?: CallOverrides): Promise<void>

    'pauseContract()'(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    'paused()'(overrides?: CallOverrides): Promise<boolean>

    removeBlockLockExemption(
      lockAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'removeBlockLockExemption(address)'(
      lockAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    sendCollateralToLiquidator(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'sendCollateralToLiquidator(address,address,uint256)'(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setCollateralCap(
      _collateralCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setCollateralCap(uint256)'(
      _collateralCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setCollateralFactor(
      _collateralFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setCollateralFactor(uint256)'(
      _collateralFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setCollateralizationActive(
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'setCollateralizationActive(bool)'(
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    setComptroller(
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setComptroller(address)'(
      _comptroller: string,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    unpauseContract(overrides?: CallOverrides): Promise<void>

    'unpauseContract()'(overrides?: CallOverrides): Promise<void>

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    'withdraw(uint256)'(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    Collateralize(amount: null): EventFilter

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter

    Paused(account: null): EventFilter

    Unpaused(account: null): EventFilter

    UpdateCollateralCap(collateralCap: null): EventFilter

    UpdateCollateralFactor(collateralFactor: null): EventFilter

    UpdateCollateralizationActive(active: null): EventFilter

    UpdateComptroller(comptroller: string | null): EventFilter

    Withdraw(amount: null): EventFilter
  }

  estimateGas: {
    blockLockExempt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'blockLockExempt(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    borrowingLimit(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'borrowingLimit(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    collateral(_borrower: string, overrides?: CallOverrides): Promise<BigNumber>

    'collateral(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    collateralize(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'collateralize(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    exemptFromBlockLock(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'exemptFromBlockLock(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    getCollateralCap(overrides?: CallOverrides): Promise<BigNumber>

    'getCollateralCap()'(overrides?: CallOverrides): Promise<BigNumber>

    getCollateralFactor(overrides?: CallOverrides): Promise<BigNumber>

    'getCollateralFactor()'(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _assetPriceAddress: string,
      _collateralFactor: BigNumberish,
      _collateralCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(address,uint256,uint256)'(
      _assetPriceAddress: string,
      _collateralFactor: BigNumberish,
      _collateralCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    marketActive(overrides?: CallOverrides): Promise<BigNumber>

    'marketActive()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    pauseContract(overrides?: Overrides): Promise<BigNumber>

    'pauseContract()'(overrides?: Overrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>

    removeBlockLockExemption(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'removeBlockLockExemption(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    sendCollateralToLiquidator(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'sendCollateralToLiquidator(address,address,uint256)'(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setCollateralCap(
      _collateralCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setCollateralCap(uint256)'(
      _collateralCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setCollateralFactor(
      _collateralFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setCollateralFactor(uint256)'(
      _collateralFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setCollateralizationActive(
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setCollateralizationActive(bool)'(
      _active: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    setComptroller(
      _comptroller: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setComptroller(address)'(
      _comptroller: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    unpauseContract(overrides?: Overrides): Promise<BigNumber>

    'unpauseContract()'(overrides?: Overrides): Promise<BigNumber>

    withdraw(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'withdraw(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    blockLockExempt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'blockLockExempt(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    borrowingLimit(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'borrowingLimit(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    collateral(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'collateral(address)'(
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    collateralize(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'collateralize(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    exemptFromBlockLock(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'exemptFromBlockLock(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    getCollateralCap(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getCollateralCap()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCollateralFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getCollateralFactor()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(
      _assetPriceAddress: string,
      _collateralFactor: BigNumberish,
      _collateralCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(address,uint256,uint256)'(
      _assetPriceAddress: string,
      _collateralFactor: BigNumberish,
      _collateralCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    lastLockedBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    marketActive(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'marketActive()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    removeBlockLockExemption(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'removeBlockLockExemption(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    sendCollateralToLiquidator(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'sendCollateralToLiquidator(address,address,uint256)'(
      _liquidator: string,
      _borrower: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setCollateralCap(
      _collateralCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setCollateralCap(uint256)'(
      _collateralCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setCollateralFactor(
      _collateralFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setCollateralFactor(uint256)'(
      _collateralFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setCollateralizationActive(
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setCollateralizationActive(bool)'(
      _active: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setComptroller(
      _comptroller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setComptroller(address)'(
      _comptroller: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    unpauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdraw(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
