/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface XALPHAInterface extends ethers.utils.Interface {
  functions: {
    'adminActiveTimestamp()': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'blockLockExempt(address)': FunctionFragment
    'burn(uint256,bool,uint256)': FunctionFragment
    'calculateMintAmount(uint256,uint256)': FunctionFragment
    'claimUnbonded(uint256)': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'emergencyClaim()': FunctionFragment
    'emergencyUnbond()': FunctionFragment
    'emergencyUnbondTimestamp()': FunctionFragment
    'exemptFromBlockLock(address)': FunctionFragment
    'feeDivisors()': FunctionFragment
    'getBufferBalance()': FunctionFragment
    'getFundBalances()': FunctionFragment
    'getNav()': FunctionFragment
    'getWithdrawableAmount(uint256)': FunctionFragment
    'getWithdrawableFees()': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'initialize(string,address,address,address,address,address,address,address,tuple)': FunctionFragment
    'lastLockedBlock(address)': FunctionFragment
    'lastStakeTimestamp()': FunctionFragment
    'mint(uint256)': FunctionFragment
    'mintWithToken(uint256)': FunctionFragment
    'name()': FunctionFragment
    'owner()': FunctionFragment
    'pauseContract()': FunctionFragment
    'paused()': FunctionFragment
    'removeBlockLockExemption(address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setFeeDivisors(uint256,uint256,uint256)': FunctionFragment
    'stake(uint256,uint256,bool)': FunctionFragment
    'symbol()': FunctionFragment
    'totalStakedBalance()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unbond(uint256,bool)': FunctionFragment
    'unpauseContract()': FunctionFragment
    'updateStakedBalance()': FunctionFragment
    'updateSwapRouter(uint8)': FunctionFragment
    'updateUniswapV3AlphaPoolFee(uint24)': FunctionFragment
    'v3AlphaPoolFee()': FunctionFragment
    'withdrawFees()': FunctionFragment
    'withdrawNativeToken()': FunctionFragment
    'withdrawTokenFromProxy(uint256,address)': FunctionFragment
    'withdrawableAlphaFees()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'adminActiveTimestamp',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(
    functionFragment: 'blockLockExempt',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'burn',
    values: [BigNumberish, boolean, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateMintAmount',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'claimUnbonded',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyClaim',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyUnbond',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyUnbondTimestamp',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'exemptFromBlockLock',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'feeDivisors',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getBufferBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getFundBalances',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'getNav', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getWithdrawableAmount',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getWithdrawableFees',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      { mintFee: BigNumberish; burnFee: BigNumberish; claimFee: BigNumberish }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'lastLockedBlock',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'lastStakeTimestamp',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'mintWithToken',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'pauseContract',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'removeBlockLockExemption',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setFeeDivisors',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'stake',
    values: [BigNumberish, BigNumberish, boolean]
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalStakedBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'unbond',
    values: [BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'unpauseContract',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'updateStakedBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'updateSwapRouter',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'updateUniswapV3AlphaPoolFee',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'v3AlphaPoolFee',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawFees',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawNativeToken',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawTokenFromProxy',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawableAlphaFees',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'adminActiveTimestamp',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'blockLockExempt',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'calculateMintAmount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'claimUnbonded',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'emergencyClaim',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'emergencyUnbond',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'emergencyUnbondTimestamp',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'exemptFromBlockLock',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'feeDivisors', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getBufferBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getFundBalances',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getNav', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getWithdrawableAmount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getWithdrawableFees',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lastLockedBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'lastStakeTimestamp',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'mintWithToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'pauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removeBlockLockExemption',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setFeeDivisors',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'totalStakedBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'unbond', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'unpauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateStakedBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateSwapRouter',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateUniswapV3AlphaPoolFee',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'v3AlphaPoolFee',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawFees',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawNativeToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawTokenFromProxy',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawableAlphaFees',
    data: BytesLike
  ): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'Claim(uint256,uint256)': EventFragment
    'FeeDivisorsSet(uint256,uint256,uint256)': EventFragment
    'FeeWithdraw(uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'Stake(uint256,uint256,uint256)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Unbond(uint256,uint256,uint256)': EventFragment
    'Unpaused(address)': EventFragment
    'UpdateStakedBalance(uint256)': EventFragment
    'UpdateSwapRouter(uint8)': EventFragment
    'UpdateUniswapV3AlphaPoolFee(uint24)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FeeDivisorsSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FeeWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Stake'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unbond'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateStakedBalance'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateSwapRouter'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateUniswapV3AlphaPoolFee'): EventFragment
}

export class XALPHA extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: XALPHAInterface

  functions: {
    adminActiveTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>

    'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<[BigNumber]>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    blockLockExempt(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    'blockLockExempt(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    burn(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'burn(uint256,bool,uint256)'(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    calculateMintAmount(
      incrementalAlpha: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintAmount: BigNumber }>

    'calculateMintAmount(uint256,uint256)'(
      incrementalAlpha: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintAmount: BigNumber }>

    claimUnbonded(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'claimUnbonded(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    decimals(overrides?: CallOverrides): Promise<[number]>

    'decimals()'(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    emergencyClaim(overrides?: Overrides): Promise<ContractTransaction>

    'emergencyClaim()'(overrides?: Overrides): Promise<ContractTransaction>

    emergencyUnbond(overrides?: Overrides): Promise<ContractTransaction>

    'emergencyUnbond()'(overrides?: Overrides): Promise<ContractTransaction>

    emergencyUnbondTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>

    'emergencyUnbondTimestamp()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    exemptFromBlockLock(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'exemptFromBlockLock(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    feeDivisors(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    'feeDivisors()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    getBufferBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getFundBalances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>

    'getFundBalances()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    getNav(overrides?: CallOverrides): Promise<[BigNumber]>

    'getNav()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getWithdrawableAmount(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getWithdrawableAmount(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getWithdrawableFees(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { feeAsset: string; feeAmount: BigNumber }>

    'getWithdrawableFees()'(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { feeAsset: string; feeAmount: BigNumber }>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    initialize(
      _symbol: string,
      _wethToken: string,
      _alphaToken: string,
      _alphaStaking: string,
      _stakingFactory: string,
      _xTokenManager: string,
      _uniswapRouter: string,
      _sushiswapRouter: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(string,address,address,address,address,address,address,address,tuple)'(
      _symbol: string,
      _wethToken: string,
      _alphaToken: string,
      _alphaStaking: string,
      _stakingFactory: string,
      _xTokenManager: string,
      _uniswapRouter: string,
      _sushiswapRouter: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    lastLockedBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    lastStakeTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>

    'lastStakeTimestamp()'(overrides?: CallOverrides): Promise<[BigNumber]>

    mint(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'mint(uint256)'(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    mintWithToken(
      alphaAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'mintWithToken(uint256)'(
      alphaAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    'name()'(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    pauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>

    removeBlockLockExemption(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'removeBlockLockExemption(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    stake(
      proxyIndex: BigNumberish,
      amount: BigNumberish,
      force: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'stake(uint256,uint256,bool)'(
      proxyIndex: BigNumberish,
      amount: BigNumberish,
      force: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    'symbol()'(overrides?: CallOverrides): Promise<[string]>

    totalStakedBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalStakedBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    unbond(
      proxyIndex: BigNumberish,
      force: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'unbond(uint256,bool)'(
      proxyIndex: BigNumberish,
      force: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    updateStakedBalance(overrides?: Overrides): Promise<ContractTransaction>

    'updateStakedBalance()'(overrides?: Overrides): Promise<ContractTransaction>

    updateSwapRouter(
      version: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'updateSwapRouter(uint8)'(
      version: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    updateUniswapV3AlphaPoolFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'updateUniswapV3AlphaPoolFee(uint24)'(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    v3AlphaPoolFee(overrides?: CallOverrides): Promise<[number]>

    'v3AlphaPoolFee()'(overrides?: CallOverrides): Promise<[number]>

    withdrawFees(overrides?: Overrides): Promise<ContractTransaction>

    'withdrawFees()'(overrides?: Overrides): Promise<ContractTransaction>

    withdrawNativeToken(overrides?: Overrides): Promise<ContractTransaction>

    'withdrawNativeToken()'(overrides?: Overrides): Promise<ContractTransaction>

    withdrawTokenFromProxy(
      proxyIndex: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdrawTokenFromProxy(uint256,address)'(
      proxyIndex: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    withdrawableAlphaFees(overrides?: CallOverrides): Promise<[BigNumber]>

    'withdrawableAlphaFees()'(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  adminActiveTimestamp(overrides?: CallOverrides): Promise<BigNumber>

  'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

  'balanceOf(address)'(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  blockLockExempt(arg0: string, overrides?: CallOverrides): Promise<boolean>

  'blockLockExempt(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  burn(
    tokenAmount: BigNumberish,
    redeemForEth: boolean,
    minReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'burn(uint256,bool,uint256)'(
    tokenAmount: BigNumberish,
    redeemForEth: boolean,
    minReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  calculateMintAmount(
    incrementalAlpha: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateMintAmount(uint256,uint256)'(
    incrementalAlpha: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  claimUnbonded(
    proxyIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'claimUnbonded(uint256)'(
    proxyIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  decimals(overrides?: CallOverrides): Promise<number>

  'decimals()'(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  emergencyClaim(overrides?: Overrides): Promise<ContractTransaction>

  'emergencyClaim()'(overrides?: Overrides): Promise<ContractTransaction>

  emergencyUnbond(overrides?: Overrides): Promise<ContractTransaction>

  'emergencyUnbond()'(overrides?: Overrides): Promise<ContractTransaction>

  emergencyUnbondTimestamp(overrides?: CallOverrides): Promise<BigNumber>

  'emergencyUnbondTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

  exemptFromBlockLock(
    lockAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'exemptFromBlockLock(address)'(
    lockAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  feeDivisors(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      mintFee: BigNumber
      burnFee: BigNumber
      claimFee: BigNumber
    }
  >

  'feeDivisors()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      mintFee: BigNumber
      burnFee: BigNumber
      claimFee: BigNumber
    }
  >

  getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

  'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

  getFundBalances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>

  'getFundBalances()'(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>

  getNav(overrides?: CallOverrides): Promise<BigNumber>

  'getNav()'(overrides?: CallOverrides): Promise<BigNumber>

  getWithdrawableAmount(
    proxyIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getWithdrawableAmount(uint256)'(
    proxyIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getWithdrawableFees(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { feeAsset: string; feeAmount: BigNumber }>

  'getWithdrawableFees()'(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { feeAsset: string; feeAmount: BigNumber }>

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  initialize(
    _symbol: string,
    _wethToken: string,
    _alphaToken: string,
    _alphaStaking: string,
    _stakingFactory: string,
    _xTokenManager: string,
    _uniswapRouter: string,
    _sushiswapRouter: string,
    _feeDivisors: {
      mintFee: BigNumberish
      burnFee: BigNumberish
      claimFee: BigNumberish
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(string,address,address,address,address,address,address,address,tuple)'(
    _symbol: string,
    _wethToken: string,
    _alphaToken: string,
    _alphaStaking: string,
    _stakingFactory: string,
    _xTokenManager: string,
    _uniswapRouter: string,
    _sushiswapRouter: string,
    _feeDivisors: {
      mintFee: BigNumberish
      burnFee: BigNumberish
      claimFee: BigNumberish
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'lastLockedBlock(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  lastStakeTimestamp(overrides?: CallOverrides): Promise<BigNumber>

  'lastStakeTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

  mint(
    minReturn: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'mint(uint256)'(
    minReturn: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  mintWithToken(
    alphaAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'mintWithToken(uint256)'(
    alphaAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  pauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  'paused()'(overrides?: CallOverrides): Promise<boolean>

  removeBlockLockExemption(
    lockAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'removeBlockLockExemption(address)'(
    lockAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  setFeeDivisors(
    mintFeeDivisor: BigNumberish,
    burnFeeDivisor: BigNumberish,
    claimFeeDivisor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setFeeDivisors(uint256,uint256,uint256)'(
    mintFeeDivisor: BigNumberish,
    burnFeeDivisor: BigNumberish,
    claimFeeDivisor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  stake(
    proxyIndex: BigNumberish,
    amount: BigNumberish,
    force: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'stake(uint256,uint256,bool)'(
    proxyIndex: BigNumberish,
    amount: BigNumberish,
    force: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  'symbol()'(overrides?: CallOverrides): Promise<string>

  totalStakedBalance(overrides?: CallOverrides): Promise<BigNumber>

  'totalStakedBalance()'(overrides?: CallOverrides): Promise<BigNumber>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferFrom(address,address,uint256)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  unbond(
    proxyIndex: BigNumberish,
    force: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'unbond(uint256,bool)'(
    proxyIndex: BigNumberish,
    force: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  updateStakedBalance(overrides?: Overrides): Promise<ContractTransaction>

  'updateStakedBalance()'(overrides?: Overrides): Promise<ContractTransaction>

  updateSwapRouter(
    version: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'updateSwapRouter(uint8)'(
    version: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  updateUniswapV3AlphaPoolFee(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'updateUniswapV3AlphaPoolFee(uint24)'(
    fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  v3AlphaPoolFee(overrides?: CallOverrides): Promise<number>

  'v3AlphaPoolFee()'(overrides?: CallOverrides): Promise<number>

  withdrawFees(overrides?: Overrides): Promise<ContractTransaction>

  'withdrawFees()'(overrides?: Overrides): Promise<ContractTransaction>

  withdrawNativeToken(overrides?: Overrides): Promise<ContractTransaction>

  'withdrawNativeToken()'(overrides?: Overrides): Promise<ContractTransaction>

  withdrawTokenFromProxy(
    proxyIndex: BigNumberish,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdrawTokenFromProxy(uint256,address)'(
    proxyIndex: BigNumberish,
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  withdrawableAlphaFees(overrides?: CallOverrides): Promise<BigNumber>

  'withdrawableAlphaFees()'(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    adminActiveTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    blockLockExempt(arg0: string, overrides?: CallOverrides): Promise<boolean>

    'blockLockExempt(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    burn(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'burn(uint256,bool,uint256)'(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    calculateMintAmount(
      incrementalAlpha: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateMintAmount(uint256,uint256)'(
      incrementalAlpha: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    claimUnbonded(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'claimUnbonded(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    decimals(overrides?: CallOverrides): Promise<number>

    'decimals()'(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    emergencyClaim(overrides?: CallOverrides): Promise<void>

    'emergencyClaim()'(overrides?: CallOverrides): Promise<void>

    emergencyUnbond(overrides?: CallOverrides): Promise<void>

    'emergencyUnbond()'(overrides?: CallOverrides): Promise<void>

    emergencyUnbondTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'emergencyUnbondTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    exemptFromBlockLock(
      lockAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'exemptFromBlockLock(address)'(
      lockAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    feeDivisors(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    'feeDivisors()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getFundBalances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>

    'getFundBalances()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    getNav(overrides?: CallOverrides): Promise<BigNumber>

    'getNav()'(overrides?: CallOverrides): Promise<BigNumber>

    getWithdrawableAmount(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getWithdrawableAmount(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getWithdrawableFees(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { feeAsset: string; feeAmount: BigNumber }>

    'getWithdrawableFees()'(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { feeAsset: string; feeAmount: BigNumber }>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    initialize(
      _symbol: string,
      _wethToken: string,
      _alphaToken: string,
      _alphaStaking: string,
      _stakingFactory: string,
      _xTokenManager: string,
      _uniswapRouter: string,
      _sushiswapRouter: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(string,address,address,address,address,address,address,address,tuple)'(
      _symbol: string,
      _wethToken: string,
      _alphaToken: string,
      _alphaStaking: string,
      _stakingFactory: string,
      _xTokenManager: string,
      _uniswapRouter: string,
      _sushiswapRouter: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<void>

    lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    lastStakeTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'lastStakeTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    mint(minReturn: BigNumberish, overrides?: CallOverrides): Promise<void>

    'mint(uint256)'(
      minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    mintWithToken(
      alphaAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'mintWithToken(uint256)'(
      alphaAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    pauseContract(overrides?: CallOverrides): Promise<void>

    'pauseContract()'(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    'paused()'(overrides?: CallOverrides): Promise<boolean>

    removeBlockLockExemption(
      lockAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'removeBlockLockExemption(address)'(
      lockAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    stake(
      proxyIndex: BigNumberish,
      amount: BigNumberish,
      force: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'stake(uint256,uint256,bool)'(
      proxyIndex: BigNumberish,
      amount: BigNumberish,
      force: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    symbol(overrides?: CallOverrides): Promise<string>

    'symbol()'(overrides?: CallOverrides): Promise<string>

    totalStakedBalance(overrides?: CallOverrides): Promise<BigNumber>

    'totalStakedBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    unbond(
      proxyIndex: BigNumberish,
      force: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'unbond(uint256,bool)'(
      proxyIndex: BigNumberish,
      force: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    unpauseContract(overrides?: CallOverrides): Promise<void>

    'unpauseContract()'(overrides?: CallOverrides): Promise<void>

    updateStakedBalance(overrides?: CallOverrides): Promise<void>

    'updateStakedBalance()'(overrides?: CallOverrides): Promise<void>

    updateSwapRouter(
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'updateSwapRouter(uint8)'(
      version: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    updateUniswapV3AlphaPoolFee(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'updateUniswapV3AlphaPoolFee(uint24)'(
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    v3AlphaPoolFee(overrides?: CallOverrides): Promise<number>

    'v3AlphaPoolFee()'(overrides?: CallOverrides): Promise<number>

    withdrawFees(overrides?: CallOverrides): Promise<void>

    'withdrawFees()'(overrides?: CallOverrides): Promise<void>

    withdrawNativeToken(overrides?: CallOverrides): Promise<void>

    'withdrawNativeToken()'(overrides?: CallOverrides): Promise<void>

    withdrawTokenFromProxy(
      proxyIndex: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>

    'withdrawTokenFromProxy(uint256,address)'(
      proxyIndex: BigNumberish,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawableAlphaFees(overrides?: CallOverrides): Promise<BigNumber>

    'withdrawableAlphaFees()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter

    Claim(proxyIndex: null, amount: null): EventFilter

    FeeDivisorsSet(mintFee: null, burnFee: null, claimFee: null): EventFilter

    FeeWithdraw(fee: null): EventFilter

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter

    Paused(account: null): EventFilter

    Stake(proxyIndex: null, timestamp: null, amount: null): EventFilter

    Transfer(from: string | null, to: string | null, value: null): EventFilter

    Unbond(proxyIndex: null, timestamp: null, amount: null): EventFilter

    Unpaused(account: null): EventFilter

    UpdateStakedBalance(totalStaked: null): EventFilter

    UpdateSwapRouter(version: null): EventFilter

    UpdateUniswapV3AlphaPoolFee(fee: null): EventFilter
  }

  estimateGas: {
    adminActiveTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    blockLockExempt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'blockLockExempt(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'burn(uint256,bool,uint256)'(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    calculateMintAmount(
      incrementalAlpha: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateMintAmount(uint256,uint256)'(
      incrementalAlpha: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    claimUnbonded(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'claimUnbonded(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    emergencyClaim(overrides?: Overrides): Promise<BigNumber>

    'emergencyClaim()'(overrides?: Overrides): Promise<BigNumber>

    emergencyUnbond(overrides?: Overrides): Promise<BigNumber>

    'emergencyUnbond()'(overrides?: Overrides): Promise<BigNumber>

    emergencyUnbondTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'emergencyUnbondTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    exemptFromBlockLock(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'exemptFromBlockLock(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    feeDivisors(overrides?: CallOverrides): Promise<BigNumber>

    'feeDivisors()'(overrides?: CallOverrides): Promise<BigNumber>

    getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getFundBalances(overrides?: CallOverrides): Promise<BigNumber>

    'getFundBalances()'(overrides?: CallOverrides): Promise<BigNumber>

    getNav(overrides?: CallOverrides): Promise<BigNumber>

    'getNav()'(overrides?: CallOverrides): Promise<BigNumber>

    getWithdrawableAmount(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getWithdrawableAmount(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getWithdrawableFees(overrides?: CallOverrides): Promise<BigNumber>

    'getWithdrawableFees()'(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    initialize(
      _symbol: string,
      _wethToken: string,
      _alphaToken: string,
      _alphaStaking: string,
      _stakingFactory: string,
      _xTokenManager: string,
      _uniswapRouter: string,
      _sushiswapRouter: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(string,address,address,address,address,address,address,address,tuple)'(
      _symbol: string,
      _wethToken: string,
      _alphaToken: string,
      _alphaStaking: string,
      _stakingFactory: string,
      _xTokenManager: string,
      _uniswapRouter: string,
      _sushiswapRouter: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: Overrides
    ): Promise<BigNumber>

    lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    lastStakeTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'lastStakeTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    mint(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'mint(uint256)'(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    mintWithToken(
      alphaAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'mintWithToken(uint256)'(
      alphaAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    pauseContract(overrides?: Overrides): Promise<BigNumber>

    'pauseContract()'(overrides?: Overrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>

    removeBlockLockExemption(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'removeBlockLockExemption(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    stake(
      proxyIndex: BigNumberish,
      amount: BigNumberish,
      force: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'stake(uint256,uint256,bool)'(
      proxyIndex: BigNumberish,
      amount: BigNumberish,
      force: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>

    totalStakedBalance(overrides?: CallOverrides): Promise<BigNumber>

    'totalStakedBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    unbond(
      proxyIndex: BigNumberish,
      force: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'unbond(uint256,bool)'(
      proxyIndex: BigNumberish,
      force: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    unpauseContract(overrides?: Overrides): Promise<BigNumber>

    'unpauseContract()'(overrides?: Overrides): Promise<BigNumber>

    updateStakedBalance(overrides?: Overrides): Promise<BigNumber>

    'updateStakedBalance()'(overrides?: Overrides): Promise<BigNumber>

    updateSwapRouter(
      version: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'updateSwapRouter(uint8)'(
      version: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    updateUniswapV3AlphaPoolFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'updateUniswapV3AlphaPoolFee(uint24)'(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    v3AlphaPoolFee(overrides?: CallOverrides): Promise<BigNumber>

    'v3AlphaPoolFee()'(overrides?: CallOverrides): Promise<BigNumber>

    withdrawFees(overrides?: Overrides): Promise<BigNumber>

    'withdrawFees()'(overrides?: Overrides): Promise<BigNumber>

    withdrawNativeToken(overrides?: Overrides): Promise<BigNumber>

    'withdrawNativeToken()'(overrides?: Overrides): Promise<BigNumber>

    withdrawTokenFromProxy(
      proxyIndex: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'withdrawTokenFromProxy(uint256,address)'(
      proxyIndex: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    withdrawableAlphaFees(overrides?: CallOverrides): Promise<BigNumber>

    'withdrawableAlphaFees()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    adminActiveTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'adminActiveTimestamp()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    blockLockExempt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'blockLockExempt(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    burn(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'burn(uint256,bool,uint256)'(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    calculateMintAmount(
      incrementalAlpha: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateMintAmount(uint256,uint256)'(
      incrementalAlpha: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    claimUnbonded(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'claimUnbonded(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    emergencyClaim(overrides?: Overrides): Promise<PopulatedTransaction>

    'emergencyClaim()'(overrides?: Overrides): Promise<PopulatedTransaction>

    emergencyUnbond(overrides?: Overrides): Promise<PopulatedTransaction>

    'emergencyUnbond()'(overrides?: Overrides): Promise<PopulatedTransaction>

    emergencyUnbondTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'emergencyUnbondTimestamp()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    exemptFromBlockLock(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'exemptFromBlockLock(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    feeDivisors(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'feeDivisors()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getBufferBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getBufferBalance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getFundBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getFundBalances()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNav(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getNav()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getWithdrawableAmount(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getWithdrawableAmount(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getWithdrawableFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getWithdrawableFees()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    initialize(
      _symbol: string,
      _wethToken: string,
      _alphaToken: string,
      _alphaStaking: string,
      _stakingFactory: string,
      _xTokenManager: string,
      _uniswapRouter: string,
      _sushiswapRouter: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(string,address,address,address,address,address,address,address,tuple)'(
      _symbol: string,
      _wethToken: string,
      _alphaToken: string,
      _alphaStaking: string,
      _stakingFactory: string,
      _xTokenManager: string,
      _uniswapRouter: string,
      _sushiswapRouter: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    lastLockedBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    lastStakeTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'lastStakeTimestamp()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    mint(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'mint(uint256)'(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    mintWithToken(
      alphaAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'mintWithToken(uint256)'(
      alphaAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    removeBlockLockExemption(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'removeBlockLockExemption(address)'(
      lockAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    stake(
      proxyIndex: BigNumberish,
      amount: BigNumberish,
      force: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'stake(uint256,uint256,bool)'(
      proxyIndex: BigNumberish,
      amount: BigNumberish,
      force: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalStakedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalStakedBalance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    unbond(
      proxyIndex: BigNumberish,
      force: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'unbond(uint256,bool)'(
      proxyIndex: BigNumberish,
      force: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    unpauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    updateStakedBalance(overrides?: Overrides): Promise<PopulatedTransaction>

    'updateStakedBalance()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    updateSwapRouter(
      version: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'updateSwapRouter(uint8)'(
      version: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    updateUniswapV3AlphaPoolFee(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'updateUniswapV3AlphaPoolFee(uint24)'(
      fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    v3AlphaPoolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'v3AlphaPoolFee()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdrawFees(overrides?: Overrides): Promise<PopulatedTransaction>

    'withdrawFees()'(overrides?: Overrides): Promise<PopulatedTransaction>

    withdrawNativeToken(overrides?: Overrides): Promise<PopulatedTransaction>

    'withdrawNativeToken()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    withdrawTokenFromProxy(
      proxyIndex: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdrawTokenFromProxy(uint256,address)'(
      proxyIndex: BigNumberish,
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    withdrawableAlphaFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'withdrawableAlphaFees()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
