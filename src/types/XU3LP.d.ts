/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface XU3LPInterface extends ethers.utils.Interface {
  functions: {
    'adminActiveTimestamp()': FunctionFragment
    'adminStake(uint256,uint256)': FunctionFragment
    'adminSwap(uint256,bool)': FunctionFragment
    'adminSwapOneInch(uint256,bool,bytes)': FunctionFragment
    'adminUnstake(uint256,uint256)': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'approveOneInch()': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'burn(uint8,uint256)': FunctionFragment
    'calculateMintAmount(uint256,uint256)': FunctionFragment
    'calculatePoolMintedAmounts(uint256,uint256)': FunctionFragment
    'collect()': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'emergencyUnstake(uint256,uint256)': FunctionFragment
    'feeDivisors()': FunctionFragment
    'getAmountInAsset0Terms(uint256)': FunctionFragment
    'getAmountInAsset1Terms(uint256)': FunctionFragment
    'getAmountsForLiquidity(uint128)': FunctionFragment
    'getAsset0Price()': FunctionFragment
    'getAsset1Price()': FunctionFragment
    'getBufferBalance()': FunctionFragment
    'getBufferToken0Balance()': FunctionFragment
    'getBufferToken1Balance()': FunctionFragment
    'getBufferTokenBalance()': FunctionFragment
    'getLiquidityForAmounts(uint256,uint256)': FunctionFragment
    'getNav()': FunctionFragment
    'getPositionLiquidity()': FunctionFragment
    'getStakedBalance()': FunctionFragment
    'getStakedTokenBalance()': FunctionFragment
    'getTargetBufferTokenBalance()': FunctionFragment
    'getTicks()': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'initialize(string,int24,int24,address,address,address,address,address,tuple,uint256,uint8,uint8)': FunctionFragment
    'lastLockedBlock(address)': FunctionFragment
    'migratePosition(int24,int24)': FunctionFragment
    'mintInitial(uint256,uint256)': FunctionFragment
    'mintWithToken(uint8,uint256)': FunctionFragment
    'name()': FunctionFragment
    'owner()': FunctionFragment
    'pauseContract()': FunctionFragment
    'paused()': FunctionFragment
    'poolAddress()': FunctionFragment
    'positionManagerAddress()': FunctionFragment
    'rebalance()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'resetTwap()': FunctionFragment
    'routerAddress()': FunctionFragment
    'setFeeDivisors(tuple)': FunctionFragment
    'setMaxTwapDeviationDivisor(uint256)': FunctionFragment
    'setTwapPeriod(uint32)': FunctionFragment
    'setxTokenManager(address)': FunctionFragment
    'symbol()': FunctionFragment
    'token0DecimalMultiplier()': FunctionFragment
    'token0Decimals()': FunctionFragment
    'token1DecimalMultiplier()': FunctionFragment
    'token1Decimals()': FunctionFragment
    'tokenDiffDecimalMultiplier()': FunctionFragment
    'tokenId()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpauseContract()': FunctionFragment
    'withdrawFees()': FunctionFragment
    'withdrawToken(address,address)': FunctionFragment
    'withdrawableToken0Fees()': FunctionFragment
    'withdrawableToken1Fees()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'adminActiveTimestamp',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'adminStake',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'adminSwap',
    values: [BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'adminSwapOneInch',
    values: [BigNumberish, boolean, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'adminUnstake',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'approveOneInch',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(
    functionFragment: 'burn',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateMintAmount',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculatePoolMintedAmounts',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'collect', values?: undefined): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyUnstake',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'feeDivisors',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getAmountInAsset0Terms',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getAmountInAsset1Terms',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getAmountsForLiquidity',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getAsset0Price',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getAsset1Price',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getBufferBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getBufferToken0Balance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getBufferToken1Balance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getBufferTokenBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getLiquidityForAmounts',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'getNav', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getPositionLiquidity',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getStakedBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getStakedTokenBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getTargetBufferTokenBalance',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'getTicks', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string,
      string,
      string,
      { mintFee: BigNumberish; burnFee: BigNumberish; claimFee: BigNumberish },
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'lastLockedBlock',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'migratePosition',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'mintInitial',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'mintWithToken',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'pauseContract',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'poolAddress',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'positionManagerAddress',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'rebalance', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'resetTwap', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'routerAddress',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setFeeDivisors',
    values: [
      { mintFee: BigNumberish; burnFee: BigNumberish; claimFee: BigNumberish }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'setMaxTwapDeviationDivisor',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setTwapPeriod',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setxTokenManager',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'token0DecimalMultiplier',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'token0Decimals',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'token1DecimalMultiplier',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'token1Decimals',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'tokenDiffDecimalMultiplier',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'tokenId', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'unpauseContract',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawFees',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawToken',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawableToken0Fees',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawableToken1Fees',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'adminActiveTimestamp',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'adminStake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'adminSwap', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'adminSwapOneInch',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'adminUnstake',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'approveOneInch',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'calculateMintAmount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculatePoolMintedAmounts',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'collect', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'emergencyUnstake',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'feeDivisors', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getAmountInAsset0Terms',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAmountInAsset1Terms',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAmountsForLiquidity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAsset0Price',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAsset1Price',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getBufferBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getBufferToken0Balance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getBufferToken1Balance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getBufferTokenBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLiquidityForAmounts',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getNav', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getPositionLiquidity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStakedBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStakedTokenBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTargetBufferTokenBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getTicks', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lastLockedBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'migratePosition',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'mintInitial', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'mintWithToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'pauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'poolAddress', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'positionManagerAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'rebalance', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'resetTwap', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'routerAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setFeeDivisors',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setMaxTwapDeviationDivisor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setTwapPeriod',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setxTokenManager',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'token0DecimalMultiplier',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'token0Decimals',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'token1DecimalMultiplier',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'token1Decimals',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'tokenDiffDecimalMultiplier',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'tokenId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'unpauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawFees',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawableToken0Fees',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawableToken1Fees',
    data: BytesLike
  ): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'FeeCollected(uint256,uint256)': EventFragment
    'FeeDivisorsSet(uint256,uint256,uint256)': EventFragment
    'FeeWithdraw(uint256,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'Rebalance()': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FeeCollected'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FeeDivisorsSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FeeWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Rebalance'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export class XU3LP extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: XU3LPInterface

  functions: {
    adminActiveTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>

    'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<[BigNumber]>

    adminStake(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'adminStake(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    adminSwap(
      amount: BigNumberish,
      _0for1: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'adminSwap(uint256,bool)'(
      amount: BigNumberish,
      _0for1: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    adminSwapOneInch(
      minReturn: BigNumberish,
      _0for1: boolean,
      _oneInchData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'adminSwapOneInch(uint256,bool,bytes)'(
      minReturn: BigNumberish,
      _0for1: boolean,
      _oneInchData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    adminUnstake(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'adminUnstake(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    approveOneInch(overrides?: Overrides): Promise<ContractTransaction>

    'approveOneInch()'(overrides?: Overrides): Promise<ContractTransaction>

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    burn(
      outputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'burn(uint8,uint256)'(
      outputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    calculateMintAmount(
      _amount: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintAmount: BigNumber }>

    'calculateMintAmount(uint256,uint256)'(
      _amount: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintAmount: BigNumber }>

    calculatePoolMintedAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount0Minted: BigNumber
        amount1Minted: BigNumber
      }
    >

    'calculatePoolMintedAmounts(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount0Minted: BigNumber
        amount1Minted: BigNumber
      }
    >

    collect(overrides?: Overrides): Promise<ContractTransaction>

    'collect()'(overrides?: Overrides): Promise<ContractTransaction>

    decimals(overrides?: CallOverrides): Promise<[number]>

    'decimals()'(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    emergencyUnstake(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'emergencyUnstake(uint256,uint256)'(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    feeDivisors(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    'feeDivisors()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    getAmountInAsset0Terms(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getAmountInAsset0Terms(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getAmountInAsset1Terms(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getAmountInAsset1Terms(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getAmountsForLiquidity(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getAmountsForLiquidity(uint128)'(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    getAsset0Price(overrides?: CallOverrides): Promise<[BigNumber]>

    'getAsset0Price()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getAsset1Price(overrides?: CallOverrides): Promise<[BigNumber]>

    'getAsset1Price()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getBufferBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getBufferToken0Balance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount0: BigNumber }>

    'getBufferToken0Balance()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount0: BigNumber }>

    getBufferToken1Balance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount1: BigNumber }>

    'getBufferToken1Balance()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount1: BigNumber }>

    getBufferTokenBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getBufferTokenBalance()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    getLiquidityForAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>

    'getLiquidityForAmounts(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>

    getNav(overrides?: CallOverrides): Promise<[BigNumber]>

    'getNav()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getPositionLiquidity(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>

    'getPositionLiquidity()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>

    getStakedBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    'getStakedBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getStakedTokenBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getStakedTokenBalance()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    getTargetBufferTokenBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getTargetBufferTokenBalance()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    getTicks(
      overrides?: CallOverrides
    ): Promise<[number, number] & { tick0: number; tick1: number }>

    'getTicks()'(
      overrides?: CallOverrides
    ): Promise<[number, number] & { tick0: number; tick1: number }>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    initialize(
      _symbol: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _token0: string,
      _token1: string,
      _pool: string,
      _router: string,
      _positionManager: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      _maxTwapDeviationDivisor: BigNumberish,
      _token0Decimals: BigNumberish,
      _token1Decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(string,int24,int24,address,address,address,address,address,(uint256,uint256,uint256),uint256,uint8,uint8)'(
      _symbol: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _token0: string,
      _token1: string,
      _pool: string,
      _router: string,
      _positionManager: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      _maxTwapDeviationDivisor: BigNumberish,
      _token0Decimals: BigNumberish,
      _token1Decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    lastLockedBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    migratePosition(
      newTickLower: BigNumberish,
      newTickUpper: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'migratePosition(int24,int24)'(
      newTickLower: BigNumberish,
      newTickUpper: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    mintInitial(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'mintInitial(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    mintWithToken(
      inputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'mintWithToken(uint8,uint256)'(
      inputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    'name()'(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    pauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>

    poolAddress(overrides?: CallOverrides): Promise<[string]>

    'poolAddress()'(overrides?: CallOverrides): Promise<[string]>

    positionManagerAddress(overrides?: CallOverrides): Promise<[string]>

    'positionManagerAddress()'(overrides?: CallOverrides): Promise<[string]>

    rebalance(overrides?: Overrides): Promise<ContractTransaction>

    'rebalance()'(overrides?: Overrides): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    resetTwap(overrides?: Overrides): Promise<ContractTransaction>

    'resetTwap()'(overrides?: Overrides): Promise<ContractTransaction>

    routerAddress(overrides?: CallOverrides): Promise<[string]>

    'routerAddress()'(overrides?: CallOverrides): Promise<[string]>

    setFeeDivisors(
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setFeeDivisors((uint256,uint256,uint256))'(
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setMaxTwapDeviationDivisor(
      newDeviationDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setMaxTwapDeviationDivisor(uint256)'(
      newDeviationDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setTwapPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setTwapPeriod(uint32)'(
      newPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setxTokenManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setxTokenManager(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    'symbol()'(overrides?: CallOverrides): Promise<[string]>

    token0DecimalMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>

    'token0DecimalMultiplier()'(overrides?: CallOverrides): Promise<[BigNumber]>

    token0Decimals(overrides?: CallOverrides): Promise<[number]>

    'token0Decimals()'(overrides?: CallOverrides): Promise<[number]>

    token1DecimalMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>

    'token1DecimalMultiplier()'(overrides?: CallOverrides): Promise<[BigNumber]>

    token1Decimals(overrides?: CallOverrides): Promise<[number]>

    'token1Decimals()'(overrides?: CallOverrides): Promise<[number]>

    tokenDiffDecimalMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>

    'tokenDiffDecimalMultiplier()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>

    'tokenId()'(overrides?: CallOverrides): Promise<[BigNumber]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    withdrawFees(overrides?: Overrides): Promise<ContractTransaction>

    'withdrawFees()'(overrides?: Overrides): Promise<ContractTransaction>

    withdrawToken(
      token: string,
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'withdrawToken(address,address)'(
      token: string,
      receiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    withdrawableToken0Fees(overrides?: CallOverrides): Promise<[BigNumber]>

    'withdrawableToken0Fees()'(overrides?: CallOverrides): Promise<[BigNumber]>

    withdrawableToken1Fees(overrides?: CallOverrides): Promise<[BigNumber]>

    'withdrawableToken1Fees()'(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  adminActiveTimestamp(overrides?: CallOverrides): Promise<BigNumber>

  'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

  adminStake(
    amount0: BigNumberish,
    amount1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'adminStake(uint256,uint256)'(
    amount0: BigNumberish,
    amount1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  adminSwap(
    amount: BigNumberish,
    _0for1: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'adminSwap(uint256,bool)'(
    amount: BigNumberish,
    _0for1: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  adminSwapOneInch(
    minReturn: BigNumberish,
    _0for1: boolean,
    _oneInchData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'adminSwapOneInch(uint256,bool,bytes)'(
    minReturn: BigNumberish,
    _0for1: boolean,
    _oneInchData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  adminUnstake(
    amount0: BigNumberish,
    amount1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'adminUnstake(uint256,uint256)'(
    amount0: BigNumberish,
    amount1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  approveOneInch(overrides?: Overrides): Promise<ContractTransaction>

  'approveOneInch()'(overrides?: Overrides): Promise<ContractTransaction>

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

  'balanceOf(address)'(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  burn(
    outputAsset: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'burn(uint8,uint256)'(
    outputAsset: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  calculateMintAmount(
    _amount: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateMintAmount(uint256,uint256)'(
    _amount: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculatePoolMintedAmounts(
    amount0: BigNumberish,
    amount1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      amount0Minted: BigNumber
      amount1Minted: BigNumber
    }
  >

  'calculatePoolMintedAmounts(uint256,uint256)'(
    amount0: BigNumberish,
    amount1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      amount0Minted: BigNumber
      amount1Minted: BigNumber
    }
  >

  collect(overrides?: Overrides): Promise<ContractTransaction>

  'collect()'(overrides?: Overrides): Promise<ContractTransaction>

  decimals(overrides?: CallOverrides): Promise<number>

  'decimals()'(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  emergencyUnstake(
    _amount0: BigNumberish,
    _amount1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'emergencyUnstake(uint256,uint256)'(
    _amount0: BigNumberish,
    _amount1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  feeDivisors(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      mintFee: BigNumber
      burnFee: BigNumber
      claimFee: BigNumber
    }
  >

  'feeDivisors()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      mintFee: BigNumber
      burnFee: BigNumber
      claimFee: BigNumber
    }
  >

  getAmountInAsset0Terms(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getAmountInAsset0Terms(uint256)'(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getAmountInAsset1Terms(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getAmountInAsset1Terms(uint256)'(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getAmountsForLiquidity(
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

  'getAmountsForLiquidity(uint128)'(
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

  getAsset0Price(overrides?: CallOverrides): Promise<BigNumber>

  'getAsset0Price()'(overrides?: CallOverrides): Promise<BigNumber>

  getAsset1Price(overrides?: CallOverrides): Promise<BigNumber>

  'getAsset1Price()'(overrides?: CallOverrides): Promise<BigNumber>

  getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

  'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

  getBufferToken0Balance(overrides?: CallOverrides): Promise<BigNumber>

  'getBufferToken0Balance()'(overrides?: CallOverrides): Promise<BigNumber>

  getBufferToken1Balance(overrides?: CallOverrides): Promise<BigNumber>

  'getBufferToken1Balance()'(overrides?: CallOverrides): Promise<BigNumber>

  getBufferTokenBalance(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

  'getBufferTokenBalance()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

  getLiquidityForAmounts(
    amount0: BigNumberish,
    amount1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getLiquidityForAmounts(uint256,uint256)'(
    amount0: BigNumberish,
    amount1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getNav(overrides?: CallOverrides): Promise<BigNumber>

  'getNav()'(overrides?: CallOverrides): Promise<BigNumber>

  getPositionLiquidity(overrides?: CallOverrides): Promise<BigNumber>

  'getPositionLiquidity()'(overrides?: CallOverrides): Promise<BigNumber>

  getStakedBalance(overrides?: CallOverrides): Promise<BigNumber>

  'getStakedBalance()'(overrides?: CallOverrides): Promise<BigNumber>

  getStakedTokenBalance(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

  'getStakedTokenBalance()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

  getTargetBufferTokenBalance(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

  'getTargetBufferTokenBalance()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

  getTicks(
    overrides?: CallOverrides
  ): Promise<[number, number] & { tick0: number; tick1: number }>

  'getTicks()'(
    overrides?: CallOverrides
  ): Promise<[number, number] & { tick0: number; tick1: number }>

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  initialize(
    _symbol: string,
    _tickLower: BigNumberish,
    _tickUpper: BigNumberish,
    _token0: string,
    _token1: string,
    _pool: string,
    _router: string,
    _positionManager: string,
    _feeDivisors: {
      mintFee: BigNumberish
      burnFee: BigNumberish
      claimFee: BigNumberish
    },
    _maxTwapDeviationDivisor: BigNumberish,
    _token0Decimals: BigNumberish,
    _token1Decimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(string,int24,int24,address,address,address,address,address,(uint256,uint256,uint256),uint256,uint8,uint8)'(
    _symbol: string,
    _tickLower: BigNumberish,
    _tickUpper: BigNumberish,
    _token0: string,
    _token1: string,
    _pool: string,
    _router: string,
    _positionManager: string,
    _feeDivisors: {
      mintFee: BigNumberish
      burnFee: BigNumberish
      claimFee: BigNumberish
    },
    _maxTwapDeviationDivisor: BigNumberish,
    _token0Decimals: BigNumberish,
    _token1Decimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'lastLockedBlock(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  migratePosition(
    newTickLower: BigNumberish,
    newTickUpper: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'migratePosition(int24,int24)'(
    newTickLower: BigNumberish,
    newTickUpper: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  mintInitial(
    amount0: BigNumberish,
    amount1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'mintInitial(uint256,uint256)'(
    amount0: BigNumberish,
    amount1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  mintWithToken(
    inputAsset: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'mintWithToken(uint8,uint256)'(
    inputAsset: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  pauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  'paused()'(overrides?: CallOverrides): Promise<boolean>

  poolAddress(overrides?: CallOverrides): Promise<string>

  'poolAddress()'(overrides?: CallOverrides): Promise<string>

  positionManagerAddress(overrides?: CallOverrides): Promise<string>

  'positionManagerAddress()'(overrides?: CallOverrides): Promise<string>

  rebalance(overrides?: Overrides): Promise<ContractTransaction>

  'rebalance()'(overrides?: Overrides): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  resetTwap(overrides?: Overrides): Promise<ContractTransaction>

  'resetTwap()'(overrides?: Overrides): Promise<ContractTransaction>

  routerAddress(overrides?: CallOverrides): Promise<string>

  'routerAddress()'(overrides?: CallOverrides): Promise<string>

  setFeeDivisors(
    _feeDivisors: {
      mintFee: BigNumberish
      burnFee: BigNumberish
      claimFee: BigNumberish
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setFeeDivisors((uint256,uint256,uint256))'(
    _feeDivisors: {
      mintFee: BigNumberish
      burnFee: BigNumberish
      claimFee: BigNumberish
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setMaxTwapDeviationDivisor(
    newDeviationDivisor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setMaxTwapDeviationDivisor(uint256)'(
    newDeviationDivisor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setTwapPeriod(
    newPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setTwapPeriod(uint32)'(
    newPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setxTokenManager(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setxTokenManager(address)'(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  'symbol()'(overrides?: CallOverrides): Promise<string>

  token0DecimalMultiplier(overrides?: CallOverrides): Promise<BigNumber>

  'token0DecimalMultiplier()'(overrides?: CallOverrides): Promise<BigNumber>

  token0Decimals(overrides?: CallOverrides): Promise<number>

  'token0Decimals()'(overrides?: CallOverrides): Promise<number>

  token1DecimalMultiplier(overrides?: CallOverrides): Promise<BigNumber>

  'token1DecimalMultiplier()'(overrides?: CallOverrides): Promise<BigNumber>

  token1Decimals(overrides?: CallOverrides): Promise<number>

  'token1Decimals()'(overrides?: CallOverrides): Promise<number>

  tokenDiffDecimalMultiplier(overrides?: CallOverrides): Promise<BigNumber>

  'tokenDiffDecimalMultiplier()'(overrides?: CallOverrides): Promise<BigNumber>

  tokenId(overrides?: CallOverrides): Promise<BigNumber>

  'tokenId()'(overrides?: CallOverrides): Promise<BigNumber>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferFrom(address,address,uint256)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  withdrawFees(overrides?: Overrides): Promise<ContractTransaction>

  'withdrawFees()'(overrides?: Overrides): Promise<ContractTransaction>

  withdrawToken(
    token: string,
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'withdrawToken(address,address)'(
    token: string,
    receiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  withdrawableToken0Fees(overrides?: CallOverrides): Promise<BigNumber>

  'withdrawableToken0Fees()'(overrides?: CallOverrides): Promise<BigNumber>

  withdrawableToken1Fees(overrides?: CallOverrides): Promise<BigNumber>

  'withdrawableToken1Fees()'(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    adminActiveTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    adminStake(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'adminStake(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    adminSwap(
      amount: BigNumberish,
      _0for1: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'adminSwap(uint256,bool)'(
      amount: BigNumberish,
      _0for1: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    adminSwapOneInch(
      minReturn: BigNumberish,
      _0for1: boolean,
      _oneInchData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'adminSwapOneInch(uint256,bool,bytes)'(
      minReturn: BigNumberish,
      _0for1: boolean,
      _oneInchData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    adminUnstake(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'adminUnstake(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    approveOneInch(overrides?: CallOverrides): Promise<void>

    'approveOneInch()'(overrides?: CallOverrides): Promise<void>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      outputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'burn(uint8,uint256)'(
      outputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    calculateMintAmount(
      _amount: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateMintAmount(uint256,uint256)'(
      _amount: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculatePoolMintedAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount0Minted: BigNumber
        amount1Minted: BigNumber
      }
    >

    'calculatePoolMintedAmounts(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount0Minted: BigNumber
        amount1Minted: BigNumber
      }
    >

    collect(overrides?: CallOverrides): Promise<void>

    'collect()'(overrides?: CallOverrides): Promise<void>

    decimals(overrides?: CallOverrides): Promise<number>

    'decimals()'(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    emergencyUnstake(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'emergencyUnstake(uint256,uint256)'(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    feeDivisors(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    'feeDivisors()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    getAmountInAsset0Terms(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getAmountInAsset0Terms(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountInAsset1Terms(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getAmountInAsset1Terms(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountsForLiquidity(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getAmountsForLiquidity(uint128)'(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    getAsset0Price(overrides?: CallOverrides): Promise<BigNumber>

    'getAsset0Price()'(overrides?: CallOverrides): Promise<BigNumber>

    getAsset1Price(overrides?: CallOverrides): Promise<BigNumber>

    'getAsset1Price()'(overrides?: CallOverrides): Promise<BigNumber>

    getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getBufferToken0Balance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferToken0Balance()'(overrides?: CallOverrides): Promise<BigNumber>

    getBufferToken1Balance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferToken1Balance()'(overrides?: CallOverrides): Promise<BigNumber>

    getBufferTokenBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getBufferTokenBalance()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    getLiquidityForAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getLiquidityForAmounts(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNav(overrides?: CallOverrides): Promise<BigNumber>

    'getNav()'(overrides?: CallOverrides): Promise<BigNumber>

    getPositionLiquidity(overrides?: CallOverrides): Promise<BigNumber>

    'getPositionLiquidity()'(overrides?: CallOverrides): Promise<BigNumber>

    getStakedBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getStakedBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getStakedTokenBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getStakedTokenBalance()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    getTargetBufferTokenBalance(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getTargetBufferTokenBalance()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    getTicks(
      overrides?: CallOverrides
    ): Promise<[number, number] & { tick0: number; tick1: number }>

    'getTicks()'(
      overrides?: CallOverrides
    ): Promise<[number, number] & { tick0: number; tick1: number }>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    initialize(
      _symbol: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _token0: string,
      _token1: string,
      _pool: string,
      _router: string,
      _positionManager: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      _maxTwapDeviationDivisor: BigNumberish,
      _token0Decimals: BigNumberish,
      _token1Decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(string,int24,int24,address,address,address,address,address,(uint256,uint256,uint256),uint256,uint8,uint8)'(
      _symbol: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _token0: string,
      _token1: string,
      _pool: string,
      _router: string,
      _positionManager: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      _maxTwapDeviationDivisor: BigNumberish,
      _token0Decimals: BigNumberish,
      _token1Decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    migratePosition(
      newTickLower: BigNumberish,
      newTickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'migratePosition(int24,int24)'(
      newTickLower: BigNumberish,
      newTickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    mintInitial(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'mintInitial(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    mintWithToken(
      inputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'mintWithToken(uint8,uint256)'(
      inputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    pauseContract(overrides?: CallOverrides): Promise<boolean>

    'pauseContract()'(overrides?: CallOverrides): Promise<boolean>

    paused(overrides?: CallOverrides): Promise<boolean>

    'paused()'(overrides?: CallOverrides): Promise<boolean>

    poolAddress(overrides?: CallOverrides): Promise<string>

    'poolAddress()'(overrides?: CallOverrides): Promise<string>

    positionManagerAddress(overrides?: CallOverrides): Promise<string>

    'positionManagerAddress()'(overrides?: CallOverrides): Promise<string>

    rebalance(overrides?: CallOverrides): Promise<void>

    'rebalance()'(overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    resetTwap(overrides?: CallOverrides): Promise<void>

    'resetTwap()'(overrides?: CallOverrides): Promise<void>

    routerAddress(overrides?: CallOverrides): Promise<string>

    'routerAddress()'(overrides?: CallOverrides): Promise<string>

    setFeeDivisors(
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<void>

    'setFeeDivisors((uint256,uint256,uint256))'(
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<void>

    setMaxTwapDeviationDivisor(
      newDeviationDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setMaxTwapDeviationDivisor(uint256)'(
      newDeviationDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setTwapPeriod(
      newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setTwapPeriod(uint32)'(
      newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setxTokenManager(_manager: string, overrides?: CallOverrides): Promise<void>

    'setxTokenManager(address)'(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<void>

    symbol(overrides?: CallOverrides): Promise<string>

    'symbol()'(overrides?: CallOverrides): Promise<string>

    token0DecimalMultiplier(overrides?: CallOverrides): Promise<BigNumber>

    'token0DecimalMultiplier()'(overrides?: CallOverrides): Promise<BigNumber>

    token0Decimals(overrides?: CallOverrides): Promise<number>

    'token0Decimals()'(overrides?: CallOverrides): Promise<number>

    token1DecimalMultiplier(overrides?: CallOverrides): Promise<BigNumber>

    'token1DecimalMultiplier()'(overrides?: CallOverrides): Promise<BigNumber>

    token1Decimals(overrides?: CallOverrides): Promise<number>

    'token1Decimals()'(overrides?: CallOverrides): Promise<number>

    tokenDiffDecimalMultiplier(overrides?: CallOverrides): Promise<BigNumber>

    'tokenDiffDecimalMultiplier()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    tokenId(overrides?: CallOverrides): Promise<BigNumber>

    'tokenId()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    unpauseContract(overrides?: CallOverrides): Promise<boolean>

    'unpauseContract()'(overrides?: CallOverrides): Promise<boolean>

    withdrawFees(overrides?: CallOverrides): Promise<void>

    'withdrawFees()'(overrides?: CallOverrides): Promise<void>

    withdrawToken(
      token: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>

    'withdrawToken(address,address)'(
      token: string,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawableToken0Fees(overrides?: CallOverrides): Promise<BigNumber>

    'withdrawableToken0Fees()'(overrides?: CallOverrides): Promise<BigNumber>

    withdrawableToken1Fees(overrides?: CallOverrides): Promise<BigNumber>

    'withdrawableToken1Fees()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter

    FeeCollected(token0Fee: null, token1Fee: null): EventFilter

    FeeDivisorsSet(mintFee: null, burnFee: null, claimFee: null): EventFilter

    FeeWithdraw(token0Fee: null, token1Fee: null): EventFilter

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter

    Paused(account: null): EventFilter

    Rebalance(): EventFilter

    Transfer(from: string | null, to: string | null, value: null): EventFilter

    Unpaused(account: null): EventFilter
  }

  estimateGas: {
    adminActiveTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    adminStake(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'adminStake(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    adminSwap(
      amount: BigNumberish,
      _0for1: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'adminSwap(uint256,bool)'(
      amount: BigNumberish,
      _0for1: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    adminSwapOneInch(
      minReturn: BigNumberish,
      _0for1: boolean,
      _oneInchData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'adminSwapOneInch(uint256,bool,bytes)'(
      minReturn: BigNumberish,
      _0for1: boolean,
      _oneInchData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    adminUnstake(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'adminUnstake(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    approveOneInch(overrides?: Overrides): Promise<BigNumber>

    'approveOneInch()'(overrides?: Overrides): Promise<BigNumber>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      outputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'burn(uint8,uint256)'(
      outputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    calculateMintAmount(
      _amount: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateMintAmount(uint256,uint256)'(
      _amount: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculatePoolMintedAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculatePoolMintedAmounts(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    collect(overrides?: Overrides): Promise<BigNumber>

    'collect()'(overrides?: Overrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    emergencyUnstake(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'emergencyUnstake(uint256,uint256)'(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    feeDivisors(overrides?: CallOverrides): Promise<BigNumber>

    'feeDivisors()'(overrides?: CallOverrides): Promise<BigNumber>

    getAmountInAsset0Terms(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getAmountInAsset0Terms(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountInAsset1Terms(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getAmountInAsset1Terms(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountsForLiquidity(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getAmountsForLiquidity(uint128)'(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAsset0Price(overrides?: CallOverrides): Promise<BigNumber>

    'getAsset0Price()'(overrides?: CallOverrides): Promise<BigNumber>

    getAsset1Price(overrides?: CallOverrides): Promise<BigNumber>

    'getAsset1Price()'(overrides?: CallOverrides): Promise<BigNumber>

    getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getBufferToken0Balance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferToken0Balance()'(overrides?: CallOverrides): Promise<BigNumber>

    getBufferToken1Balance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferToken1Balance()'(overrides?: CallOverrides): Promise<BigNumber>

    getBufferTokenBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferTokenBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getLiquidityForAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getLiquidityForAmounts(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNav(overrides?: CallOverrides): Promise<BigNumber>

    'getNav()'(overrides?: CallOverrides): Promise<BigNumber>

    getPositionLiquidity(overrides?: CallOverrides): Promise<BigNumber>

    'getPositionLiquidity()'(overrides?: CallOverrides): Promise<BigNumber>

    getStakedBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getStakedBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getStakedTokenBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getStakedTokenBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getTargetBufferTokenBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getTargetBufferTokenBalance()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTicks(overrides?: CallOverrides): Promise<BigNumber>

    'getTicks()'(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    initialize(
      _symbol: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _token0: string,
      _token1: string,
      _pool: string,
      _router: string,
      _positionManager: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      _maxTwapDeviationDivisor: BigNumberish,
      _token0Decimals: BigNumberish,
      _token1Decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(string,int24,int24,address,address,address,address,address,(uint256,uint256,uint256),uint256,uint8,uint8)'(
      _symbol: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _token0: string,
      _token1: string,
      _pool: string,
      _router: string,
      _positionManager: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      _maxTwapDeviationDivisor: BigNumberish,
      _token0Decimals: BigNumberish,
      _token1Decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    migratePosition(
      newTickLower: BigNumberish,
      newTickUpper: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'migratePosition(int24,int24)'(
      newTickLower: BigNumberish,
      newTickUpper: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    mintInitial(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'mintInitial(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    mintWithToken(
      inputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'mintWithToken(uint8,uint256)'(
      inputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    pauseContract(overrides?: Overrides): Promise<BigNumber>

    'pauseContract()'(overrides?: Overrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>

    poolAddress(overrides?: CallOverrides): Promise<BigNumber>

    'poolAddress()'(overrides?: CallOverrides): Promise<BigNumber>

    positionManagerAddress(overrides?: CallOverrides): Promise<BigNumber>

    'positionManagerAddress()'(overrides?: CallOverrides): Promise<BigNumber>

    rebalance(overrides?: Overrides): Promise<BigNumber>

    'rebalance()'(overrides?: Overrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    resetTwap(overrides?: Overrides): Promise<BigNumber>

    'resetTwap()'(overrides?: Overrides): Promise<BigNumber>

    routerAddress(overrides?: CallOverrides): Promise<BigNumber>

    'routerAddress()'(overrides?: CallOverrides): Promise<BigNumber>

    setFeeDivisors(
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: Overrides
    ): Promise<BigNumber>

    'setFeeDivisors((uint256,uint256,uint256))'(
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: Overrides
    ): Promise<BigNumber>

    setMaxTwapDeviationDivisor(
      newDeviationDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setMaxTwapDeviationDivisor(uint256)'(
      newDeviationDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setTwapPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setTwapPeriod(uint32)'(
      newPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setxTokenManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setxTokenManager(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>

    token0DecimalMultiplier(overrides?: CallOverrides): Promise<BigNumber>

    'token0DecimalMultiplier()'(overrides?: CallOverrides): Promise<BigNumber>

    token0Decimals(overrides?: CallOverrides): Promise<BigNumber>

    'token0Decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    token1DecimalMultiplier(overrides?: CallOverrides): Promise<BigNumber>

    'token1DecimalMultiplier()'(overrides?: CallOverrides): Promise<BigNumber>

    token1Decimals(overrides?: CallOverrides): Promise<BigNumber>

    'token1Decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    tokenDiffDecimalMultiplier(overrides?: CallOverrides): Promise<BigNumber>

    'tokenDiffDecimalMultiplier()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    tokenId(overrides?: CallOverrides): Promise<BigNumber>

    'tokenId()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    unpauseContract(overrides?: Overrides): Promise<BigNumber>

    'unpauseContract()'(overrides?: Overrides): Promise<BigNumber>

    withdrawFees(overrides?: Overrides): Promise<BigNumber>

    'withdrawFees()'(overrides?: Overrides): Promise<BigNumber>

    withdrawToken(
      token: string,
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'withdrawToken(address,address)'(
      token: string,
      receiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    withdrawableToken0Fees(overrides?: CallOverrides): Promise<BigNumber>

    'withdrawableToken0Fees()'(overrides?: CallOverrides): Promise<BigNumber>

    withdrawableToken1Fees(overrides?: CallOverrides): Promise<BigNumber>

    'withdrawableToken1Fees()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    adminActiveTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'adminActiveTimestamp()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    adminStake(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'adminStake(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    adminSwap(
      amount: BigNumberish,
      _0for1: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'adminSwap(uint256,bool)'(
      amount: BigNumberish,
      _0for1: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    adminSwapOneInch(
      minReturn: BigNumberish,
      _0for1: boolean,
      _oneInchData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'adminSwapOneInch(uint256,bool,bytes)'(
      minReturn: BigNumberish,
      _0for1: boolean,
      _oneInchData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    adminUnstake(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'adminUnstake(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    approveOneInch(overrides?: Overrides): Promise<PopulatedTransaction>

    'approveOneInch()'(overrides?: Overrides): Promise<PopulatedTransaction>

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    burn(
      outputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'burn(uint8,uint256)'(
      outputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    calculateMintAmount(
      _amount: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateMintAmount(uint256,uint256)'(
      _amount: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculatePoolMintedAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculatePoolMintedAmounts(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    collect(overrides?: Overrides): Promise<PopulatedTransaction>

    'collect()'(overrides?: Overrides): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    emergencyUnstake(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'emergencyUnstake(uint256,uint256)'(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    feeDivisors(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'feeDivisors()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getAmountInAsset0Terms(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getAmountInAsset0Terms(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAmountInAsset1Terms(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getAmountInAsset1Terms(uint256)'(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAmountsForLiquidity(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getAmountsForLiquidity(uint128)'(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAsset0Price(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getAsset0Price()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getAsset1Price(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getAsset1Price()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getBufferBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getBufferBalance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getBufferToken0Balance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getBufferToken0Balance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getBufferToken1Balance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getBufferToken1Balance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getBufferTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getBufferTokenBalance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLiquidityForAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getLiquidityForAmounts(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNav(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getNav()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getPositionLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getPositionLiquidity()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getStakedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getStakedBalance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getStakedTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getStakedTokenBalance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTargetBufferTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getTargetBufferTokenBalance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTicks(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getTicks()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    initialize(
      _symbol: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _token0: string,
      _token1: string,
      _pool: string,
      _router: string,
      _positionManager: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      _maxTwapDeviationDivisor: BigNumberish,
      _token0Decimals: BigNumberish,
      _token1Decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(string,int24,int24,address,address,address,address,address,(uint256,uint256,uint256),uint256,uint8,uint8)'(
      _symbol: string,
      _tickLower: BigNumberish,
      _tickUpper: BigNumberish,
      _token0: string,
      _token1: string,
      _pool: string,
      _router: string,
      _positionManager: string,
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      _maxTwapDeviationDivisor: BigNumberish,
      _token0Decimals: BigNumberish,
      _token1Decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    lastLockedBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    migratePosition(
      newTickLower: BigNumberish,
      newTickUpper: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'migratePosition(int24,int24)'(
      newTickLower: BigNumberish,
      newTickUpper: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    mintInitial(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'mintInitial(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    mintWithToken(
      inputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'mintWithToken(uint8,uint256)'(
      inputAsset: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'poolAddress()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    positionManagerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'positionManagerAddress()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    rebalance(overrides?: Overrides): Promise<PopulatedTransaction>

    'rebalance()'(overrides?: Overrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    resetTwap(overrides?: Overrides): Promise<PopulatedTransaction>

    'resetTwap()'(overrides?: Overrides): Promise<PopulatedTransaction>

    routerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'routerAddress()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setFeeDivisors(
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setFeeDivisors((uint256,uint256,uint256))'(
      _feeDivisors: {
        mintFee: BigNumberish
        burnFee: BigNumberish
        claimFee: BigNumberish
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setMaxTwapDeviationDivisor(
      newDeviationDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setMaxTwapDeviationDivisor(uint256)'(
      newDeviationDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setTwapPeriod(
      newPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setTwapPeriod(uint32)'(
      newPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setxTokenManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setxTokenManager(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token0DecimalMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'token0DecimalMultiplier()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    token0Decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'token0Decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token1DecimalMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'token1DecimalMultiplier()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    token1Decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'token1Decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenDiffDecimalMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'tokenDiffDecimalMultiplier()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'tokenId()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    unpauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    withdrawFees(overrides?: Overrides): Promise<PopulatedTransaction>

    'withdrawFees()'(overrides?: Overrides): Promise<PopulatedTransaction>

    withdrawToken(
      token: string,
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'withdrawToken(address,address)'(
      token: string,
      receiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    withdrawableToken0Fees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'withdrawableToken0Fees()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    withdrawableToken1Fees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'withdrawableToken1Fees()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
