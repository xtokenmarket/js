/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface UniswapLibraryInterface extends ethers.utils.Interface {
  functions: {
    'calculatePoolMintedAmounts(uint256,uint256,uint160,uint160,address)': FunctionFragment
    'checkTwap(address,uint32,uint8,uint8,uint256,int128,uint256)': FunctionFragment
    'getAmountInAsset0Terms(uint256,address,uint32,uint8,uint8,uint256)': FunctionFragment
    'getAmountInAsset1Terms(uint256,address,uint32,uint8,uint8,uint256)': FunctionFragment
    'getAmountsForLiquidity(uint128,uint160,uint160,address)': FunctionFragment
    'getAsset0Price(address,uint32,uint8,uint8,uint256)': FunctionFragment
    'getAsset1Price(address,uint32,uint8,uint8,uint256)': FunctionFragment
    'getBufferToken0Balance(IERC20,uint8,uint256)': FunctionFragment
    'getBufferToken1Balance(IERC20,uint8,uint256)': FunctionFragment
    'getBufferTokenBalance(tuple)': FunctionFragment
    'getLiquidityForAmounts(uint256,uint256,uint160,uint160,address)': FunctionFragment
    'getObservationTime(IUniswapV3Pool)': FunctionFragment
    'getPoolLiquidity(address)': FunctionFragment
    'getPoolPrice(address)': FunctionFragment
    'getPoolPriceWithDecimals(address)': FunctionFragment
    'getPositionLiquidity(address,uint256)': FunctionFragment
    'getSqrtRatio(int24)': FunctionFragment
    'getTickFromPrice(uint160)': FunctionFragment
    'getToken0AmountInNativeDecimals(uint256,uint8,uint256)': FunctionFragment
    'getToken0AmountInWei(uint256,uint8,uint256)': FunctionFragment
    'getToken1AmountInNativeDecimals(uint256,uint8,uint256)': FunctionFragment
    'getToken1AmountInWei(uint256,uint8,uint256)': FunctionFragment
    'subAbs(uint256,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'calculatePoolMintedAmounts',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'checkTwap',
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getAmountInAsset0Terms',
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getAmountInAsset1Terms',
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getAmountsForLiquidity',
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'getAsset0Price',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getAsset1Price',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getBufferToken0Balance',
    values: [string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getBufferToken1Balance',
    values: [string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getBufferTokenBalance',
    values: [
      {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        tokenDiffDecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getLiquidityForAmounts',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'getObservationTime',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'getPoolLiquidity',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'getPoolPrice', values: [string]): string
  encodeFunctionData(
    functionFragment: 'getPoolPriceWithDecimals',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'getPositionLiquidity',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getSqrtRatio',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getTickFromPrice',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getToken0AmountInNativeDecimals',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getToken0AmountInWei',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getToken1AmountInNativeDecimals',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getToken1AmountInWei',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'subAbs',
    values: [BigNumberish, BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'calculatePoolMintedAmounts',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'checkTwap', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getAmountInAsset0Terms',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAmountInAsset1Terms',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAmountsForLiquidity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAsset0Price',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAsset1Price',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getBufferToken0Balance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getBufferToken1Balance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getBufferTokenBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLiquidityForAmounts',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getObservationTime',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPoolLiquidity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPoolPrice',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPoolPriceWithDecimals',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPositionLiquidity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSqrtRatio',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTickFromPrice',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getToken0AmountInNativeDecimals',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getToken0AmountInWei',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getToken1AmountInNativeDecimals',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getToken1AmountInWei',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'subAbs', data: BytesLike): Result

  events: {}
}

export class UniswapLibrary extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: UniswapLibraryInterface

  functions: {
    calculatePoolMintedAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount0Minted: BigNumber
        amount1Minted: BigNumber
      }
    >

    'calculatePoolMintedAmounts(uint256,uint256,uint160,uint160,address)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount0Minted: BigNumber
        amount1Minted: BigNumber
      }
    >

    checkTwap(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      lastTwap: BigNumberish,
      maxTwapDeviationDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'checkTwap(address,uint32,uint8,uint8,uint256,int128,uint256)'(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      lastTwap: BigNumberish,
      maxTwapDeviationDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getAmountInAsset0Terms(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getAmountInAsset0Terms(uint256,address,uint32,uint8,uint8,uint256)'(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getAmountInAsset1Terms(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getAmountInAsset1Terms(uint256,address,uint32,uint8,uint8,uint256)'(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getAmountsForLiquidity(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getAmountsForLiquidity(uint128,uint160,uint160,address)'(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    getAsset0Price(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getAsset0Price(address,uint32,uint8,uint8,uint256)'(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getAsset1Price(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getAsset1Price(address,uint32,uint8,uint8,uint256)'(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getBufferToken0Balance(
      token0: string,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount0: BigNumber }>

    'getBufferToken0Balance(IERC20,uint8,uint256)'(
      token0: string,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount0: BigNumber }>

    getBufferToken1Balance(
      token1: string,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount1: BigNumber }>

    'getBufferToken1Balance(IERC20,uint8,uint256)'(
      token1: string,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount1: BigNumber }>

    getBufferTokenBalance(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        tokenDiffDecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getBufferTokenBalance(tuple)'(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        tokenDiffDecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    getLiquidityForAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>

    'getLiquidityForAmounts(uint256,uint256,uint160,uint160,address)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>

    getObservationTime(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<[number]>

    'getObservationTime(IUniswapV3Pool)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<[number]>

    getPoolLiquidity(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getPoolLiquidity(address)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getPoolPrice(_pool: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'getPoolPrice(address)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getPoolPriceWithDecimals(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>

    'getPoolPriceWithDecimals(address)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>

    getPositionLiquidity(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>

    'getPositionLiquidity(address,uint256)'(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>

    getSqrtRatio(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getSqrtRatio(int24)'(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

<<<<<<< HEAD
=======
    getStakedTokenBalance(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getStakedTokenBalance(tuple,tuple)'(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    getTargetBufferTokenBalance(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getTargetBufferTokenBalance(tuple,tuple)'(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

>>>>>>> b08df1b (Adds getAlphaEthPrice and getXAlphaPrices)
    getTickFromPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>

    'getTickFromPrice(uint160)'(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>

    getToken0AmountInNativeDecimals(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getToken0AmountInNativeDecimals(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getToken0AmountInWei(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getToken0AmountInWei(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getToken1AmountInNativeDecimals(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getToken1AmountInNativeDecimals(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getToken1AmountInWei(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getToken1AmountInWei(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    subAbs(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'subAbs(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>
  }

  calculatePoolMintedAmounts(
    amount0: BigNumberish,
    amount1: BigNumberish,
    priceLower: BigNumberish,
    priceUpper: BigNumberish,
    pool: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      amount0Minted: BigNumber
      amount1Minted: BigNumber
    }
  >

  'calculatePoolMintedAmounts(uint256,uint256,uint160,uint160,address)'(
    amount0: BigNumberish,
    amount1: BigNumberish,
    priceLower: BigNumberish,
    priceUpper: BigNumberish,
    pool: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      amount0Minted: BigNumber
      amount1Minted: BigNumber
    }
  >

  checkTwap(
    pool: string,
    twapPeriod: BigNumberish,
    token0Decimals: BigNumberish,
    token1Decimals: BigNumberish,
    tokenDiffDecimalMultiplier: BigNumberish,
    lastTwap: BigNumberish,
    maxTwapDeviationDivisor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'checkTwap(address,uint32,uint8,uint8,uint256,int128,uint256)'(
    pool: string,
    twapPeriod: BigNumberish,
    token0Decimals: BigNumberish,
    token1Decimals: BigNumberish,
    tokenDiffDecimalMultiplier: BigNumberish,
    lastTwap: BigNumberish,
    maxTwapDeviationDivisor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getAmountInAsset0Terms(
    amount: BigNumberish,
    pool: string,
    twapPeriod: BigNumberish,
    token0Decimals: BigNumberish,
    token1Decimals: BigNumberish,
    tokenDiffDecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getAmountInAsset0Terms(uint256,address,uint32,uint8,uint8,uint256)'(
    amount: BigNumberish,
    pool: string,
    twapPeriod: BigNumberish,
    token0Decimals: BigNumberish,
    token1Decimals: BigNumberish,
    tokenDiffDecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getAmountInAsset1Terms(
    amount: BigNumberish,
    pool: string,
    twapPeriod: BigNumberish,
    token0Decimals: BigNumberish,
    token1Decimals: BigNumberish,
    tokenDiffDecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getAmountInAsset1Terms(uint256,address,uint32,uint8,uint8,uint256)'(
    amount: BigNumberish,
    pool: string,
    twapPeriod: BigNumberish,
    token0Decimals: BigNumberish,
    token1Decimals: BigNumberish,
    tokenDiffDecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getAmountsForLiquidity(
    liquidity: BigNumberish,
    priceLower: BigNumberish,
    priceUpper: BigNumberish,
    pool: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

  'getAmountsForLiquidity(uint128,uint160,uint160,address)'(
    liquidity: BigNumberish,
    priceLower: BigNumberish,
    priceUpper: BigNumberish,
    pool: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

  getAsset0Price(
    pool: string,
    twapPeriod: BigNumberish,
    token0Decimals: BigNumberish,
    token1Decimals: BigNumberish,
    tokenDiffDecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getAsset0Price(address,uint32,uint8,uint8,uint256)'(
    pool: string,
    twapPeriod: BigNumberish,
    token0Decimals: BigNumberish,
    token1Decimals: BigNumberish,
    tokenDiffDecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getAsset1Price(
    pool: string,
    twapPeriod: BigNumberish,
    token0Decimals: BigNumberish,
    token1Decimals: BigNumberish,
    tokenDiffDecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getAsset1Price(address,uint32,uint8,uint8,uint256)'(
    pool: string,
    twapPeriod: BigNumberish,
    token0Decimals: BigNumberish,
    token1Decimals: BigNumberish,
    tokenDiffDecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getBufferToken0Balance(
    token0: string,
    token0Decimals: BigNumberish,
    token0DecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getBufferToken0Balance(IERC20,uint8,uint256)'(
    token0: string,
    token0Decimals: BigNumberish,
    token0DecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getBufferToken1Balance(
    token1: string,
    token1Decimals: BigNumberish,
    token1DecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getBufferToken1Balance(IERC20,uint8,uint256)'(
    token1: string,
    token1Decimals: BigNumberish,
    token1DecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getBufferTokenBalance(
    tokenDetails: {
      token0: string
      token1: string
      token0DecimalMultiplier: BigNumberish
      token1DecimalMultiplier: BigNumberish
      tokenDiffDecimalMultiplier: BigNumberish
      token0Decimals: BigNumberish
      token1Decimals: BigNumberish
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

  'getBufferTokenBalance(tuple)'(
    tokenDetails: {
      token0: string
      token1: string
      token0DecimalMultiplier: BigNumberish
      token1DecimalMultiplier: BigNumberish
      tokenDiffDecimalMultiplier: BigNumberish
      token0Decimals: BigNumberish
      token1Decimals: BigNumberish
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

  getLiquidityForAmounts(
    amount0: BigNumberish,
    amount1: BigNumberish,
    priceLower: BigNumberish,
    priceUpper: BigNumberish,
    pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getLiquidityForAmounts(uint256,uint256,uint160,uint160,address)'(
    amount0: BigNumberish,
    amount1: BigNumberish,
    priceLower: BigNumberish,
    priceUpper: BigNumberish,
    pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getObservationTime(_pool: string, overrides?: CallOverrides): Promise<number>

  'getObservationTime(IUniswapV3Pool)'(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<number>

  getPoolLiquidity(_pool: string, overrides?: CallOverrides): Promise<BigNumber>

  'getPoolLiquidity(address)'(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getPoolPrice(_pool: string, overrides?: CallOverrides): Promise<BigNumber>

  'getPoolPrice(address)'(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getPoolPriceWithDecimals(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getPoolPriceWithDecimals(address)'(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getPositionLiquidity(
    positionManager: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getPositionLiquidity(address,uint256)'(
    positionManager: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getSqrtRatio(
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getSqrtRatio(int24)'(
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

<<<<<<< HEAD
=======
  getStakedTokenBalance(
    tokenDetails: {
      token0: string
      token1: string
      token0DecimalMultiplier: BigNumberish
      token1DecimalMultiplier: BigNumberish
      token0Decimals: BigNumberish
      token1Decimals: BigNumberish
    },
    positionDetails: {
      poolFee: BigNumberish
      priceLower: BigNumberish
      priceUpper: BigNumberish
      tokenId: BigNumberish
      positionManager: string
      router: string
      pool: string
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

  'getStakedTokenBalance(tuple,tuple)'(
    tokenDetails: {
      token0: string
      token1: string
      token0DecimalMultiplier: BigNumberish
      token1DecimalMultiplier: BigNumberish
      token0Decimals: BigNumberish
      token1Decimals: BigNumberish
    },
    positionDetails: {
      poolFee: BigNumberish
      priceLower: BigNumberish
      priceUpper: BigNumberish
      tokenId: BigNumberish
      positionManager: string
      router: string
      pool: string
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

  getTargetBufferTokenBalance(
    tokenDetails: {
      token0: string
      token1: string
      token0DecimalMultiplier: BigNumberish
      token1DecimalMultiplier: BigNumberish
      token0Decimals: BigNumberish
      token1Decimals: BigNumberish
    },
    positionDetails: {
      poolFee: BigNumberish
      priceLower: BigNumberish
      priceUpper: BigNumberish
      tokenId: BigNumberish
      positionManager: string
      router: string
      pool: string
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

  'getTargetBufferTokenBalance(tuple,tuple)'(
    tokenDetails: {
      token0: string
      token1: string
      token0DecimalMultiplier: BigNumberish
      token1DecimalMultiplier: BigNumberish
      token0Decimals: BigNumberish
      token1Decimals: BigNumberish
    },
    positionDetails: {
      poolFee: BigNumberish
      priceLower: BigNumberish
      priceUpper: BigNumberish
      tokenId: BigNumberish
      positionManager: string
      router: string
      pool: string
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >

>>>>>>> b08df1b (Adds getAlphaEthPrice and getXAlphaPrices)
  getTickFromPrice(
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>

  'getTickFromPrice(uint160)'(
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>

  getToken0AmountInNativeDecimals(
    amount: BigNumberish,
    token0Decimals: BigNumberish,
    token0DecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getToken0AmountInNativeDecimals(uint256,uint8,uint256)'(
    amount: BigNumberish,
    token0Decimals: BigNumberish,
    token0DecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getToken0AmountInWei(
    amount: BigNumberish,
    token0Decimals: BigNumberish,
    token0DecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getToken0AmountInWei(uint256,uint8,uint256)'(
    amount: BigNumberish,
    token0Decimals: BigNumberish,
    token0DecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getToken1AmountInNativeDecimals(
    amount: BigNumberish,
    token1Decimals: BigNumberish,
    token1DecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getToken1AmountInNativeDecimals(uint256,uint8,uint256)'(
    amount: BigNumberish,
    token1Decimals: BigNumberish,
    token1DecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getToken1AmountInWei(
    amount: BigNumberish,
    token1Decimals: BigNumberish,
    token1DecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getToken1AmountInWei(uint256,uint8,uint256)'(
    amount: BigNumberish,
    token1Decimals: BigNumberish,
    token1DecimalMultiplier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  subAbs(
    amount0: BigNumberish,
    amount1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'subAbs(uint256,uint256)'(
    amount0: BigNumberish,
    amount1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  callStatic: {
    calculatePoolMintedAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount0Minted: BigNumber
        amount1Minted: BigNumber
      }
    >

    'calculatePoolMintedAmounts(uint256,uint256,uint160,uint160,address)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amount0Minted: BigNumber
        amount1Minted: BigNumber
      }
    >

    checkTwap(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      lastTwap: BigNumberish,
      maxTwapDeviationDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'checkTwap(address,uint32,uint8,uint8,uint256,int128,uint256)'(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      lastTwap: BigNumberish,
      maxTwapDeviationDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountInAsset0Terms(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getAmountInAsset0Terms(uint256,address,uint32,uint8,uint8,uint256)'(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountInAsset1Terms(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getAmountInAsset1Terms(uint256,address,uint32,uint8,uint8,uint256)'(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountsForLiquidity(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getAmountsForLiquidity(uint128,uint160,uint160,address)'(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    getAsset0Price(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getAsset0Price(address,uint32,uint8,uint8,uint256)'(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAsset1Price(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getAsset1Price(address,uint32,uint8,uint8,uint256)'(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getBufferToken0Balance(
      token0: string,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getBufferToken0Balance(IERC20,uint8,uint256)'(
      token0: string,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getBufferToken1Balance(
      token1: string,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getBufferToken1Balance(IERC20,uint8,uint256)'(
      token1: string,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getBufferTokenBalance(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        tokenDiffDecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getBufferTokenBalance(tuple)'(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        tokenDiffDecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    getLiquidityForAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getLiquidityForAmounts(uint256,uint256,uint160,uint160,address)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getObservationTime(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<number>

    'getObservationTime(IUniswapV3Pool)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<number>

    getPoolLiquidity(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getPoolLiquidity(address)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPoolPrice(_pool: string, overrides?: CallOverrides): Promise<BigNumber>

    'getPoolPrice(address)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPoolPriceWithDecimals(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getPoolPriceWithDecimals(address)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPositionLiquidity(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getPositionLiquidity(address,uint256)'(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getSqrtRatio(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getSqrtRatio(int24)'(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

<<<<<<< HEAD
=======
    getStakedTokenBalance(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getStakedTokenBalance(tuple,tuple)'(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    getTargetBufferTokenBalance(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

    'getTargetBufferTokenBalance(tuple,tuple)'(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >

>>>>>>> b08df1b (Adds getAlphaEthPrice and getXAlphaPrices)
    getTickFromPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>

    'getTickFromPrice(uint160)'(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>

    getToken0AmountInNativeDecimals(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getToken0AmountInNativeDecimals(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getToken0AmountInWei(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getToken0AmountInWei(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getToken1AmountInNativeDecimals(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getToken1AmountInNativeDecimals(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getToken1AmountInWei(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getToken1AmountInWei(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    subAbs(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'subAbs(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  filters: {}

  estimateGas: {
    calculatePoolMintedAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculatePoolMintedAmounts(uint256,uint256,uint160,uint160,address)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    checkTwap(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      lastTwap: BigNumberish,
      maxTwapDeviationDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'checkTwap(address,uint32,uint8,uint8,uint256,int128,uint256)'(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      lastTwap: BigNumberish,
      maxTwapDeviationDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountInAsset0Terms(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getAmountInAsset0Terms(uint256,address,uint32,uint8,uint8,uint256)'(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountInAsset1Terms(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getAmountInAsset1Terms(uint256,address,uint32,uint8,uint8,uint256)'(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAmountsForLiquidity(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getAmountsForLiquidity(uint128,uint160,uint160,address)'(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAsset0Price(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getAsset0Price(address,uint32,uint8,uint8,uint256)'(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAsset1Price(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getAsset1Price(address,uint32,uint8,uint8,uint256)'(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getBufferToken0Balance(
      token0: string,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getBufferToken0Balance(IERC20,uint8,uint256)'(
      token0: string,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getBufferToken1Balance(
      token1: string,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getBufferToken1Balance(IERC20,uint8,uint256)'(
      token1: string,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getBufferTokenBalance(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        tokenDiffDecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getBufferTokenBalance(tuple)'(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        tokenDiffDecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getLiquidityForAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getLiquidityForAmounts(uint256,uint256,uint160,uint160,address)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getObservationTime(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getObservationTime(IUniswapV3Pool)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPoolLiquidity(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getPoolLiquidity(address)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPoolPrice(_pool: string, overrides?: CallOverrides): Promise<BigNumber>

    'getPoolPrice(address)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPoolPriceWithDecimals(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getPoolPriceWithDecimals(address)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPositionLiquidity(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getPositionLiquidity(address,uint256)'(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getSqrtRatio(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getSqrtRatio(int24)'(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

<<<<<<< HEAD
=======
    getStakedTokenBalance(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getStakedTokenBalance(tuple,tuple)'(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTargetBufferTokenBalance(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getTargetBufferTokenBalance(tuple,tuple)'(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>

>>>>>>> b08df1b (Adds getAlphaEthPrice and getXAlphaPrices)
    getTickFromPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getTickFromPrice(uint160)'(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getToken0AmountInNativeDecimals(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getToken0AmountInNativeDecimals(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getToken0AmountInWei(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getToken0AmountInWei(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getToken1AmountInNativeDecimals(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getToken1AmountInNativeDecimals(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getToken1AmountInWei(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getToken1AmountInWei(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    subAbs(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'subAbs(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    calculatePoolMintedAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculatePoolMintedAmounts(uint256,uint256,uint160,uint160,address)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    checkTwap(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      lastTwap: BigNumberish,
      maxTwapDeviationDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'checkTwap(address,uint32,uint8,uint8,uint256,int128,uint256)'(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      lastTwap: BigNumberish,
      maxTwapDeviationDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAmountInAsset0Terms(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getAmountInAsset0Terms(uint256,address,uint32,uint8,uint8,uint256)'(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAmountInAsset1Terms(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getAmountInAsset1Terms(uint256,address,uint32,uint8,uint8,uint256)'(
      amount: BigNumberish,
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAmountsForLiquidity(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getAmountsForLiquidity(uint128,uint160,uint160,address)'(
      liquidity: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAsset0Price(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getAsset0Price(address,uint32,uint8,uint8,uint256)'(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAsset1Price(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getAsset1Price(address,uint32,uint8,uint8,uint256)'(
      pool: string,
      twapPeriod: BigNumberish,
      token0Decimals: BigNumberish,
      token1Decimals: BigNumberish,
      tokenDiffDecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getBufferToken0Balance(
      token0: string,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getBufferToken0Balance(IERC20,uint8,uint256)'(
      token0: string,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getBufferToken1Balance(
      token1: string,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getBufferToken1Balance(IERC20,uint8,uint256)'(
      token1: string,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getBufferTokenBalance(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        tokenDiffDecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getBufferTokenBalance(tuple)'(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        tokenDiffDecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLiquidityForAmounts(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getLiquidityForAmounts(uint256,uint256,uint160,uint160,address)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getObservationTime(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getObservationTime(IUniswapV3Pool)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPoolLiquidity(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getPoolLiquidity(address)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPoolPrice(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getPoolPrice(address)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPoolPriceWithDecimals(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getPoolPriceWithDecimals(address)'(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPositionLiquidity(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getPositionLiquidity(address,uint256)'(
      positionManager: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getSqrtRatio(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getSqrtRatio(int24)'(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

<<<<<<< HEAD
=======
    getStakedTokenBalance(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getStakedTokenBalance(tuple,tuple)'(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTargetBufferTokenBalance(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getTargetBufferTokenBalance(tuple,tuple)'(
      tokenDetails: {
        token0: string
        token1: string
        token0DecimalMultiplier: BigNumberish
        token1DecimalMultiplier: BigNumberish
        token0Decimals: BigNumberish
        token1Decimals: BigNumberish
      },
      positionDetails: {
        poolFee: BigNumberish
        priceLower: BigNumberish
        priceUpper: BigNumberish
        tokenId: BigNumberish
        positionManager: string
        router: string
        pool: string
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

>>>>>>> b08df1b (Adds getAlphaEthPrice and getXAlphaPrices)
    getTickFromPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getTickFromPrice(uint160)'(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getToken0AmountInNativeDecimals(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getToken0AmountInNativeDecimals(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getToken0AmountInWei(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getToken0AmountInWei(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token0Decimals: BigNumberish,
      token0DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getToken1AmountInNativeDecimals(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getToken1AmountInNativeDecimals(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getToken1AmountInWei(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getToken1AmountInWei(uint256,uint8,uint256)'(
      amount: BigNumberish,
      token1Decimals: BigNumberish,
      token1DecimalMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    subAbs(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'subAbs(uint256,uint256)'(
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
