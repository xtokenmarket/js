/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface KyberDAOInterface extends ethers.utils.Interface {
  functions: {
    'MAX_CAMPAIGN_OPTIONS()': FunctionFragment
    'MAX_EPOCH_CAMPAIGNS()': FunctionFragment
    'brrCampaigns(uint256)': FunctionFragment
    'cancelCampaign(uint256)': FunctionFragment
    'daoOperator()': FunctionFragment
    'epochPeriodInSeconds()': FunctionFragment
    'firstEpochStartTimestamp()': FunctionFragment
    'getCampaignDetails(uint256)': FunctionFragment
    'getCampaignVoteCountData(uint256)': FunctionFragment
    'getCampaignWinningOptionAndValue(uint256)': FunctionFragment
    'getCurrentEpochNumber()': FunctionFragment
    'getCurrentEpochRewardPercentageInPrecision(address)': FunctionFragment
    'getDataFromRewardAndRebateWithValidation(uint256,uint256)': FunctionFragment
    'getEpochNumber(uint256)': FunctionFragment
    'getLatestBRRData()': FunctionFragment
    'getLatestBRRDataWithCache()': FunctionFragment
    'getLatestNetworkFeeData()': FunctionFragment
    'getLatestNetworkFeeDataWithCache()': FunctionFragment
    'getListCampaignIDs(uint256)': FunctionFragment
    'getPastEpochRewardPercentageInPrecision(address,uint256)': FunctionFragment
    'getRebateAndRewardFromData(uint256)': FunctionFragment
    'getTotalEpochPoints(uint256)': FunctionFragment
    'handleWithdrawal(address,uint256)': FunctionFragment
    'kncToken()': FunctionFragment
    'minCampaignDurationInSeconds()': FunctionFragment
    'networkFeeCampaigns(uint256)': FunctionFragment
    'numberCampaigns()': FunctionFragment
    'numberVotes(address,uint256)': FunctionFragment
    'shouldBurnRewardForEpoch(uint256)': FunctionFragment
    'stakerVotedOption(address,uint256)': FunctionFragment
    'staking()': FunctionFragment
    'submitNewCampaign(uint8,uint256,uint256,uint256,uint256,uint256,uint256[],bytes)': FunctionFragment
    'vote(uint256,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'MAX_CAMPAIGN_OPTIONS',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'MAX_EPOCH_CAMPAIGNS',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'brrCampaigns',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'cancelCampaign',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'daoOperator',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'epochPeriodInSeconds',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'firstEpochStartTimestamp',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getCampaignDetails',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getCampaignVoteCountData',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getCampaignWinningOptionAndValue',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getCurrentEpochNumber',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getCurrentEpochRewardPercentageInPrecision',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'getDataFromRewardAndRebateWithValidation',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getEpochNumber',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getLatestBRRData',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getLatestBRRDataWithCache',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getLatestNetworkFeeData',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getLatestNetworkFeeDataWithCache',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getListCampaignIDs',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getPastEpochRewardPercentageInPrecision',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getRebateAndRewardFromData',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getTotalEpochPoints',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'handleWithdrawal',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'kncToken', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'minCampaignDurationInSeconds',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'networkFeeCampaigns',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'numberCampaigns',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'numberVotes',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'shouldBurnRewardForEpoch',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'stakerVotedOption',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'staking', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'submitNewCampaign',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BytesLike
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'vote',
    values: [BigNumberish, BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'MAX_CAMPAIGN_OPTIONS',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'MAX_EPOCH_CAMPAIGNS',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'brrCampaigns',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'cancelCampaign',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'daoOperator', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'epochPeriodInSeconds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'firstEpochStartTimestamp',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCampaignDetails',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCampaignVoteCountData',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCampaignWinningOptionAndValue',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCurrentEpochNumber',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCurrentEpochRewardPercentageInPrecision',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getDataFromRewardAndRebateWithValidation',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getEpochNumber',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLatestBRRData',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLatestBRRDataWithCache',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLatestNetworkFeeData',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLatestNetworkFeeDataWithCache',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getListCampaignIDs',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getPastEpochRewardPercentageInPrecision',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRebateAndRewardFromData',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTotalEpochPoints',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'handleWithdrawal',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'kncToken', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'minCampaignDurationInSeconds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'networkFeeCampaigns',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'numberCampaigns',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'numberVotes', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'shouldBurnRewardForEpoch',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'stakerVotedOption',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'staking', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'submitNewCampaign',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'vote', data: BytesLike): Result

  events: {
    'CancelledCampaign(uint256)': EventFragment
    'NewCampaignCreated(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256[],bytes)': EventFragment
    'Voted(address,uint256,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'CancelledCampaign'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewCampaignCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Voted'): EventFragment
}

export class KyberDAO extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: KyberDAOInterface

  functions: {
    MAX_CAMPAIGN_OPTIONS(overrides?: CallOverrides): Promise<[BigNumber]>

    'MAX_CAMPAIGN_OPTIONS()'(overrides?: CallOverrides): Promise<[BigNumber]>

    MAX_EPOCH_CAMPAIGNS(overrides?: CallOverrides): Promise<[BigNumber]>

    'MAX_EPOCH_CAMPAIGNS()'(overrides?: CallOverrides): Promise<[BigNumber]>

    brrCampaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'brrCampaigns(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    cancelCampaign(
      campaignID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'cancelCampaign(uint256)'(
      campaignID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    daoOperator(overrides?: CallOverrides): Promise<[string]>

    'daoOperator()'(overrides?: CallOverrides): Promise<[string]>

    epochPeriodInSeconds(overrides?: CallOverrides): Promise<[BigNumber]>

    'epochPeriodInSeconds()'(overrides?: CallOverrides): Promise<[BigNumber]>

    firstEpochStartTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>

    'firstEpochStartTimestamp()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getCampaignDetails(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber[]
      ] & {
        campaignType: number
        startTimestamp: BigNumber
        endTimestamp: BigNumber
        totalKNCSupply: BigNumber
        minPercentageInPrecision: BigNumber
        cInPrecision: BigNumber
        tInPrecision: BigNumber
        link: string
        options: BigNumber[]
      }
    >

    'getCampaignDetails(uint256)'(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber[]
      ] & {
        campaignType: number
        startTimestamp: BigNumber
        endTimestamp: BigNumber
        totalKNCSupply: BigNumber
        minPercentageInPrecision: BigNumber
        cInPrecision: BigNumber
        tInPrecision: BigNumber
        link: string
        options: BigNumber[]
      }
    >

    getCampaignVoteCountData(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber] & {
        voteCounts: BigNumber[]
        totalVoteCount: BigNumber
      }
    >

    'getCampaignVoteCountData(uint256)'(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber] & {
        voteCounts: BigNumber[]
        totalVoteCount: BigNumber
      }
    >

    getCampaignWinningOptionAndValue(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { optionID: BigNumber; value: BigNumber }
    >

    'getCampaignWinningOptionAndValue(uint256)'(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { optionID: BigNumber; value: BigNumber }
    >

    getCurrentEpochNumber(overrides?: CallOverrides): Promise<[BigNumber]>

    'getCurrentEpochNumber()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getCurrentEpochRewardPercentageInPrecision(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getCurrentEpochRewardPercentageInPrecision(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getDataFromRewardAndRebateWithValidation(
      rewardInBps: BigNumberish,
      rebateInBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { data: BigNumber }>

    'getDataFromRewardAndRebateWithValidation(uint256,uint256)'(
      rewardInBps: BigNumberish,
      rebateInBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { data: BigNumber }>

    getEpochNumber(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getEpochNumber(uint256)'(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getLatestBRRData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        burnInBps: BigNumber
        rewardInBps: BigNumber
        rebateInBps: BigNumber
        epoch: BigNumber
        expiryTimestamp: BigNumber
      }
    >

    'getLatestBRRData()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        burnInBps: BigNumber
        rewardInBps: BigNumber
        rebateInBps: BigNumber
        epoch: BigNumber
        expiryTimestamp: BigNumber
      }
    >

    getLatestBRRDataWithCache(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'getLatestBRRDataWithCache()'(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    getLatestNetworkFeeData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeInBps: BigNumber
        expiryTimestamp: BigNumber
      }
    >

    'getLatestNetworkFeeData()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeInBps: BigNumber
        expiryTimestamp: BigNumber
      }
    >

    getLatestNetworkFeeDataWithCache(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'getLatestNetworkFeeDataWithCache()'(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    getListCampaignIDs(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { campaignIDs: BigNumber[] }>

    'getListCampaignIDs(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { campaignIDs: BigNumber[] }>

    getPastEpochRewardPercentageInPrecision(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getPastEpochRewardPercentageInPrecision(address,uint256)'(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getRebateAndRewardFromData(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rebateInBps: BigNumber
        rewardInBps: BigNumber
      }
    >

    'getRebateAndRewardFromData(uint256)'(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rebateInBps: BigNumber
        rewardInBps: BigNumber
      }
    >

    getTotalEpochPoints(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getTotalEpochPoints(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    handleWithdrawal(
      staker: string,
      reduceAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'handleWithdrawal(address,uint256)'(
      staker: string,
      reduceAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    kncToken(overrides?: CallOverrides): Promise<[string]>

    'kncToken()'(overrides?: CallOverrides): Promise<[string]>

    minCampaignDurationInSeconds(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'minCampaignDurationInSeconds()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    networkFeeCampaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'networkFeeCampaigns(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    numberCampaigns(overrides?: CallOverrides): Promise<[BigNumber]>

    'numberCampaigns()'(overrides?: CallOverrides): Promise<[BigNumber]>

    numberVotes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'numberVotes(address,uint256)'(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    shouldBurnRewardForEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    'shouldBurnRewardForEpoch(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    stakerVotedOption(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'stakerVotedOption(address,uint256)'(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    staking(overrides?: CallOverrides): Promise<[string]>

    'staking()'(overrides?: CallOverrides): Promise<[string]>

    submitNewCampaign(
      campaignType: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      minPercentageInPrecision: BigNumberish,
      cInPrecision: BigNumberish,
      tInPrecision: BigNumberish,
      options: BigNumberish[],
      link: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'submitNewCampaign(uint8,uint256,uint256,uint256,uint256,uint256,uint256[],bytes)'(
      campaignType: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      minPercentageInPrecision: BigNumberish,
      cInPrecision: BigNumberish,
      tInPrecision: BigNumberish,
      options: BigNumberish[],
      link: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    vote(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'vote(uint256,uint256)'(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  MAX_CAMPAIGN_OPTIONS(overrides?: CallOverrides): Promise<BigNumber>

  'MAX_CAMPAIGN_OPTIONS()'(overrides?: CallOverrides): Promise<BigNumber>

  MAX_EPOCH_CAMPAIGNS(overrides?: CallOverrides): Promise<BigNumber>

  'MAX_EPOCH_CAMPAIGNS()'(overrides?: CallOverrides): Promise<BigNumber>

  brrCampaigns(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'brrCampaigns(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  cancelCampaign(
    campaignID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'cancelCampaign(uint256)'(
    campaignID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  daoOperator(overrides?: CallOverrides): Promise<string>

  'daoOperator()'(overrides?: CallOverrides): Promise<string>

  epochPeriodInSeconds(overrides?: CallOverrides): Promise<BigNumber>

  'epochPeriodInSeconds()'(overrides?: CallOverrides): Promise<BigNumber>

  firstEpochStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>

  'firstEpochStartTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

  getCampaignDetails(
    campaignID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber[]
    ] & {
      campaignType: number
      startTimestamp: BigNumber
      endTimestamp: BigNumber
      totalKNCSupply: BigNumber
      minPercentageInPrecision: BigNumber
      cInPrecision: BigNumber
      tInPrecision: BigNumber
      link: string
      options: BigNumber[]
    }
  >

  'getCampaignDetails(uint256)'(
    campaignID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber[]
    ] & {
      campaignType: number
      startTimestamp: BigNumber
      endTimestamp: BigNumber
      totalKNCSupply: BigNumber
      minPercentageInPrecision: BigNumber
      cInPrecision: BigNumber
      tInPrecision: BigNumber
      link: string
      options: BigNumber[]
    }
  >

  getCampaignVoteCountData(
    campaignID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber] & {
      voteCounts: BigNumber[]
      totalVoteCount: BigNumber
    }
  >

  'getCampaignVoteCountData(uint256)'(
    campaignID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber] & {
      voteCounts: BigNumber[]
      totalVoteCount: BigNumber
    }
  >

  getCampaignWinningOptionAndValue(
    campaignID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { optionID: BigNumber; value: BigNumber }>

  'getCampaignWinningOptionAndValue(uint256)'(
    campaignID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { optionID: BigNumber; value: BigNumber }>

  getCurrentEpochNumber(overrides?: CallOverrides): Promise<BigNumber>

  'getCurrentEpochNumber()'(overrides?: CallOverrides): Promise<BigNumber>

  getCurrentEpochRewardPercentageInPrecision(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getCurrentEpochRewardPercentageInPrecision(address)'(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getDataFromRewardAndRebateWithValidation(
    rewardInBps: BigNumberish,
    rebateInBps: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getDataFromRewardAndRebateWithValidation(uint256,uint256)'(
    rewardInBps: BigNumberish,
    rebateInBps: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getEpochNumber(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getEpochNumber(uint256)'(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getLatestBRRData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      burnInBps: BigNumber
      rewardInBps: BigNumber
      rebateInBps: BigNumber
      epoch: BigNumber
      expiryTimestamp: BigNumber
    }
  >

  'getLatestBRRData()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      burnInBps: BigNumber
      rewardInBps: BigNumber
      rebateInBps: BigNumber
      epoch: BigNumber
      expiryTimestamp: BigNumber
    }
  >

  getLatestBRRDataWithCache(overrides?: Overrides): Promise<ContractTransaction>

  'getLatestBRRDataWithCache()'(
    overrides?: Overrides
  ): Promise<ContractTransaction>

  getLatestNetworkFeeData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { feeInBps: BigNumber; expiryTimestamp: BigNumber }
  >

  'getLatestNetworkFeeData()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { feeInBps: BigNumber; expiryTimestamp: BigNumber }
  >

  getLatestNetworkFeeDataWithCache(
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'getLatestNetworkFeeDataWithCache()'(
    overrides?: Overrides
  ): Promise<ContractTransaction>

  getListCampaignIDs(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  'getListCampaignIDs(uint256)'(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  getPastEpochRewardPercentageInPrecision(
    staker: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getPastEpochRewardPercentageInPrecision(address,uint256)'(
    staker: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getRebateAndRewardFromData(
    data: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { rebateInBps: BigNumber; rewardInBps: BigNumber }
  >

  'getRebateAndRewardFromData(uint256)'(
    data: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { rebateInBps: BigNumber; rewardInBps: BigNumber }
  >

  getTotalEpochPoints(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getTotalEpochPoints(uint256)'(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  handleWithdrawal(
    staker: string,
    reduceAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'handleWithdrawal(address,uint256)'(
    staker: string,
    reduceAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  kncToken(overrides?: CallOverrides): Promise<string>

  'kncToken()'(overrides?: CallOverrides): Promise<string>

  minCampaignDurationInSeconds(overrides?: CallOverrides): Promise<BigNumber>

  'minCampaignDurationInSeconds()'(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  networkFeeCampaigns(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'networkFeeCampaigns(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  numberCampaigns(overrides?: CallOverrides): Promise<BigNumber>

  'numberCampaigns()'(overrides?: CallOverrides): Promise<BigNumber>

  numberVotes(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'numberVotes(address,uint256)'(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  shouldBurnRewardForEpoch(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>

  'shouldBurnRewardForEpoch(uint256)'(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>

  stakerVotedOption(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'stakerVotedOption(address,uint256)'(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  staking(overrides?: CallOverrides): Promise<string>

  'staking()'(overrides?: CallOverrides): Promise<string>

  submitNewCampaign(
    campaignType: BigNumberish,
    startTimestamp: BigNumberish,
    endTimestamp: BigNumberish,
    minPercentageInPrecision: BigNumberish,
    cInPrecision: BigNumberish,
    tInPrecision: BigNumberish,
    options: BigNumberish[],
    link: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'submitNewCampaign(uint8,uint256,uint256,uint256,uint256,uint256,uint256[],bytes)'(
    campaignType: BigNumberish,
    startTimestamp: BigNumberish,
    endTimestamp: BigNumberish,
    minPercentageInPrecision: BigNumberish,
    cInPrecision: BigNumberish,
    tInPrecision: BigNumberish,
    options: BigNumberish[],
    link: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  vote(
    campaignID: BigNumberish,
    option: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'vote(uint256,uint256)'(
    campaignID: BigNumberish,
    option: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    MAX_CAMPAIGN_OPTIONS(overrides?: CallOverrides): Promise<BigNumber>

    'MAX_CAMPAIGN_OPTIONS()'(overrides?: CallOverrides): Promise<BigNumber>

    MAX_EPOCH_CAMPAIGNS(overrides?: CallOverrides): Promise<BigNumber>

    'MAX_EPOCH_CAMPAIGNS()'(overrides?: CallOverrides): Promise<BigNumber>

    brrCampaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'brrCampaigns(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    cancelCampaign(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'cancelCampaign(uint256)'(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    daoOperator(overrides?: CallOverrides): Promise<string>

    'daoOperator()'(overrides?: CallOverrides): Promise<string>

    epochPeriodInSeconds(overrides?: CallOverrides): Promise<BigNumber>

    'epochPeriodInSeconds()'(overrides?: CallOverrides): Promise<BigNumber>

    firstEpochStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'firstEpochStartTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    getCampaignDetails(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber[]
      ] & {
        campaignType: number
        startTimestamp: BigNumber
        endTimestamp: BigNumber
        totalKNCSupply: BigNumber
        minPercentageInPrecision: BigNumber
        cInPrecision: BigNumber
        tInPrecision: BigNumber
        link: string
        options: BigNumber[]
      }
    >

    'getCampaignDetails(uint256)'(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber[]
      ] & {
        campaignType: number
        startTimestamp: BigNumber
        endTimestamp: BigNumber
        totalKNCSupply: BigNumber
        minPercentageInPrecision: BigNumber
        cInPrecision: BigNumber
        tInPrecision: BigNumber
        link: string
        options: BigNumber[]
      }
    >

    getCampaignVoteCountData(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber] & {
        voteCounts: BigNumber[]
        totalVoteCount: BigNumber
      }
    >

    'getCampaignVoteCountData(uint256)'(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber] & {
        voteCounts: BigNumber[]
        totalVoteCount: BigNumber
      }
    >

    getCampaignWinningOptionAndValue(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { optionID: BigNumber; value: BigNumber }
    >

    'getCampaignWinningOptionAndValue(uint256)'(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { optionID: BigNumber; value: BigNumber }
    >

    getCurrentEpochNumber(overrides?: CallOverrides): Promise<BigNumber>

    'getCurrentEpochNumber()'(overrides?: CallOverrides): Promise<BigNumber>

    getCurrentEpochRewardPercentageInPrecision(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getCurrentEpochRewardPercentageInPrecision(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getDataFromRewardAndRebateWithValidation(
      rewardInBps: BigNumberish,
      rebateInBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getDataFromRewardAndRebateWithValidation(uint256,uint256)'(
      rewardInBps: BigNumberish,
      rebateInBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getEpochNumber(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getEpochNumber(uint256)'(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getLatestBRRData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        burnInBps: BigNumber
        rewardInBps: BigNumber
        rebateInBps: BigNumber
        epoch: BigNumber
        expiryTimestamp: BigNumber
      }
    >

    'getLatestBRRData()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        burnInBps: BigNumber
        rewardInBps: BigNumber
        rebateInBps: BigNumber
        epoch: BigNumber
        expiryTimestamp: BigNumber
      }
    >

    getLatestBRRDataWithCache(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        burnInBps: BigNumber
        rewardInBps: BigNumber
        rebateInBps: BigNumber
        epoch: BigNumber
        expiryTimestamp: BigNumber
      }
    >

    'getLatestBRRDataWithCache()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        burnInBps: BigNumber
        rewardInBps: BigNumber
        rebateInBps: BigNumber
        epoch: BigNumber
        expiryTimestamp: BigNumber
      }
    >

    getLatestNetworkFeeData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeInBps: BigNumber
        expiryTimestamp: BigNumber
      }
    >

    'getLatestNetworkFeeData()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeInBps: BigNumber
        expiryTimestamp: BigNumber
      }
    >

    getLatestNetworkFeeDataWithCache(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeInBps: BigNumber
        expiryTimestamp: BigNumber
      }
    >

    'getLatestNetworkFeeDataWithCache()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeInBps: BigNumber
        expiryTimestamp: BigNumber
      }
    >

    getListCampaignIDs(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    'getListCampaignIDs(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    getPastEpochRewardPercentageInPrecision(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getPastEpochRewardPercentageInPrecision(address,uint256)'(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRebateAndRewardFromData(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rebateInBps: BigNumber
        rewardInBps: BigNumber
      }
    >

    'getRebateAndRewardFromData(uint256)'(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rebateInBps: BigNumber
        rewardInBps: BigNumber
      }
    >

    getTotalEpochPoints(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getTotalEpochPoints(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    handleWithdrawal(
      staker: string,
      reduceAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'handleWithdrawal(address,uint256)'(
      staker: string,
      reduceAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    kncToken(overrides?: CallOverrides): Promise<string>

    'kncToken()'(overrides?: CallOverrides): Promise<string>

    minCampaignDurationInSeconds(overrides?: CallOverrides): Promise<BigNumber>

    'minCampaignDurationInSeconds()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    networkFeeCampaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'networkFeeCampaigns(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    numberCampaigns(overrides?: CallOverrides): Promise<BigNumber>

    'numberCampaigns()'(overrides?: CallOverrides): Promise<BigNumber>

    numberVotes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'numberVotes(address,uint256)'(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    shouldBurnRewardForEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'shouldBurnRewardForEpoch(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    stakerVotedOption(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'stakerVotedOption(address,uint256)'(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    staking(overrides?: CallOverrides): Promise<string>

    'staking()'(overrides?: CallOverrides): Promise<string>

    submitNewCampaign(
      campaignType: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      minPercentageInPrecision: BigNumberish,
      cInPrecision: BigNumberish,
      tInPrecision: BigNumberish,
      options: BigNumberish[],
      link: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'submitNewCampaign(uint8,uint256,uint256,uint256,uint256,uint256,uint256[],bytes)'(
      campaignType: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      minPercentageInPrecision: BigNumberish,
      cInPrecision: BigNumberish,
      tInPrecision: BigNumberish,
      options: BigNumberish[],
      link: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    vote(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'vote(uint256,uint256)'(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    CancelledCampaign(campaignID: BigNumberish | null): EventFilter

    NewCampaignCreated(
      campaignType: null,
      campaignID: BigNumberish | null,
      startTimestamp: null,
      endTimestamp: null,
      minPercentageInPrecision: null,
      cInPrecision: null,
      tInPrecision: null,
      options: null,
      link: null
    ): EventFilter

    Voted(
      staker: string | null,
      epoch: BigNumberish | null,
      campaignID: BigNumberish | null,
      option: null
    ): EventFilter
  }

  estimateGas: {
    MAX_CAMPAIGN_OPTIONS(overrides?: CallOverrides): Promise<BigNumber>

    'MAX_CAMPAIGN_OPTIONS()'(overrides?: CallOverrides): Promise<BigNumber>

    MAX_EPOCH_CAMPAIGNS(overrides?: CallOverrides): Promise<BigNumber>

    'MAX_EPOCH_CAMPAIGNS()'(overrides?: CallOverrides): Promise<BigNumber>

    brrCampaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'brrCampaigns(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    cancelCampaign(
      campaignID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'cancelCampaign(uint256)'(
      campaignID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    daoOperator(overrides?: CallOverrides): Promise<BigNumber>

    'daoOperator()'(overrides?: CallOverrides): Promise<BigNumber>

    epochPeriodInSeconds(overrides?: CallOverrides): Promise<BigNumber>

    'epochPeriodInSeconds()'(overrides?: CallOverrides): Promise<BigNumber>

    firstEpochStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'firstEpochStartTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    getCampaignDetails(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getCampaignDetails(uint256)'(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCampaignVoteCountData(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getCampaignVoteCountData(uint256)'(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCampaignWinningOptionAndValue(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getCampaignWinningOptionAndValue(uint256)'(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCurrentEpochNumber(overrides?: CallOverrides): Promise<BigNumber>

    'getCurrentEpochNumber()'(overrides?: CallOverrides): Promise<BigNumber>

    getCurrentEpochRewardPercentageInPrecision(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getCurrentEpochRewardPercentageInPrecision(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getDataFromRewardAndRebateWithValidation(
      rewardInBps: BigNumberish,
      rebateInBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getDataFromRewardAndRebateWithValidation(uint256,uint256)'(
      rewardInBps: BigNumberish,
      rebateInBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getEpochNumber(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getEpochNumber(uint256)'(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getLatestBRRData(overrides?: CallOverrides): Promise<BigNumber>

    'getLatestBRRData()'(overrides?: CallOverrides): Promise<BigNumber>

    getLatestBRRDataWithCache(overrides?: Overrides): Promise<BigNumber>

    'getLatestBRRDataWithCache()'(overrides?: Overrides): Promise<BigNumber>

    getLatestNetworkFeeData(overrides?: CallOverrides): Promise<BigNumber>

    'getLatestNetworkFeeData()'(overrides?: CallOverrides): Promise<BigNumber>

    getLatestNetworkFeeDataWithCache(overrides?: Overrides): Promise<BigNumber>

    'getLatestNetworkFeeDataWithCache()'(
      overrides?: Overrides
    ): Promise<BigNumber>

    getListCampaignIDs(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getListCampaignIDs(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPastEpochRewardPercentageInPrecision(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getPastEpochRewardPercentageInPrecision(address,uint256)'(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRebateAndRewardFromData(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getRebateAndRewardFromData(uint256)'(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTotalEpochPoints(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getTotalEpochPoints(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    handleWithdrawal(
      staker: string,
      reduceAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'handleWithdrawal(address,uint256)'(
      staker: string,
      reduceAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    kncToken(overrides?: CallOverrides): Promise<BigNumber>

    'kncToken()'(overrides?: CallOverrides): Promise<BigNumber>

    minCampaignDurationInSeconds(overrides?: CallOverrides): Promise<BigNumber>

    'minCampaignDurationInSeconds()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    networkFeeCampaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'networkFeeCampaigns(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    numberCampaigns(overrides?: CallOverrides): Promise<BigNumber>

    'numberCampaigns()'(overrides?: CallOverrides): Promise<BigNumber>

    numberVotes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'numberVotes(address,uint256)'(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    shouldBurnRewardForEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'shouldBurnRewardForEpoch(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    stakerVotedOption(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'stakerVotedOption(address,uint256)'(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    staking(overrides?: CallOverrides): Promise<BigNumber>

    'staking()'(overrides?: CallOverrides): Promise<BigNumber>

    submitNewCampaign(
      campaignType: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      minPercentageInPrecision: BigNumberish,
      cInPrecision: BigNumberish,
      tInPrecision: BigNumberish,
      options: BigNumberish[],
      link: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'submitNewCampaign(uint8,uint256,uint256,uint256,uint256,uint256,uint256[],bytes)'(
      campaignType: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      minPercentageInPrecision: BigNumberish,
      cInPrecision: BigNumberish,
      tInPrecision: BigNumberish,
      options: BigNumberish[],
      link: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    vote(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'vote(uint256,uint256)'(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    MAX_CAMPAIGN_OPTIONS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'MAX_CAMPAIGN_OPTIONS()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    MAX_EPOCH_CAMPAIGNS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'MAX_EPOCH_CAMPAIGNS()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    brrCampaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'brrCampaigns(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    cancelCampaign(
      campaignID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'cancelCampaign(uint256)'(
      campaignID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    daoOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'daoOperator()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    epochPeriodInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'epochPeriodInSeconds()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    firstEpochStartTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'firstEpochStartTimestamp()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCampaignDetails(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getCampaignDetails(uint256)'(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCampaignVoteCountData(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getCampaignVoteCountData(uint256)'(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCampaignWinningOptionAndValue(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getCampaignWinningOptionAndValue(uint256)'(
      campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCurrentEpochNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getCurrentEpochNumber()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCurrentEpochRewardPercentageInPrecision(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getCurrentEpochRewardPercentageInPrecision(address)'(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getDataFromRewardAndRebateWithValidation(
      rewardInBps: BigNumberish,
      rebateInBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getDataFromRewardAndRebateWithValidation(uint256,uint256)'(
      rewardInBps: BigNumberish,
      rebateInBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getEpochNumber(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getEpochNumber(uint256)'(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLatestBRRData(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getLatestBRRData()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLatestBRRDataWithCache(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'getLatestBRRDataWithCache()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    getLatestNetworkFeeData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getLatestNetworkFeeData()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLatestNetworkFeeDataWithCache(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'getLatestNetworkFeeDataWithCache()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    getListCampaignIDs(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getListCampaignIDs(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPastEpochRewardPercentageInPrecision(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getPastEpochRewardPercentageInPrecision(address,uint256)'(
      staker: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRebateAndRewardFromData(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getRebateAndRewardFromData(uint256)'(
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTotalEpochPoints(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getTotalEpochPoints(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    handleWithdrawal(
      staker: string,
      reduceAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'handleWithdrawal(address,uint256)'(
      staker: string,
      reduceAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    kncToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'kncToken()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    minCampaignDurationInSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'minCampaignDurationInSeconds()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    networkFeeCampaigns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'networkFeeCampaigns(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    numberCampaigns(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'numberCampaigns()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    numberVotes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'numberVotes(address,uint256)'(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    shouldBurnRewardForEpoch(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'shouldBurnRewardForEpoch(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    stakerVotedOption(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'stakerVotedOption(address,uint256)'(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'staking()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    submitNewCampaign(
      campaignType: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      minPercentageInPrecision: BigNumberish,
      cInPrecision: BigNumberish,
      tInPrecision: BigNumberish,
      options: BigNumberish[],
      link: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'submitNewCampaign(uint8,uint256,uint256,uint256,uint256,uint256,uint256[],bytes)'(
      campaignType: BigNumberish,
      startTimestamp: BigNumberish,
      endTimestamp: BigNumberish,
      minPercentageInPrecision: BigNumberish,
      cInPrecision: BigNumberish,
      tInPrecision: BigNumberish,
      options: BigNumberish[],
      link: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    vote(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'vote(uint256,uint256)'(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
