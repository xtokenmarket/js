/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface XBNTInterface extends ethers.utils.Interface {
  functions: {
    'addLiquidity(address,uint256)': FunctionFragment
    'adminActiveTimestamp()': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'approveVbnt(address)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'burn(uint256,bool,address[],uint256)': FunctionFragment
    'calculateMintAmount(uint256,uint256)': FunctionFragment
    'changeGovernanceAddress(address)': FunctionFragment
    'changeLiquidityProviderImplementation(address)': FunctionFragment
    'claimAndRestake(uint256,address)': FunctionFragment
    'claimBalance(uint256)': FunctionFragment
    'claimRewards(uint256)': FunctionFragment
    'claimRewardsAndRemoveLiquidity()': FunctionFragment
    'confirmGovernanceAddressChange()': FunctionFragment
    'confirmLiquidityProviderImplementationChange()': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'depositIdToDeposit(uint256)': FunctionFragment
    'emergencyClaimAndRemove()': FunctionFragment
    'emergencyClaimBalance(uint256)': FunctionFragment
    'feeDivisors()': FunctionFragment
    'getBancorNetworkContract()': FunctionFragment
    'getBufferBalance()': FunctionFragment
    'getLiquidityProtectionContract()': FunctionFragment
    'getNav()': FunctionFragment
    'getProxyAddressDepositIds(address)': FunctionFragment
    'getProxyAddressRewardsContributionToNav(address)': FunctionFragment
    'getRewardsContributionToNav()': FunctionFragment
    'getStakingRewardsContract()': FunctionFragment
    'getTargetBufferBalance()': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'initialize(address,address,address,address,address,address,uint256,uint256,uint256,string)': FunctionFragment
    'lowestActiveProxyIndex()': FunctionFragment
    'mint(address[],uint256)': FunctionFragment
    'mintWithToken(uint256)': FunctionFragment
    'name()': FunctionFragment
    'nextProxyIndex()': FunctionFragment
    'owner()': FunctionFragment
    'pauseContract()': FunctionFragment
    'paused()': FunctionFragment
    'pendingRewardsContributionToNav()': FunctionFragment
    'proxyIndexToAddress(uint256)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setDelegate(address,bytes32,address)': FunctionFragment
    'setFeeDivisors(uint256,uint256,uint256)': FunctionFragment
    'setManager(address)': FunctionFragment
    'setManager2(address)': FunctionFragment
    'symbol()': FunctionFragment
    'totalAllocatedNav()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpauseContract()': FunctionFragment
    'updatePendingRewardsContributionToNav(uint256,uint256)': FunctionFragment
    'updateTotalAllocatedNav(uint256,uint256)': FunctionFragment
    'withdrawableBntFees()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'addLiquidity',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'adminActiveTimestamp',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'approveVbnt', values: [string]): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(
    functionFragment: 'burn',
    values: [BigNumberish, boolean, string[], BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateMintAmount',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'changeGovernanceAddress',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'changeLiquidityProviderImplementation',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'claimAndRestake',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'claimBalance',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'claimRewards',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'claimRewardsAndRemoveLiquidity',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'confirmGovernanceAddressChange',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'confirmLiquidityProviderImplementationChange',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'depositIdToDeposit',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyClaimAndRemove',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyClaimBalance',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'feeDivisors',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getBancorNetworkContract',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getBufferBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getLiquidityProtectionContract',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'getNav', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getProxyAddressDepositIds',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'getProxyAddressRewardsContributionToNav',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'getRewardsContributionToNav',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getStakingRewardsContract',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getTargetBufferBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'lowestActiveProxyIndex',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'mint',
    values: [string[], BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'mintWithToken',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'nextProxyIndex',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'pauseContract',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'pendingRewardsContributionToNav',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'proxyIndexToAddress',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setDelegate',
    values: [string, BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'setFeeDivisors',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'setManager', values: [string]): string
  encodeFunctionData(functionFragment: 'setManager2', values: [string]): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalAllocatedNav',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'unpauseContract',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'updatePendingRewardsContributionToNav',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'updateTotalAllocatedNav',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawableBntFees',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'addLiquidity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'adminActiveTimestamp',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approveVbnt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'calculateMintAmount',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'changeGovernanceAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'changeLiquidityProviderImplementation',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'claimAndRestake',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'claimBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'claimRewards',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'claimRewardsAndRemoveLiquidity',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'confirmGovernanceAddressChange',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'confirmLiquidityProviderImplementationChange',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'depositIdToDeposit',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'emergencyClaimAndRemove',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'emergencyClaimBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'feeDivisors', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getBancorNetworkContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getBufferBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLiquidityProtectionContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getNav', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getProxyAddressDepositIds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getProxyAddressRewardsContributionToNav',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRewardsContributionToNav',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStakingRewardsContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getTargetBufferBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lowestActiveProxyIndex',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'mintWithToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'nextProxyIndex',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'pauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'pendingRewardsContributionToNav',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'proxyIndexToAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setDelegate', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setFeeDivisors',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setManager', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setManager2', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'totalAllocatedNav',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'unpauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updatePendingRewardsContributionToNav',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateTotalAllocatedNav',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawableBntFees',
    data: BytesLike
  ): Result

  events: {
    'AddLiquidity(address,uint256,uint256,uint256,uint256)': EventFragment
    'Approval(address,address,uint256)': EventFragment
    'ClaimBalance(uint256)': EventFragment
    'ClaimRemove(uint256,uint256)': EventFragment
    'ClaimRestake(uint256,uint256,uint256,uint256)': EventFragment
    'ClaimRewards(uint256,uint256)': EventFragment
    'KeyAddressChange()': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'RewardsNavUpdated(uint256,uint256,uint256)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AddLiquidity'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ClaimBalance'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ClaimRemove'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ClaimRestake'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ClaimRewards'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'KeyAddressChange'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RewardsNavUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export class XBNT extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: XBNTInterface

  functions: {
    addLiquidity(
      _poolAnchor: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'addLiquidity(address,uint256)'(
      _poolAnchor: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    adminActiveTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>

    'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<[BigNumber]>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    approveVbnt(
      _toApprove: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approveVbnt(address)'(
      _toApprove: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    burn(
      redeemAmount: BigNumberish,
      redeemForEth: boolean,
      path: string[],
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'burn(uint256,bool,address[],uint256)'(
      redeemAmount: BigNumberish,
      redeemForEth: boolean,
      path: string[],
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    calculateMintAmount(
      incrementalBnt: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintAmount: BigNumber }>

    'calculateMintAmount(uint256,uint256)'(
      incrementalBnt: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintAmount: BigNumber }>

    changeGovernanceAddress(
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'changeGovernanceAddress(address)'(
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    changeLiquidityProviderImplementation(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'changeLiquidityProviderImplementation(address)'(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    claimAndRestake(
      proxyIndex: BigNumberish,
      poolToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'claimAndRestake(uint256,address)'(
      proxyIndex: BigNumberish,
      poolToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    claimBalance(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'claimBalance(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    claimRewards(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'claimRewards(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    claimRewardsAndRemoveLiquidity(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'claimRewardsAndRemoveLiquidity()'(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    confirmGovernanceAddressChange(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'confirmGovernanceAddressChange()'(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    confirmLiquidityProviderImplementationChange(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'confirmLiquidityProviderImplementationChange()'(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    decimals(overrides?: CallOverrides): Promise<[number]>

    'decimals()'(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    depositIdToDeposit(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        proxyAddress: string
        depositId: BigNumber
        initialContribution: BigNumber
        latestContributionToNav: BigNumber
      }
    >

    'depositIdToDeposit(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        proxyAddress: string
        depositId: BigNumber
        initialContribution: BigNumber
        latestContributionToNav: BigNumber
      }
    >

    emergencyClaimAndRemove(overrides?: Overrides): Promise<ContractTransaction>

    'emergencyClaimAndRemove()'(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    emergencyClaimBalance(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'emergencyClaimBalance(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    feeDivisors(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    'feeDivisors()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    getBancorNetworkContract(overrides?: CallOverrides): Promise<[string]>

    'getBancorNetworkContract()'(overrides?: CallOverrides): Promise<[string]>

    getBufferBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getLiquidityProtectionContract(overrides?: CallOverrides): Promise<[string]>

    'getLiquidityProtectionContract()'(
      overrides?: CallOverrides
    ): Promise<[string]>

    getNav(overrides?: CallOverrides): Promise<[BigNumber]>

    'getNav()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getProxyAddressDepositIds(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>

    'getProxyAddressDepositIds(address)'(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>

    getProxyAddressRewardsContributionToNav(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getProxyAddressRewardsContributionToNav(address)'(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getRewardsContributionToNav(overrides?: CallOverrides): Promise<[BigNumber]>

    'getRewardsContributionToNav()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getStakingRewardsContract(overrides?: CallOverrides): Promise<[string]>

    'getStakingRewardsContract()'(overrides?: CallOverrides): Promise<[string]>

    getTargetBufferBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    'getTargetBufferBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    initialize(
      _bnt: string,
      _vbnt: string,
      _contractRegistry: string,
      _bancorGovernance: string,
      _proxyFactory: string,
      _liquidityProviderImplementation: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(address,address,address,address,address,address,uint256,uint256,uint256,string)'(
      _bnt: string,
      _vbnt: string,
      _contractRegistry: string,
      _bancorGovernance: string,
      _proxyFactory: string,
      _liquidityProviderImplementation: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    lowestActiveProxyIndex(overrides?: CallOverrides): Promise<[BigNumber]>

    'lowestActiveProxyIndex()'(overrides?: CallOverrides): Promise<[BigNumber]>

    mint(
      path: string[],
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'mint(address[],uint256)'(
      path: string[],
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    mintWithToken(
      bntAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'mintWithToken(uint256)'(
      bntAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    'name()'(overrides?: CallOverrides): Promise<[string]>

    nextProxyIndex(overrides?: CallOverrides): Promise<[BigNumber]>

    'nextProxyIndex()'(overrides?: CallOverrides): Promise<[BigNumber]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    pauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>

    pendingRewardsContributionToNav(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'pendingRewardsContributionToNav()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    proxyIndexToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    'proxyIndexToAddress(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    setDelegate(
      delegateRegistry: string,
      id: BytesLike,
      delegate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setDelegate(address,bytes32,address)'(
      delegateRegistry: string,
      id: BytesLike,
      delegate: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setManager(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setManager2(
      _manager2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setManager2(address)'(
      _manager2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    'symbol()'(overrides?: CallOverrides): Promise<[string]>

    totalAllocatedNav(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalAllocatedNav()'(overrides?: CallOverrides): Promise<[BigNumber]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    updatePendingRewardsContributionToNav(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'updatePendingRewardsContributionToNav(uint256,uint256)'(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    updateTotalAllocatedNav(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'updateTotalAllocatedNav(uint256,uint256)'(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    withdrawableBntFees(overrides?: CallOverrides): Promise<[BigNumber]>

    'withdrawableBntFees()'(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  addLiquidity(
    _poolAnchor: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'addLiquidity(address,uint256)'(
    _poolAnchor: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  adminActiveTimestamp(overrides?: CallOverrides): Promise<BigNumber>

  'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  approveVbnt(
    _toApprove: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approveVbnt(address)'(
    _toApprove: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

  'balanceOf(address)'(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  burn(
    redeemAmount: BigNumberish,
    redeemForEth: boolean,
    path: string[],
    minReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'burn(uint256,bool,address[],uint256)'(
    redeemAmount: BigNumberish,
    redeemForEth: boolean,
    path: string[],
    minReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  calculateMintAmount(
    incrementalBnt: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateMintAmount(uint256,uint256)'(
    incrementalBnt: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  changeGovernanceAddress(
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'changeGovernanceAddress(address)'(
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  changeLiquidityProviderImplementation(
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'changeLiquidityProviderImplementation(address)'(
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  claimAndRestake(
    proxyIndex: BigNumberish,
    poolToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'claimAndRestake(uint256,address)'(
    proxyIndex: BigNumberish,
    poolToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  claimBalance(
    proxyIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'claimBalance(uint256)'(
    proxyIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  claimRewards(
    proxyIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'claimRewards(uint256)'(
    proxyIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  claimRewardsAndRemoveLiquidity(
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'claimRewardsAndRemoveLiquidity()'(
    overrides?: Overrides
  ): Promise<ContractTransaction>

  confirmGovernanceAddressChange(
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'confirmGovernanceAddressChange()'(
    overrides?: Overrides
  ): Promise<ContractTransaction>

  confirmLiquidityProviderImplementationChange(
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'confirmLiquidityProviderImplementationChange()'(
    overrides?: Overrides
  ): Promise<ContractTransaction>

  decimals(overrides?: CallOverrides): Promise<number>

  'decimals()'(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  depositIdToDeposit(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      proxyAddress: string
      depositId: BigNumber
      initialContribution: BigNumber
      latestContributionToNav: BigNumber
    }
  >

  'depositIdToDeposit(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      proxyAddress: string
      depositId: BigNumber
      initialContribution: BigNumber
      latestContributionToNav: BigNumber
    }
  >

  emergencyClaimAndRemove(overrides?: Overrides): Promise<ContractTransaction>

  'emergencyClaimAndRemove()'(
    overrides?: Overrides
  ): Promise<ContractTransaction>

  emergencyClaimBalance(
    proxyIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'emergencyClaimBalance(uint256)'(
    proxyIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  feeDivisors(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      mintFee: BigNumber
      burnFee: BigNumber
      claimFee: BigNumber
    }
  >

  'feeDivisors()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      mintFee: BigNumber
      burnFee: BigNumber
      claimFee: BigNumber
    }
  >

  getBancorNetworkContract(overrides?: CallOverrides): Promise<string>

  'getBancorNetworkContract()'(overrides?: CallOverrides): Promise<string>

  getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

  'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

  getLiquidityProtectionContract(overrides?: CallOverrides): Promise<string>

  'getLiquidityProtectionContract()'(overrides?: CallOverrides): Promise<string>

  getNav(overrides?: CallOverrides): Promise<BigNumber>

  'getNav()'(overrides?: CallOverrides): Promise<BigNumber>

  getProxyAddressDepositIds(
    proxyAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  'getProxyAddressDepositIds(address)'(
    proxyAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  getProxyAddressRewardsContributionToNav(
    proxyAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getProxyAddressRewardsContributionToNav(address)'(
    proxyAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getRewardsContributionToNav(overrides?: CallOverrides): Promise<BigNumber>

  'getRewardsContributionToNav()'(overrides?: CallOverrides): Promise<BigNumber>

  getStakingRewardsContract(overrides?: CallOverrides): Promise<string>

  'getStakingRewardsContract()'(overrides?: CallOverrides): Promise<string>

  getTargetBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

  'getTargetBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  initialize(
    _bnt: string,
    _vbnt: string,
    _contractRegistry: string,
    _bancorGovernance: string,
    _proxyFactory: string,
    _liquidityProviderImplementation: string,
    _mintFeeDivisor: BigNumberish,
    _burnFeeDivisor: BigNumberish,
    _claimFeeDivisor: BigNumberish,
    _symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(address,address,address,address,address,address,uint256,uint256,uint256,string)'(
    _bnt: string,
    _vbnt: string,
    _contractRegistry: string,
    _bancorGovernance: string,
    _proxyFactory: string,
    _liquidityProviderImplementation: string,
    _mintFeeDivisor: BigNumberish,
    _burnFeeDivisor: BigNumberish,
    _claimFeeDivisor: BigNumberish,
    _symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  lowestActiveProxyIndex(overrides?: CallOverrides): Promise<BigNumber>

  'lowestActiveProxyIndex()'(overrides?: CallOverrides): Promise<BigNumber>

  mint(
    path: string[],
    minReturn: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'mint(address[],uint256)'(
    path: string[],
    minReturn: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  mintWithToken(
    bntAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'mintWithToken(uint256)'(
    bntAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  nextProxyIndex(overrides?: CallOverrides): Promise<BigNumber>

  'nextProxyIndex()'(overrides?: CallOverrides): Promise<BigNumber>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  pauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  'paused()'(overrides?: CallOverrides): Promise<boolean>

  pendingRewardsContributionToNav(overrides?: CallOverrides): Promise<BigNumber>

  'pendingRewardsContributionToNav()'(
    overrides?: CallOverrides
  ): Promise<BigNumber>

  proxyIndexToAddress(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  'proxyIndexToAddress(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  setDelegate(
    delegateRegistry: string,
    id: BytesLike,
    delegate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setDelegate(address,bytes32,address)'(
    delegateRegistry: string,
    id: BytesLike,
    delegate: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setFeeDivisors(
    mintFeeDivisor: BigNumberish,
    burnFeeDivisor: BigNumberish,
    claimFeeDivisor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setFeeDivisors(uint256,uint256,uint256)'(
    mintFeeDivisor: BigNumberish,
    burnFeeDivisor: BigNumberish,
    claimFeeDivisor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setManager(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setManager(address)'(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setManager2(
    _manager2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setManager2(address)'(
    _manager2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  'symbol()'(overrides?: CallOverrides): Promise<string>

  totalAllocatedNav(overrides?: CallOverrides): Promise<BigNumber>

  'totalAllocatedNav()'(overrides?: CallOverrides): Promise<BigNumber>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferFrom(address,address,uint256)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  updatePendingRewardsContributionToNav(
    beginProxyIndexIterator: BigNumberish,
    endProxyIndexIterator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'updatePendingRewardsContributionToNav(uint256,uint256)'(
    beginProxyIndexIterator: BigNumberish,
    endProxyIndexIterator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  updateTotalAllocatedNav(
    beginProxyIndexIterator: BigNumberish,
    endProxyIndexIterator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'updateTotalAllocatedNav(uint256,uint256)'(
    beginProxyIndexIterator: BigNumberish,
    endProxyIndexIterator: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  withdrawableBntFees(overrides?: CallOverrides): Promise<BigNumber>

  'withdrawableBntFees()'(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    addLiquidity(
      _poolAnchor: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'addLiquidity(address,uint256)'(
      _poolAnchor: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    adminActiveTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    approveVbnt(_toApprove: string, overrides?: CallOverrides): Promise<void>

    'approveVbnt(address)'(
      _toApprove: string,
      overrides?: CallOverrides
    ): Promise<void>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      redeemAmount: BigNumberish,
      redeemForEth: boolean,
      path: string[],
      minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'burn(uint256,bool,address[],uint256)'(
      redeemAmount: BigNumberish,
      redeemForEth: boolean,
      path: string[],
      minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    calculateMintAmount(
      incrementalBnt: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateMintAmount(uint256,uint256)'(
      incrementalBnt: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    changeGovernanceAddress(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'changeGovernanceAddress(address)'(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    changeLiquidityProviderImplementation(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>

    'changeLiquidityProviderImplementation(address)'(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>

    claimAndRestake(
      proxyIndex: BigNumberish,
      poolToken: string,
      overrides?: CallOverrides
    ): Promise<void>

    'claimAndRestake(uint256,address)'(
      proxyIndex: BigNumberish,
      poolToken: string,
      overrides?: CallOverrides
    ): Promise<void>

    claimBalance(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'claimBalance(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    claimRewards(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'claimRewards(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    claimRewardsAndRemoveLiquidity(overrides?: CallOverrides): Promise<void>

    'claimRewardsAndRemoveLiquidity()'(overrides?: CallOverrides): Promise<void>

    confirmGovernanceAddressChange(overrides?: CallOverrides): Promise<void>

    'confirmGovernanceAddressChange()'(overrides?: CallOverrides): Promise<void>

    confirmLiquidityProviderImplementationChange(
      overrides?: CallOverrides
    ): Promise<void>

    'confirmLiquidityProviderImplementationChange()'(
      overrides?: CallOverrides
    ): Promise<void>

    decimals(overrides?: CallOverrides): Promise<number>

    'decimals()'(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    depositIdToDeposit(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        proxyAddress: string
        depositId: BigNumber
        initialContribution: BigNumber
        latestContributionToNav: BigNumber
      }
    >

    'depositIdToDeposit(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        proxyAddress: string
        depositId: BigNumber
        initialContribution: BigNumber
        latestContributionToNav: BigNumber
      }
    >

    emergencyClaimAndRemove(overrides?: CallOverrides): Promise<void>

    'emergencyClaimAndRemove()'(overrides?: CallOverrides): Promise<void>

    emergencyClaimBalance(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'emergencyClaimBalance(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    feeDivisors(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    'feeDivisors()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    getBancorNetworkContract(overrides?: CallOverrides): Promise<string>

    'getBancorNetworkContract()'(overrides?: CallOverrides): Promise<string>

    getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getLiquidityProtectionContract(overrides?: CallOverrides): Promise<string>

    'getLiquidityProtectionContract()'(
      overrides?: CallOverrides
    ): Promise<string>

    getNav(overrides?: CallOverrides): Promise<BigNumber>

    'getNav()'(overrides?: CallOverrides): Promise<BigNumber>

    getProxyAddressDepositIds(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    'getProxyAddressDepositIds(address)'(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    getProxyAddressRewardsContributionToNav(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getProxyAddressRewardsContributionToNav(address)'(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRewardsContributionToNav(overrides?: CallOverrides): Promise<BigNumber>

    'getRewardsContributionToNav()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getStakingRewardsContract(overrides?: CallOverrides): Promise<string>

    'getStakingRewardsContract()'(overrides?: CallOverrides): Promise<string>

    getTargetBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getTargetBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    initialize(
      _bnt: string,
      _vbnt: string,
      _contractRegistry: string,
      _bancorGovernance: string,
      _proxyFactory: string,
      _liquidityProviderImplementation: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(address,address,address,address,address,address,uint256,uint256,uint256,string)'(
      _bnt: string,
      _vbnt: string,
      _contractRegistry: string,
      _bancorGovernance: string,
      _proxyFactory: string,
      _liquidityProviderImplementation: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<void>

    lowestActiveProxyIndex(overrides?: CallOverrides): Promise<BigNumber>

    'lowestActiveProxyIndex()'(overrides?: CallOverrides): Promise<BigNumber>

    mint(
      path: string[],
      minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'mint(address[],uint256)'(
      path: string[],
      minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    mintWithToken(
      bntAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'mintWithToken(uint256)'(
      bntAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    nextProxyIndex(overrides?: CallOverrides): Promise<BigNumber>

    'nextProxyIndex()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    pauseContract(overrides?: CallOverrides): Promise<void>

    'pauseContract()'(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    'paused()'(overrides?: CallOverrides): Promise<boolean>

    pendingRewardsContributionToNav(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'pendingRewardsContributionToNav()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    proxyIndexToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    'proxyIndexToAddress(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    setDelegate(
      delegateRegistry: string,
      id: BytesLike,
      delegate: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setDelegate(address,bytes32,address)'(
      delegateRegistry: string,
      id: BytesLike,
      delegate: string,
      overrides?: CallOverrides
    ): Promise<void>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setManager(_manager: string, overrides?: CallOverrides): Promise<void>

    'setManager(address)'(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<void>

    setManager2(_manager2: string, overrides?: CallOverrides): Promise<void>

    'setManager2(address)'(
      _manager2: string,
      overrides?: CallOverrides
    ): Promise<void>

    symbol(overrides?: CallOverrides): Promise<string>

    'symbol()'(overrides?: CallOverrides): Promise<string>

    totalAllocatedNav(overrides?: CallOverrides): Promise<BigNumber>

    'totalAllocatedNav()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    unpauseContract(overrides?: CallOverrides): Promise<void>

    'unpauseContract()'(overrides?: CallOverrides): Promise<void>

    updatePendingRewardsContributionToNav(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'updatePendingRewardsContributionToNav(uint256,uint256)'(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    updateTotalAllocatedNav(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'updateTotalAllocatedNav(uint256,uint256)'(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawableBntFees(overrides?: CallOverrides): Promise<BigNumber>

    'withdrawableBntFees()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    AddLiquidity(
      poolToken: null,
      amount: null,
      depositId: null,
      proxyIndex: null,
      timestamp: null
    ): EventFilter

    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter

    ClaimBalance(proxyIndex: null): EventFilter

    ClaimRemove(proxyIndex: null, rewardsClaimed: null): EventFilter

    ClaimRestake(
      proxyIndex: null,
      amount: null,
      depositId: null,
      timestamp: null
    ): EventFilter

    ClaimRewards(proxyIndex: null, rewardsClaimed: null): EventFilter

    KeyAddressChange(): EventFilter

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter

    Paused(account: null): EventFilter

    RewardsNavUpdated(
      previousRewardsNav: null,
      newRewardsNav: null,
      timestamp: null
    ): EventFilter

    Transfer(from: string | null, to: string | null, value: null): EventFilter

    Unpaused(account: null): EventFilter
  }

  estimateGas: {
    addLiquidity(
      _poolAnchor: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'addLiquidity(address,uint256)'(
      _poolAnchor: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    adminActiveTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    approveVbnt(_toApprove: string, overrides?: Overrides): Promise<BigNumber>

    'approveVbnt(address)'(
      _toApprove: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      redeemAmount: BigNumberish,
      redeemForEth: boolean,
      path: string[],
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'burn(uint256,bool,address[],uint256)'(
      redeemAmount: BigNumberish,
      redeemForEth: boolean,
      path: string[],
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    calculateMintAmount(
      incrementalBnt: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateMintAmount(uint256,uint256)'(
      incrementalBnt: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    changeGovernanceAddress(
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'changeGovernanceAddress(address)'(
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    changeLiquidityProviderImplementation(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'changeLiquidityProviderImplementation(address)'(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    claimAndRestake(
      proxyIndex: BigNumberish,
      poolToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'claimAndRestake(uint256,address)'(
      proxyIndex: BigNumberish,
      poolToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    claimBalance(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'claimBalance(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    claimRewards(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'claimRewards(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    claimRewardsAndRemoveLiquidity(overrides?: Overrides): Promise<BigNumber>

    'claimRewardsAndRemoveLiquidity()'(
      overrides?: Overrides
    ): Promise<BigNumber>

    confirmGovernanceAddressChange(overrides?: Overrides): Promise<BigNumber>

    'confirmGovernanceAddressChange()'(
      overrides?: Overrides
    ): Promise<BigNumber>

    confirmLiquidityProviderImplementationChange(
      overrides?: Overrides
    ): Promise<BigNumber>

    'confirmLiquidityProviderImplementationChange()'(
      overrides?: Overrides
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    depositIdToDeposit(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'depositIdToDeposit(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    emergencyClaimAndRemove(overrides?: Overrides): Promise<BigNumber>

    'emergencyClaimAndRemove()'(overrides?: Overrides): Promise<BigNumber>

    emergencyClaimBalance(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'emergencyClaimBalance(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    feeDivisors(overrides?: CallOverrides): Promise<BigNumber>

    'feeDivisors()'(overrides?: CallOverrides): Promise<BigNumber>

    getBancorNetworkContract(overrides?: CallOverrides): Promise<BigNumber>

    'getBancorNetworkContract()'(overrides?: CallOverrides): Promise<BigNumber>

    getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getLiquidityProtectionContract(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getLiquidityProtectionContract()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getNav(overrides?: CallOverrides): Promise<BigNumber>

    'getNav()'(overrides?: CallOverrides): Promise<BigNumber>

    getProxyAddressDepositIds(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getProxyAddressDepositIds(address)'(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getProxyAddressRewardsContributionToNav(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getProxyAddressRewardsContributionToNav(address)'(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRewardsContributionToNav(overrides?: CallOverrides): Promise<BigNumber>

    'getRewardsContributionToNav()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getStakingRewardsContract(overrides?: CallOverrides): Promise<BigNumber>

    'getStakingRewardsContract()'(overrides?: CallOverrides): Promise<BigNumber>

    getTargetBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getTargetBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    initialize(
      _bnt: string,
      _vbnt: string,
      _contractRegistry: string,
      _bancorGovernance: string,
      _proxyFactory: string,
      _liquidityProviderImplementation: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(address,address,address,address,address,address,uint256,uint256,uint256,string)'(
      _bnt: string,
      _vbnt: string,
      _contractRegistry: string,
      _bancorGovernance: string,
      _proxyFactory: string,
      _liquidityProviderImplementation: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    lowestActiveProxyIndex(overrides?: CallOverrides): Promise<BigNumber>

    'lowestActiveProxyIndex()'(overrides?: CallOverrides): Promise<BigNumber>

    mint(
      path: string[],
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'mint(address[],uint256)'(
      path: string[],
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    mintWithToken(
      bntAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'mintWithToken(uint256)'(
      bntAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    nextProxyIndex(overrides?: CallOverrides): Promise<BigNumber>

    'nextProxyIndex()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    pauseContract(overrides?: Overrides): Promise<BigNumber>

    'pauseContract()'(overrides?: Overrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>

    pendingRewardsContributionToNav(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'pendingRewardsContributionToNav()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    proxyIndexToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'proxyIndexToAddress(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    setDelegate(
      delegateRegistry: string,
      id: BytesLike,
      delegate: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setDelegate(address,bytes32,address)'(
      delegateRegistry: string,
      id: BytesLike,
      delegate: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setManager(_manager: string, overrides?: Overrides): Promise<BigNumber>

    'setManager(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setManager2(_manager2: string, overrides?: Overrides): Promise<BigNumber>

    'setManager2(address)'(
      _manager2: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>

    totalAllocatedNav(overrides?: CallOverrides): Promise<BigNumber>

    'totalAllocatedNav()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    unpauseContract(overrides?: Overrides): Promise<BigNumber>

    'unpauseContract()'(overrides?: Overrides): Promise<BigNumber>

    updatePendingRewardsContributionToNav(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'updatePendingRewardsContributionToNav(uint256,uint256)'(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    updateTotalAllocatedNav(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'updateTotalAllocatedNav(uint256,uint256)'(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    withdrawableBntFees(overrides?: CallOverrides): Promise<BigNumber>

    'withdrawableBntFees()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    addLiquidity(
      _poolAnchor: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'addLiquidity(address,uint256)'(
      _poolAnchor: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    adminActiveTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'adminActiveTimestamp()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    approveVbnt(
      _toApprove: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approveVbnt(address)'(
      _toApprove: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    burn(
      redeemAmount: BigNumberish,
      redeemForEth: boolean,
      path: string[],
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'burn(uint256,bool,address[],uint256)'(
      redeemAmount: BigNumberish,
      redeemForEth: boolean,
      path: string[],
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    calculateMintAmount(
      incrementalBnt: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateMintAmount(uint256,uint256)'(
      incrementalBnt: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    changeGovernanceAddress(
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'changeGovernanceAddress(address)'(
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    changeLiquidityProviderImplementation(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'changeLiquidityProviderImplementation(address)'(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    claimAndRestake(
      proxyIndex: BigNumberish,
      poolToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'claimAndRestake(uint256,address)'(
      proxyIndex: BigNumberish,
      poolToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    claimBalance(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'claimBalance(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    claimRewards(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'claimRewards(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    claimRewardsAndRemoveLiquidity(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'claimRewardsAndRemoveLiquidity()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    confirmGovernanceAddressChange(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'confirmGovernanceAddressChange()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    confirmLiquidityProviderImplementationChange(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'confirmLiquidityProviderImplementationChange()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    depositIdToDeposit(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'depositIdToDeposit(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    emergencyClaimAndRemove(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'emergencyClaimAndRemove()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    emergencyClaimBalance(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'emergencyClaimBalance(uint256)'(
      proxyIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    feeDivisors(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'feeDivisors()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getBancorNetworkContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getBancorNetworkContract()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getBufferBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getBufferBalance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLiquidityProtectionContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getLiquidityProtectionContract()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNav(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getNav()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getProxyAddressDepositIds(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getProxyAddressDepositIds(address)'(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getProxyAddressRewardsContributionToNav(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getProxyAddressRewardsContributionToNav(address)'(
      proxyAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRewardsContributionToNav(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getRewardsContributionToNav()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getStakingRewardsContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getStakingRewardsContract()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getTargetBufferBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getTargetBufferBalance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    initialize(
      _bnt: string,
      _vbnt: string,
      _contractRegistry: string,
      _bancorGovernance: string,
      _proxyFactory: string,
      _liquidityProviderImplementation: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(address,address,address,address,address,address,uint256,uint256,uint256,string)'(
      _bnt: string,
      _vbnt: string,
      _contractRegistry: string,
      _bancorGovernance: string,
      _proxyFactory: string,
      _liquidityProviderImplementation: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      _symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    lowestActiveProxyIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'lowestActiveProxyIndex()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    mint(
      path: string[],
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'mint(address[],uint256)'(
      path: string[],
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    mintWithToken(
      bntAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'mintWithToken(uint256)'(
      bntAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nextProxyIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'nextProxyIndex()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pendingRewardsContributionToNav(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'pendingRewardsContributionToNav()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    proxyIndexToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'proxyIndexToAddress(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    setDelegate(
      delegateRegistry: string,
      id: BytesLike,
      delegate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setDelegate(address,bytes32,address)'(
      delegateRegistry: string,
      id: BytesLike,
      delegate: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setManager(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setManager2(
      _manager2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setManager2(address)'(
      _manager2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalAllocatedNav(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalAllocatedNav()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    unpauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    updatePendingRewardsContributionToNav(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'updatePendingRewardsContributionToNav(uint256,uint256)'(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    updateTotalAllocatedNav(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'updateTotalAllocatedNav(uint256,uint256)'(
      beginProxyIndexIterator: BigNumberish,
      endProxyIndexIterator: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    withdrawableBntFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'withdrawableBntFees()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
