/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface XINCHInterface extends ethers.utils.Interface {
  functions: {
    'adminActiveTimestamp()': FunctionFragment
    'adminUnstake(uint256)': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'approveInch(address)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'burn(uint256,bool,uint256)': FunctionFragment
    'calculateMintAmount(uint256,uint256)': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'defaultDecayPeriodVote(uint256)': FunctionFragment
    'defaultFeeVote(uint256)': FunctionFragment
    'defaultSlippageFeeVote(uint256)': FunctionFragment
    'emergencyUnstake(uint256)': FunctionFragment
    'feeDivisors()': FunctionFragment
    'getBufferBalance()': FunctionFragment
    'getNav()': FunctionFragment
    'getReward()': FunctionFragment
    'getRewardExternal()': FunctionFragment
    'getStakedBalance()': FunctionFragment
    'governanceShareVote(uint256)': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'initialize(string,address,address,address,uint256,uint256,uint256)': FunctionFragment
    'leftoverShareVote(uint256,uint256)': FunctionFragment
    'mint(uint256)': FunctionFragment
    'mintWithToken(uint256)': FunctionFragment
    'name()': FunctionFragment
    'owner()': FunctionFragment
    'pauseContract()': FunctionFragment
    'paused()': FunctionFragment
    'poolDecayPeriodVote(address,uint256)': FunctionFragment
    'poolFeeVote(address,uint256)': FunctionFragment
    'poolSlippageFeeVote(address,uint256)': FunctionFragment
    'rebalance()': FunctionFragment
    'rebalanceExternal()': FunctionFragment
    'referralShareVote(uint256)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setExchangeGovernanceAddress(address)': FunctionFragment
    'setFactoryGovernanceAddress(address)': FunctionFragment
    'setFeeDivisors(uint256,uint256,uint256)': FunctionFragment
    'setGovernanceRewardsAddress(address)': FunctionFragment
    'setManager(address)': FunctionFragment
    'setManager2(address)': FunctionFragment
    'symbol()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpauseContract()': FunctionFragment
    'unstake(uint256)': FunctionFragment
    'withdrawFees()': FunctionFragment
    'withdrawNativeToken()': FunctionFragment
    'withdrawableOneInchFees()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'adminActiveTimestamp',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'adminUnstake',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'approveInch', values: [string]): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(
    functionFragment: 'burn',
    values: [BigNumberish, boolean, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateMintAmount',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'defaultDecayPeriodVote',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'defaultFeeVote',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'defaultSlippageFeeVote',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'emergencyUnstake',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'feeDivisors',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getBufferBalance',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'getNav', values?: undefined): string
  encodeFunctionData(functionFragment: 'getReward', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getRewardExternal',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getStakedBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'governanceShareVote',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'leftoverShareVote',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'mintWithToken',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'pauseContract',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'poolDecayPeriodVote',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'poolFeeVote',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'poolSlippageFeeVote',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'rebalance', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'rebalanceExternal',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'referralShareVote',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setExchangeGovernanceAddress',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'setFactoryGovernanceAddress',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'setFeeDivisors',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setGovernanceRewardsAddress',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'setManager', values: [string]): string
  encodeFunctionData(functionFragment: 'setManager2', values: [string]): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'unpauseContract',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'unstake',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawFees',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawNativeToken',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawableOneInchFees',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'adminActiveTimestamp',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'adminUnstake',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approveInch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'calculateMintAmount',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'defaultDecayPeriodVote',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'defaultFeeVote',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'defaultSlippageFeeVote',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'emergencyUnstake',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'feeDivisors', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getBufferBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getNav', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getReward', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getRewardExternal',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getStakedBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'governanceShareVote',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'leftoverShareVote',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'mintWithToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'pauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'poolDecayPeriodVote',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'poolFeeVote', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'poolSlippageFeeVote',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'rebalance', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'rebalanceExternal',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'referralShareVote',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setExchangeGovernanceAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setFactoryGovernanceAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setFeeDivisors',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setGovernanceRewardsAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setManager', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setManager2', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'unpauseContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'withdrawFees',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawNativeToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawableOneInchFees',
    data: BytesLike
  ): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'FeeDivisorsSet(uint256,uint256,uint256)': EventFragment
    'FeeWithdraw(uint256,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'Rebalance()': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FeeDivisorsSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FeeWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Rebalance'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export class XINCH extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: XINCHInterface

  functions: {
    adminActiveTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>

    'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<[BigNumber]>

    adminUnstake(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'adminUnstake(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    approveInch(
      _toApprove: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approveInch(address)'(
      _toApprove: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    burn(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'burn(uint256,bool,uint256)'(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    calculateMintAmount(
      incrementalOneInch: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintAmount: BigNumber }>

    'calculateMintAmount(uint256,uint256)'(
      incrementalOneInch: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintAmount: BigNumber }>

    decimals(overrides?: CallOverrides): Promise<[number]>

    'decimals()'(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    defaultDecayPeriodVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'defaultDecayPeriodVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    defaultFeeVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'defaultFeeVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    defaultSlippageFeeVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'defaultSlippageFeeVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    emergencyUnstake(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'emergencyUnstake(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    feeDivisors(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    'feeDivisors()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    getBufferBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getNav(overrides?: CallOverrides): Promise<[BigNumber]>

    'getNav()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getReward(overrides?: Overrides): Promise<ContractTransaction>

    'getReward()'(overrides?: Overrides): Promise<ContractTransaction>

    getRewardExternal(overrides?: Overrides): Promise<ContractTransaction>

    'getRewardExternal()'(overrides?: Overrides): Promise<ContractTransaction>

    getStakedBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    'getStakedBalance()'(overrides?: CallOverrides): Promise<[BigNumber]>

    governanceShareVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'governanceShareVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    initialize(
      _symbol: string,
      _oneInch: string,
      _governanceMothership: string,
      _oneInchLiquidityProtocol: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(string,address,address,address,uint256,uint256,uint256)'(
      _symbol: string,
      _oneInch: string,
      _governanceMothership: string,
      _oneInchLiquidityProtocol: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    leftoverShareVote(
      govShare: BigNumberish,
      refShare: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'leftoverShareVote(uint256,uint256)'(
      govShare: BigNumberish,
      refShare: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    mint(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'mint(uint256)'(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    mintWithToken(
      oneInchAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'mintWithToken(uint256)'(
      oneInchAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    'name()'(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    pauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>

    poolDecayPeriodVote(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'poolDecayPeriodVote(address,uint256)'(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    poolFeeVote(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'poolFeeVote(address,uint256)'(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    poolSlippageFeeVote(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'poolSlippageFeeVote(address,uint256)'(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    rebalance(overrides?: Overrides): Promise<ContractTransaction>

    'rebalance()'(overrides?: Overrides): Promise<ContractTransaction>

    rebalanceExternal(overrides?: Overrides): Promise<ContractTransaction>

    'rebalanceExternal()'(overrides?: Overrides): Promise<ContractTransaction>

    referralShareVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'referralShareVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    setExchangeGovernanceAddress(
      _exchangeGovernance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setExchangeGovernanceAddress(address)'(
      _exchangeGovernance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setFactoryGovernanceAddress(
      _factoryGovernance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setFactoryGovernanceAddress(address)'(
      _factoryGovernance: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setGovernanceRewardsAddress(
      _governanceRewards: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setGovernanceRewardsAddress(address)'(
      _governanceRewards: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setManager(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setManager2(
      _manager2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setManager2(address)'(
      _manager2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    'symbol()'(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

    unstake(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'unstake(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    withdrawFees(overrides?: Overrides): Promise<ContractTransaction>

    'withdrawFees()'(overrides?: Overrides): Promise<ContractTransaction>

    withdrawNativeToken(overrides?: Overrides): Promise<ContractTransaction>

    'withdrawNativeToken()'(overrides?: Overrides): Promise<ContractTransaction>

    withdrawableOneInchFees(overrides?: CallOverrides): Promise<[BigNumber]>

    'withdrawableOneInchFees()'(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  adminActiveTimestamp(overrides?: CallOverrides): Promise<BigNumber>

  'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

  adminUnstake(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'adminUnstake(uint256)'(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  approveInch(
    _toApprove: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approveInch(address)'(
    _toApprove: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

  'balanceOf(address)'(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  burn(
    tokenAmount: BigNumberish,
    redeemForEth: boolean,
    minReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'burn(uint256,bool,uint256)'(
    tokenAmount: BigNumberish,
    redeemForEth: boolean,
    minReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  calculateMintAmount(
    incrementalOneInch: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateMintAmount(uint256,uint256)'(
    incrementalOneInch: BigNumberish,
    totalSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  decimals(overrides?: CallOverrides): Promise<number>

  'decimals()'(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  defaultDecayPeriodVote(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'defaultDecayPeriodVote(uint256)'(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  defaultFeeVote(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'defaultFeeVote(uint256)'(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  defaultSlippageFeeVote(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'defaultSlippageFeeVote(uint256)'(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  emergencyUnstake(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'emergencyUnstake(uint256)'(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  feeDivisors(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      mintFee: BigNumber
      burnFee: BigNumber
      claimFee: BigNumber
    }
  >

  'feeDivisors()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      mintFee: BigNumber
      burnFee: BigNumber
      claimFee: BigNumber
    }
  >

  getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

  'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

  getNav(overrides?: CallOverrides): Promise<BigNumber>

  'getNav()'(overrides?: CallOverrides): Promise<BigNumber>

  getReward(overrides?: Overrides): Promise<ContractTransaction>

  'getReward()'(overrides?: Overrides): Promise<ContractTransaction>

  getRewardExternal(overrides?: Overrides): Promise<ContractTransaction>

  'getRewardExternal()'(overrides?: Overrides): Promise<ContractTransaction>

  getStakedBalance(overrides?: CallOverrides): Promise<BigNumber>

  'getStakedBalance()'(overrides?: CallOverrides): Promise<BigNumber>

  governanceShareVote(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'governanceShareVote(uint256)'(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  initialize(
    _symbol: string,
    _oneInch: string,
    _governanceMothership: string,
    _oneInchLiquidityProtocol: string,
    _mintFeeDivisor: BigNumberish,
    _burnFeeDivisor: BigNumberish,
    _claimFeeDivisor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(string,address,address,address,uint256,uint256,uint256)'(
    _symbol: string,
    _oneInch: string,
    _governanceMothership: string,
    _oneInchLiquidityProtocol: string,
    _mintFeeDivisor: BigNumberish,
    _burnFeeDivisor: BigNumberish,
    _claimFeeDivisor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  leftoverShareVote(
    govShare: BigNumberish,
    refShare: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'leftoverShareVote(uint256,uint256)'(
    govShare: BigNumberish,
    refShare: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  mint(
    minReturn: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'mint(uint256)'(
    minReturn: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  mintWithToken(
    oneInchAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'mintWithToken(uint256)'(
    oneInchAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  pauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'pauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  'paused()'(overrides?: CallOverrides): Promise<boolean>

  poolDecayPeriodVote(
    pool: string,
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'poolDecayPeriodVote(address,uint256)'(
    pool: string,
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  poolFeeVote(
    pool: string,
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'poolFeeVote(address,uint256)'(
    pool: string,
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  poolSlippageFeeVote(
    pool: string,
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'poolSlippageFeeVote(address,uint256)'(
    pool: string,
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  rebalance(overrides?: Overrides): Promise<ContractTransaction>

  'rebalance()'(overrides?: Overrides): Promise<ContractTransaction>

  rebalanceExternal(overrides?: Overrides): Promise<ContractTransaction>

  'rebalanceExternal()'(overrides?: Overrides): Promise<ContractTransaction>

  referralShareVote(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'referralShareVote(uint256)'(
    vote: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  setExchangeGovernanceAddress(
    _exchangeGovernance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setExchangeGovernanceAddress(address)'(
    _exchangeGovernance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setFactoryGovernanceAddress(
    _factoryGovernance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setFactoryGovernanceAddress(address)'(
    _factoryGovernance: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setFeeDivisors(
    mintFeeDivisor: BigNumberish,
    burnFeeDivisor: BigNumberish,
    claimFeeDivisor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setFeeDivisors(uint256,uint256,uint256)'(
    mintFeeDivisor: BigNumberish,
    burnFeeDivisor: BigNumberish,
    claimFeeDivisor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setGovernanceRewardsAddress(
    _governanceRewards: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setGovernanceRewardsAddress(address)'(
    _governanceRewards: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setManager(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setManager(address)'(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setManager2(
    _manager2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setManager2(address)'(
    _manager2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  'symbol()'(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferFrom(address,address,uint256)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  unpauseContract(overrides?: Overrides): Promise<ContractTransaction>

  'unpauseContract()'(overrides?: Overrides): Promise<ContractTransaction>

  unstake(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'unstake(uint256)'(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  withdrawFees(overrides?: Overrides): Promise<ContractTransaction>

  'withdrawFees()'(overrides?: Overrides): Promise<ContractTransaction>

  withdrawNativeToken(overrides?: Overrides): Promise<ContractTransaction>

  'withdrawNativeToken()'(overrides?: Overrides): Promise<ContractTransaction>

  withdrawableOneInchFees(overrides?: CallOverrides): Promise<BigNumber>

  'withdrawableOneInchFees()'(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    adminActiveTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    adminUnstake(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'adminUnstake(uint256)'(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    approveInch(_toApprove: string, overrides?: CallOverrides): Promise<void>

    'approveInch(address)'(
      _toApprove: string,
      overrides?: CallOverrides
    ): Promise<void>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'burn(uint256,bool,uint256)'(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    calculateMintAmount(
      incrementalOneInch: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateMintAmount(uint256,uint256)'(
      incrementalOneInch: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<number>

    'decimals()'(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    defaultDecayPeriodVote(
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'defaultDecayPeriodVote(uint256)'(
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    defaultFeeVote(vote: BigNumberish, overrides?: CallOverrides): Promise<void>

    'defaultFeeVote(uint256)'(
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    defaultSlippageFeeVote(
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'defaultSlippageFeeVote(uint256)'(
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    emergencyUnstake(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'emergencyUnstake(uint256)'(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    feeDivisors(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    'feeDivisors()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getNav(overrides?: CallOverrides): Promise<BigNumber>

    'getNav()'(overrides?: CallOverrides): Promise<BigNumber>

    getReward(overrides?: CallOverrides): Promise<void>

    'getReward()'(overrides?: CallOverrides): Promise<void>

    getRewardExternal(overrides?: CallOverrides): Promise<void>

    'getRewardExternal()'(overrides?: CallOverrides): Promise<void>

    getStakedBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getStakedBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    governanceShareVote(
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'governanceShareVote(uint256)'(
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    initialize(
      _symbol: string,
      _oneInch: string,
      _governanceMothership: string,
      _oneInchLiquidityProtocol: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(string,address,address,address,uint256,uint256,uint256)'(
      _symbol: string,
      _oneInch: string,
      _governanceMothership: string,
      _oneInchLiquidityProtocol: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    leftoverShareVote(
      govShare: BigNumberish,
      refShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'leftoverShareVote(uint256,uint256)'(
      govShare: BigNumberish,
      refShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    mint(minReturn: BigNumberish, overrides?: CallOverrides): Promise<void>

    'mint(uint256)'(
      minReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    mintWithToken(
      oneInchAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'mintWithToken(uint256)'(
      oneInchAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    pauseContract(overrides?: CallOverrides): Promise<boolean>

    'pauseContract()'(overrides?: CallOverrides): Promise<boolean>

    paused(overrides?: CallOverrides): Promise<boolean>

    'paused()'(overrides?: CallOverrides): Promise<boolean>

    poolDecayPeriodVote(
      pool: string,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'poolDecayPeriodVote(address,uint256)'(
      pool: string,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    poolFeeVote(
      pool: string,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'poolFeeVote(address,uint256)'(
      pool: string,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    poolSlippageFeeVote(
      pool: string,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'poolSlippageFeeVote(address,uint256)'(
      pool: string,
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    rebalance(overrides?: CallOverrides): Promise<void>

    'rebalance()'(overrides?: CallOverrides): Promise<void>

    rebalanceExternal(overrides?: CallOverrides): Promise<void>

    'rebalanceExternal()'(overrides?: CallOverrides): Promise<void>

    referralShareVote(
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'referralShareVote(uint256)'(
      vote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    setExchangeGovernanceAddress(
      _exchangeGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setExchangeGovernanceAddress(address)'(
      _exchangeGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>

    setFactoryGovernanceAddress(
      _factoryGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setFactoryGovernanceAddress(address)'(
      _factoryGovernance: string,
      overrides?: CallOverrides
    ): Promise<void>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setGovernanceRewardsAddress(
      _governanceRewards: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setGovernanceRewardsAddress(address)'(
      _governanceRewards: string,
      overrides?: CallOverrides
    ): Promise<void>

    setManager(_manager: string, overrides?: CallOverrides): Promise<void>

    'setManager(address)'(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<void>

    setManager2(_manager2: string, overrides?: CallOverrides): Promise<void>

    'setManager2(address)'(
      _manager2: string,
      overrides?: CallOverrides
    ): Promise<void>

    symbol(overrides?: CallOverrides): Promise<string>

    'symbol()'(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    unpauseContract(overrides?: CallOverrides): Promise<boolean>

    'unpauseContract()'(overrides?: CallOverrides): Promise<boolean>

    unstake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    'unstake(uint256)'(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawFees(overrides?: CallOverrides): Promise<void>

    'withdrawFees()'(overrides?: CallOverrides): Promise<void>

    withdrawNativeToken(overrides?: CallOverrides): Promise<void>

    'withdrawNativeToken()'(overrides?: CallOverrides): Promise<void>

    withdrawableOneInchFees(overrides?: CallOverrides): Promise<BigNumber>

    'withdrawableOneInchFees()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter

    FeeDivisorsSet(mintFee: null, burnFee: null, claimFee: null): EventFilter

    FeeWithdraw(ethFee: null, inchFee: null): EventFilter

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter

    Paused(account: null): EventFilter

    Rebalance(): EventFilter

    Transfer(from: string | null, to: string | null, value: null): EventFilter

    Unpaused(account: null): EventFilter
  }

  estimateGas: {
    adminActiveTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    'adminActiveTimestamp()'(overrides?: CallOverrides): Promise<BigNumber>

    adminUnstake(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'adminUnstake(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    approveInch(_toApprove: string, overrides?: Overrides): Promise<BigNumber>

    'approveInch(address)'(
      _toApprove: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'burn(uint256,bool,uint256)'(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    calculateMintAmount(
      incrementalOneInch: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateMintAmount(uint256,uint256)'(
      incrementalOneInch: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    defaultDecayPeriodVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'defaultDecayPeriodVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    defaultFeeVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'defaultFeeVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    defaultSlippageFeeVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'defaultSlippageFeeVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    emergencyUnstake(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'emergencyUnstake(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    feeDivisors(overrides?: CallOverrides): Promise<BigNumber>

    'feeDivisors()'(overrides?: CallOverrides): Promise<BigNumber>

    getBufferBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getBufferBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    getNav(overrides?: CallOverrides): Promise<BigNumber>

    'getNav()'(overrides?: CallOverrides): Promise<BigNumber>

    getReward(overrides?: Overrides): Promise<BigNumber>

    'getReward()'(overrides?: Overrides): Promise<BigNumber>

    getRewardExternal(overrides?: Overrides): Promise<BigNumber>

    'getRewardExternal()'(overrides?: Overrides): Promise<BigNumber>

    getStakedBalance(overrides?: CallOverrides): Promise<BigNumber>

    'getStakedBalance()'(overrides?: CallOverrides): Promise<BigNumber>

    governanceShareVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'governanceShareVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    initialize(
      _symbol: string,
      _oneInch: string,
      _governanceMothership: string,
      _oneInchLiquidityProtocol: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(string,address,address,address,uint256,uint256,uint256)'(
      _symbol: string,
      _oneInch: string,
      _governanceMothership: string,
      _oneInchLiquidityProtocol: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    leftoverShareVote(
      govShare: BigNumberish,
      refShare: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'leftoverShareVote(uint256,uint256)'(
      govShare: BigNumberish,
      refShare: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    mint(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'mint(uint256)'(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    mintWithToken(
      oneInchAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'mintWithToken(uint256)'(
      oneInchAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    pauseContract(overrides?: Overrides): Promise<BigNumber>

    'pauseContract()'(overrides?: Overrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>

    poolDecayPeriodVote(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'poolDecayPeriodVote(address,uint256)'(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    poolFeeVote(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'poolFeeVote(address,uint256)'(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    poolSlippageFeeVote(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'poolSlippageFeeVote(address,uint256)'(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    rebalance(overrides?: Overrides): Promise<BigNumber>

    'rebalance()'(overrides?: Overrides): Promise<BigNumber>

    rebalanceExternal(overrides?: Overrides): Promise<BigNumber>

    'rebalanceExternal()'(overrides?: Overrides): Promise<BigNumber>

    referralShareVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'referralShareVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    setExchangeGovernanceAddress(
      _exchangeGovernance: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setExchangeGovernanceAddress(address)'(
      _exchangeGovernance: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setFactoryGovernanceAddress(
      _factoryGovernance: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setFactoryGovernanceAddress(address)'(
      _factoryGovernance: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setGovernanceRewardsAddress(
      _governanceRewards: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setGovernanceRewardsAddress(address)'(
      _governanceRewards: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setManager(_manager: string, overrides?: Overrides): Promise<BigNumber>

    'setManager(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setManager2(_manager2: string, overrides?: Overrides): Promise<BigNumber>

    'setManager2(address)'(
      _manager2: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    unpauseContract(overrides?: Overrides): Promise<BigNumber>

    'unpauseContract()'(overrides?: Overrides): Promise<BigNumber>

    unstake(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>

    'unstake(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    withdrawFees(overrides?: Overrides): Promise<BigNumber>

    'withdrawFees()'(overrides?: Overrides): Promise<BigNumber>

    withdrawNativeToken(overrides?: Overrides): Promise<BigNumber>

    'withdrawNativeToken()'(overrides?: Overrides): Promise<BigNumber>

    withdrawableOneInchFees(overrides?: CallOverrides): Promise<BigNumber>

    'withdrawableOneInchFees()'(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    adminActiveTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'adminActiveTimestamp()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    adminUnstake(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'adminUnstake(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    approveInch(
      _toApprove: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approveInch(address)'(
      _toApprove: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    burn(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'burn(uint256,bool,uint256)'(
      tokenAmount: BigNumberish,
      redeemForEth: boolean,
      minReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    calculateMintAmount(
      incrementalOneInch: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateMintAmount(uint256,uint256)'(
      incrementalOneInch: BigNumberish,
      totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    defaultDecayPeriodVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'defaultDecayPeriodVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    defaultFeeVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'defaultFeeVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    defaultSlippageFeeVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'defaultSlippageFeeVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    emergencyUnstake(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'emergencyUnstake(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    feeDivisors(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'feeDivisors()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getBufferBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getBufferBalance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNav(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getNav()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getReward(overrides?: Overrides): Promise<PopulatedTransaction>

    'getReward()'(overrides?: Overrides): Promise<PopulatedTransaction>

    getRewardExternal(overrides?: Overrides): Promise<PopulatedTransaction>

    'getRewardExternal()'(overrides?: Overrides): Promise<PopulatedTransaction>

    getStakedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getStakedBalance()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    governanceShareVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'governanceShareVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    initialize(
      _symbol: string,
      _oneInch: string,
      _governanceMothership: string,
      _oneInchLiquidityProtocol: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(string,address,address,address,uint256,uint256,uint256)'(
      _symbol: string,
      _oneInch: string,
      _governanceMothership: string,
      _oneInchLiquidityProtocol: string,
      _mintFeeDivisor: BigNumberish,
      _burnFeeDivisor: BigNumberish,
      _claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    leftoverShareVote(
      govShare: BigNumberish,
      refShare: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'leftoverShareVote(uint256,uint256)'(
      govShare: BigNumberish,
      refShare: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    mint(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'mint(uint256)'(
      minReturn: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    mintWithToken(
      oneInchAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'mintWithToken(uint256)'(
      oneInchAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'pauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    poolDecayPeriodVote(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'poolDecayPeriodVote(address,uint256)'(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    poolFeeVote(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'poolFeeVote(address,uint256)'(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    poolSlippageFeeVote(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'poolSlippageFeeVote(address,uint256)'(
      pool: string,
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    rebalance(overrides?: Overrides): Promise<PopulatedTransaction>

    'rebalance()'(overrides?: Overrides): Promise<PopulatedTransaction>

    rebalanceExternal(overrides?: Overrides): Promise<PopulatedTransaction>

    'rebalanceExternal()'(overrides?: Overrides): Promise<PopulatedTransaction>

    referralShareVote(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'referralShareVote(uint256)'(
      vote: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    setExchangeGovernanceAddress(
      _exchangeGovernance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setExchangeGovernanceAddress(address)'(
      _exchangeGovernance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setFactoryGovernanceAddress(
      _factoryGovernance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setFactoryGovernanceAddress(address)'(
      _factoryGovernance: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setFeeDivisors(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setFeeDivisors(uint256,uint256,uint256)'(
      mintFeeDivisor: BigNumberish,
      burnFeeDivisor: BigNumberish,
      claimFeeDivisor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setGovernanceRewardsAddress(
      _governanceRewards: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setGovernanceRewardsAddress(address)'(
      _governanceRewards: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setManager(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setManager2(
      _manager2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setManager2(address)'(
      _manager2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    unpauseContract(overrides?: Overrides): Promise<PopulatedTransaction>

    'unpauseContract()'(overrides?: Overrides): Promise<PopulatedTransaction>

    unstake(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'unstake(uint256)'(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    withdrawFees(overrides?: Overrides): Promise<PopulatedTransaction>

    'withdrawFees()'(overrides?: Overrides): Promise<PopulatedTransaction>

    withdrawNativeToken(overrides?: Overrides): Promise<PopulatedTransaction>

    'withdrawNativeToken()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    withdrawableOneInchFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'withdrawableOneInchFees()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}
