/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface ExchangeRatesInterface extends ethers.utils.Interface {
  functions: {
    'SELFDESTRUCT_DELAY()': FunctionFragment
    'acceptOwnership()': FunctionFragment
    'addAggregator(bytes32,address)': FunctionFragment
    'aggregatorKeys(uint256)': FunctionFragment
    'aggregators(bytes32)': FunctionFragment
    'anyRateIsStale(bytes32[])': FunctionFragment
    'currentRoundForRate(bytes32)': FunctionFragment
    'deleteRate(bytes32)': FunctionFragment
    'effectiveValue(bytes32,uint256,bytes32)': FunctionFragment
    'effectiveValueAndRates(bytes32,uint256,bytes32)': FunctionFragment
    'effectiveValueAtRound(bytes32,uint256,bytes32,uint256,uint256)': FunctionFragment
    'getCurrentRoundId(bytes32)': FunctionFragment
    'getLastRoundIdBeforeElapsedSecs(bytes32,uint256,uint256,uint256)': FunctionFragment
    'initiateSelfDestruct()': FunctionFragment
    'initiationTime()': FunctionFragment
    'inversePricing(bytes32)': FunctionFragment
    'invertedKeys(uint256)': FunctionFragment
    'lastRateUpdateTimes(bytes32)': FunctionFragment
    'lastRateUpdateTimesForCurrencies(bytes32[])': FunctionFragment
    'nominateNewOwner(address)': FunctionFragment
    'nominatedOwner()': FunctionFragment
    'oracle()': FunctionFragment
    'owner()': FunctionFragment
    'rateAndTimestampAtRound(bytes32,uint256)': FunctionFragment
    'rateAndUpdatedTime(bytes32)': FunctionFragment
    'rateForCurrency(bytes32)': FunctionFragment
    'rateIsFrozen(bytes32)': FunctionFragment
    'rateIsStale(bytes32)': FunctionFragment
    'rateStalePeriod()': FunctionFragment
    'ratesAndStaleForCurrencies(bytes32[])': FunctionFragment
    'ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32,uint256)': FunctionFragment
    'ratesForCurrencies(bytes32[])': FunctionFragment
    'removeAggregator(bytes32)': FunctionFragment
    'removeInversePricing(bytes32)': FunctionFragment
    'selfDestruct()': FunctionFragment
    'selfDestructBeneficiary()': FunctionFragment
    'selfDestructInitiated()': FunctionFragment
    'setInversePricing(bytes32,uint256,uint256,uint256,bool,bool)': FunctionFragment
    'setOracle(address)': FunctionFragment
    'setRateStalePeriod(uint256)': FunctionFragment
    'setSelfDestructBeneficiary(address)': FunctionFragment
    'terminateSelfDestruct()': FunctionFragment
    'updateRates(bytes32[],uint256[],uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'SELFDESTRUCT_DELAY',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'acceptOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'addAggregator',
    values: [BytesLike, string]
  ): string
  encodeFunctionData(
    functionFragment: 'aggregatorKeys',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'aggregators',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'anyRateIsStale',
    values: [BytesLike[]]
  ): string
  encodeFunctionData(
    functionFragment: 'currentRoundForRate',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'deleteRate',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'effectiveValue',
    values: [BytesLike, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'effectiveValueAndRates',
    values: [BytesLike, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'effectiveValueAtRound',
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getCurrentRoundId',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'getLastRoundIdBeforeElapsedSecs',
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'initiateSelfDestruct',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'initiationTime',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'inversePricing',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'invertedKeys',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'lastRateUpdateTimes',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'lastRateUpdateTimesForCurrencies',
    values: [BytesLike[]]
  ): string
  encodeFunctionData(
    functionFragment: 'nominateNewOwner',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'nominatedOwner',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'rateAndTimestampAtRound',
    values: [BytesLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'rateAndUpdatedTime',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'rateForCurrency',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'rateIsFrozen',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'rateIsStale',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'rateStalePeriod',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'ratesAndStaleForCurrencies',
    values: [BytesLike[]]
  ): string
  encodeFunctionData(
    functionFragment: 'ratesAndUpdatedTimeForCurrencyLastNRounds',
    values: [BytesLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'ratesForCurrencies',
    values: [BytesLike[]]
  ): string
  encodeFunctionData(
    functionFragment: 'removeAggregator',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'removeInversePricing',
    values: [BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'selfDestruct',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'selfDestructBeneficiary',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'selfDestructInitiated',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setInversePricing',
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean
    ]
  ): string
  encodeFunctionData(functionFragment: 'setOracle', values: [string]): string
  encodeFunctionData(
    functionFragment: 'setRateStalePeriod',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setSelfDestructBeneficiary',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'terminateSelfDestruct',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'updateRates',
    values: [BytesLike[], BigNumberish[], BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'SELFDESTRUCT_DELAY',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'acceptOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'addAggregator',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'aggregatorKeys',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'aggregators', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'anyRateIsStale',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'currentRoundForRate',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'deleteRate', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'effectiveValue',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'effectiveValueAndRates',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'effectiveValueAtRound',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getCurrentRoundId',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLastRoundIdBeforeElapsedSecs',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'initiateSelfDestruct',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'initiationTime',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'inversePricing',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'invertedKeys',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'lastRateUpdateTimes',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'lastRateUpdateTimesForCurrencies',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'nominateNewOwner',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'nominatedOwner',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'rateAndTimestampAtRound',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'rateAndUpdatedTime',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'rateForCurrency',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'rateIsFrozen',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'rateIsStale', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'rateStalePeriod',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'ratesAndStaleForCurrencies',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'ratesAndUpdatedTimeForCurrencyLastNRounds',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'ratesForCurrencies',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'removeAggregator',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'removeInversePricing',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'selfDestruct',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'selfDestructBeneficiary',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'selfDestructInitiated',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setInversePricing',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setOracle', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setRateStalePeriod',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setSelfDestructBeneficiary',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'terminateSelfDestruct',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'updateRates', data: BytesLike): Result

  events: {
    'AggregatorAdded(bytes32,address)': EventFragment
    'AggregatorRemoved(bytes32,address)': EventFragment
    'InversePriceConfigured(bytes32,uint256,uint256,uint256)': EventFragment
    'InversePriceFrozen(bytes32)': EventFragment
    'OracleUpdated(address)': EventFragment
    'OwnerChanged(address,address)': EventFragment
    'OwnerNominated(address)': EventFragment
    'RateDeleted(bytes32)': EventFragment
    'RateStalePeriodUpdated(uint256)': EventFragment
    'RatesUpdated(bytes32[],uint256[])': EventFragment
    'SelfDestructBeneficiaryUpdated(address)': EventFragment
    'SelfDestructInitiated(uint256)': EventFragment
    'SelfDestructTerminated()': EventFragment
    'SelfDestructed(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AggregatorAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AggregatorRemoved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'InversePriceConfigured'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'InversePriceFrozen'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OracleUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RateDeleted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RateStalePeriodUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RatesUpdated'): EventFragment
  getEvent(
    nameOrSignatureOrTopic: 'SelfDestructBeneficiaryUpdated'
  ): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SelfDestructInitiated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SelfDestructTerminated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SelfDestructed'): EventFragment
}

export class ExchangeRates extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: ExchangeRatesInterface

  functions: {
    SELFDESTRUCT_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>

    'SELFDESTRUCT_DELAY()'(overrides?: CallOverrides): Promise<[BigNumber]>

    acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'acceptOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    addAggregator(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'addAggregator(bytes32,address)'(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    aggregatorKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    'aggregatorKeys(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    aggregators(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>

    'aggregators(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>

    anyRateIsStale(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>

    'anyRateIsStale(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>

    currentRoundForRate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'currentRoundForRate(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    deleteRate(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'deleteRate(bytes32)'(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    effectiveValue(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>

    'effectiveValue(bytes32,uint256,bytes32)'(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>

    effectiveValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber
        sourceRate: BigNumber
        destinationRate: BigNumber
      }
    >

    'effectiveValueAndRates(bytes32,uint256,bytes32)'(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber
        sourceRate: BigNumber
        destinationRate: BigNumber
      }
    >

    effectiveValueAtRound(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>

    'effectiveValueAtRound(bytes32,uint256,bytes32,uint256,uint256)'(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>

    getCurrentRoundId(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getCurrentRoundId(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getLastRoundIdBeforeElapsedSecs(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getLastRoundIdBeforeElapsedSecs(bytes32,uint256,uint256,uint256)'(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    initiateSelfDestruct(overrides?: Overrides): Promise<ContractTransaction>

    'initiateSelfDestruct()'(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    initiationTime(overrides?: CallOverrides): Promise<[BigNumber]>

    'initiationTime()'(overrides?: CallOverrides): Promise<[BigNumber]>

    inversePricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        entryPoint: BigNumber
        upperLimit: BigNumber
        lowerLimit: BigNumber
        frozen: boolean
      }
    >

    'inversePricing(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        entryPoint: BigNumber
        upperLimit: BigNumber
        lowerLimit: BigNumber
        frozen: boolean
      }
    >

    invertedKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    'invertedKeys(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    lastRateUpdateTimes(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'lastRateUpdateTimes(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    lastRateUpdateTimesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>

    'lastRateUpdateTimesForCurrencies(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'nominateNewOwner(address)'(
      _owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>

    'nominatedOwner()'(overrides?: CallOverrides): Promise<[string]>

    oracle(overrides?: CallOverrides): Promise<[string]>

    'oracle()'(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    rateAndTimestampAtRound(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>

    'rateAndTimestampAtRound(bytes32,uint256)'(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>

    rateAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>

    'rateAndUpdatedTime(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>

    rateForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'rateForCurrency(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    rateIsFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    'rateIsFrozen(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    rateIsStale(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    'rateIsStale(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    rateStalePeriod(overrides?: CallOverrides): Promise<[BigNumber]>

    'rateStalePeriod()'(overrides?: CallOverrides): Promise<[BigNumber]>

    ratesAndStaleForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], boolean]>

    'ratesAndStaleForCurrencies(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], boolean]>

    ratesAndUpdatedTimeForCurrencyLastNRounds(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { rates: BigNumber[]; times: BigNumber[] }
    >

    'ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32,uint256)'(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { rates: BigNumber[]; times: BigNumber[] }
    >

    ratesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>

    'ratesForCurrencies(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>

    removeAggregator(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'removeAggregator(bytes32)'(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    removeInversePricing(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'removeInversePricing(bytes32)'(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    selfDestruct(overrides?: Overrides): Promise<ContractTransaction>

    'selfDestruct()'(overrides?: Overrides): Promise<ContractTransaction>

    selfDestructBeneficiary(overrides?: CallOverrides): Promise<[string]>

    'selfDestructBeneficiary()'(overrides?: CallOverrides): Promise<[string]>

    selfDestructInitiated(overrides?: CallOverrides): Promise<[boolean]>

    'selfDestructInitiated()'(overrides?: CallOverrides): Promise<[boolean]>

    setInversePricing(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freeze: boolean,
      freezeAtUpperLimit: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setInversePricing(bytes32,uint256,uint256,uint256,bool,bool)'(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freeze: boolean,
      freezeAtUpperLimit: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setOracle(
      _oracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setOracle(address)'(
      _oracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setRateStalePeriod(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setRateStalePeriod(uint256)'(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setSelfDestructBeneficiary(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setSelfDestructBeneficiary(address)'(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    terminateSelfDestruct(overrides?: Overrides): Promise<ContractTransaction>

    'terminateSelfDestruct()'(
      overrides?: Overrides
    ): Promise<ContractTransaction>

    updateRates(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'updateRates(bytes32[],uint256[],uint256)'(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>
  }

  SELFDESTRUCT_DELAY(overrides?: CallOverrides): Promise<BigNumber>

  'SELFDESTRUCT_DELAY()'(overrides?: CallOverrides): Promise<BigNumber>

  acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'acceptOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  addAggregator(
    currencyKey: BytesLike,
    aggregatorAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'addAggregator(bytes32,address)'(
    currencyKey: BytesLike,
    aggregatorAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  aggregatorKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  'aggregatorKeys(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  aggregators(arg0: BytesLike, overrides?: CallOverrides): Promise<string>

  'aggregators(bytes32)'(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>

  anyRateIsStale(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>

  'anyRateIsStale(bytes32[])'(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>

  currentRoundForRate(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'currentRoundForRate(bytes32)'(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  deleteRate(
    currencyKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'deleteRate(bytes32)'(
    currencyKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  effectiveValue(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'effectiveValue(bytes32,uint256,bytes32)'(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  effectiveValueAndRates(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      value: BigNumber
      sourceRate: BigNumber
      destinationRate: BigNumber
    }
  >

  'effectiveValueAndRates(bytes32,uint256,bytes32)'(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      value: BigNumber
      sourceRate: BigNumber
      destinationRate: BigNumber
    }
  >

  effectiveValueAtRound(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    roundIdForSrc: BigNumberish,
    roundIdForDest: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'effectiveValueAtRound(bytes32,uint256,bytes32,uint256,uint256)'(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    roundIdForSrc: BigNumberish,
    roundIdForDest: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getCurrentRoundId(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getCurrentRoundId(bytes32)'(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getLastRoundIdBeforeElapsedSecs(
    currencyKey: BytesLike,
    startingRoundId: BigNumberish,
    startingTimestamp: BigNumberish,
    timediff: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'getLastRoundIdBeforeElapsedSecs(bytes32,uint256,uint256,uint256)'(
    currencyKey: BytesLike,
    startingRoundId: BigNumberish,
    startingTimestamp: BigNumberish,
    timediff: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  initiateSelfDestruct(overrides?: Overrides): Promise<ContractTransaction>

  'initiateSelfDestruct()'(overrides?: Overrides): Promise<ContractTransaction>

  initiationTime(overrides?: CallOverrides): Promise<BigNumber>

  'initiationTime()'(overrides?: CallOverrides): Promise<BigNumber>

  inversePricing(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      entryPoint: BigNumber
      upperLimit: BigNumber
      lowerLimit: BigNumber
      frozen: boolean
    }
  >

  'inversePricing(bytes32)'(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      entryPoint: BigNumber
      upperLimit: BigNumber
      lowerLimit: BigNumber
      frozen: boolean
    }
  >

  invertedKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  'invertedKeys(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  lastRateUpdateTimes(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'lastRateUpdateTimes(bytes32)'(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  lastRateUpdateTimesForCurrencies(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  'lastRateUpdateTimesForCurrencies(bytes32[])'(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'nominateNewOwner(address)'(
    _owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  nominatedOwner(overrides?: CallOverrides): Promise<string>

  'nominatedOwner()'(overrides?: CallOverrides): Promise<string>

  oracle(overrides?: CallOverrides): Promise<string>

  'oracle()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  rateAndTimestampAtRound(
    currencyKey: BytesLike,
    roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>

  'rateAndTimestampAtRound(bytes32,uint256)'(
    currencyKey: BytesLike,
    roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>

  rateAndUpdatedTime(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>

  'rateAndUpdatedTime(bytes32)'(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>

  rateForCurrency(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'rateForCurrency(bytes32)'(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  rateIsFrozen(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>

  'rateIsFrozen(bytes32)'(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>

  rateIsStale(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>

  'rateIsStale(bytes32)'(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>

  rateStalePeriod(overrides?: CallOverrides): Promise<BigNumber>

  'rateStalePeriod()'(overrides?: CallOverrides): Promise<BigNumber>

  ratesAndStaleForCurrencies(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], boolean]>

  'ratesAndStaleForCurrencies(bytes32[])'(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], boolean]>

  ratesAndUpdatedTimeForCurrencyLastNRounds(
    currencyKey: BytesLike,
    numRounds: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & { rates: BigNumber[]; times: BigNumber[] }
  >

  'ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32,uint256)'(
    currencyKey: BytesLike,
    numRounds: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & { rates: BigNumber[]; times: BigNumber[] }
  >

  ratesForCurrencies(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  'ratesForCurrencies(bytes32[])'(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>

  removeAggregator(
    currencyKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'removeAggregator(bytes32)'(
    currencyKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  removeInversePricing(
    currencyKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'removeInversePricing(bytes32)'(
    currencyKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  selfDestruct(overrides?: Overrides): Promise<ContractTransaction>

  'selfDestruct()'(overrides?: Overrides): Promise<ContractTransaction>

  selfDestructBeneficiary(overrides?: CallOverrides): Promise<string>

  'selfDestructBeneficiary()'(overrides?: CallOverrides): Promise<string>

  selfDestructInitiated(overrides?: CallOverrides): Promise<boolean>

  'selfDestructInitiated()'(overrides?: CallOverrides): Promise<boolean>

  setInversePricing(
    currencyKey: BytesLike,
    entryPoint: BigNumberish,
    upperLimit: BigNumberish,
    lowerLimit: BigNumberish,
    freeze: boolean,
    freezeAtUpperLimit: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setInversePricing(bytes32,uint256,uint256,uint256,bool,bool)'(
    currencyKey: BytesLike,
    entryPoint: BigNumberish,
    upperLimit: BigNumberish,
    lowerLimit: BigNumberish,
    freeze: boolean,
    freezeAtUpperLimit: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setOracle(
    _oracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setOracle(address)'(
    _oracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setRateStalePeriod(
    _time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setRateStalePeriod(uint256)'(
    _time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setSelfDestructBeneficiary(
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setSelfDestructBeneficiary(address)'(
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  terminateSelfDestruct(overrides?: Overrides): Promise<ContractTransaction>

  'terminateSelfDestruct()'(overrides?: Overrides): Promise<ContractTransaction>

  updateRates(
    currencyKeys: BytesLike[],
    newRates: BigNumberish[],
    timeSent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'updateRates(bytes32[],uint256[],uint256)'(
    currencyKeys: BytesLike[],
    newRates: BigNumberish[],
    timeSent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  callStatic: {
    SELFDESTRUCT_DELAY(overrides?: CallOverrides): Promise<BigNumber>

    'SELFDESTRUCT_DELAY()'(overrides?: CallOverrides): Promise<BigNumber>

    acceptOwnership(overrides?: CallOverrides): Promise<void>

    'acceptOwnership()'(overrides?: CallOverrides): Promise<void>

    addAggregator(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'addAggregator(bytes32,address)'(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    aggregatorKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    'aggregatorKeys(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    aggregators(arg0: BytesLike, overrides?: CallOverrides): Promise<string>

    'aggregators(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>

    anyRateIsStale(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>

    'anyRateIsStale(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>

    currentRoundForRate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'currentRoundForRate(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    deleteRate(currencyKey: BytesLike, overrides?: CallOverrides): Promise<void>

    'deleteRate(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    effectiveValue(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'effectiveValue(bytes32,uint256,bytes32)'(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    effectiveValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber
        sourceRate: BigNumber
        destinationRate: BigNumber
      }
    >

    'effectiveValueAndRates(bytes32,uint256,bytes32)'(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber
        sourceRate: BigNumber
        destinationRate: BigNumber
      }
    >

    effectiveValueAtRound(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'effectiveValueAtRound(bytes32,uint256,bytes32,uint256,uint256)'(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCurrentRoundId(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getCurrentRoundId(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getLastRoundIdBeforeElapsedSecs(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getLastRoundIdBeforeElapsedSecs(bytes32,uint256,uint256,uint256)'(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initiateSelfDestruct(overrides?: CallOverrides): Promise<void>

    'initiateSelfDestruct()'(overrides?: CallOverrides): Promise<void>

    initiationTime(overrides?: CallOverrides): Promise<BigNumber>

    'initiationTime()'(overrides?: CallOverrides): Promise<BigNumber>

    inversePricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        entryPoint: BigNumber
        upperLimit: BigNumber
        lowerLimit: BigNumber
        frozen: boolean
      }
    >

    'inversePricing(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        entryPoint: BigNumber
        upperLimit: BigNumber
        lowerLimit: BigNumber
        frozen: boolean
      }
    >

    invertedKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    'invertedKeys(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    lastRateUpdateTimes(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'lastRateUpdateTimes(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    lastRateUpdateTimesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    'lastRateUpdateTimesForCurrencies(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>

    'nominateNewOwner(address)'(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>

    nominatedOwner(overrides?: CallOverrides): Promise<string>

    'nominatedOwner()'(overrides?: CallOverrides): Promise<string>

    oracle(overrides?: CallOverrides): Promise<string>

    'oracle()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    rateAndTimestampAtRound(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>

    'rateAndTimestampAtRound(bytes32,uint256)'(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>

    rateAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>

    'rateAndUpdatedTime(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>

    rateForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'rateForCurrency(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    rateIsFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>

    'rateIsFrozen(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>

    rateIsStale(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>

    'rateIsStale(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>

    rateStalePeriod(overrides?: CallOverrides): Promise<BigNumber>

    'rateStalePeriod()'(overrides?: CallOverrides): Promise<BigNumber>

    ratesAndStaleForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], boolean]>

    'ratesAndStaleForCurrencies(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], boolean]>

    ratesAndUpdatedTimeForCurrencyLastNRounds(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { rates: BigNumber[]; times: BigNumber[] }
    >

    'ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32,uint256)'(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { rates: BigNumber[]; times: BigNumber[] }
    >

    ratesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    'ratesForCurrencies(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    removeAggregator(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'removeAggregator(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    removeInversePricing(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    'removeInversePricing(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    selfDestruct(overrides?: CallOverrides): Promise<void>

    'selfDestruct()'(overrides?: CallOverrides): Promise<void>

    selfDestructBeneficiary(overrides?: CallOverrides): Promise<string>

    'selfDestructBeneficiary()'(overrides?: CallOverrides): Promise<string>

    selfDestructInitiated(overrides?: CallOverrides): Promise<boolean>

    'selfDestructInitiated()'(overrides?: CallOverrides): Promise<boolean>

    setInversePricing(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freeze: boolean,
      freezeAtUpperLimit: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'setInversePricing(bytes32,uint256,uint256,uint256,bool,bool)'(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freeze: boolean,
      freezeAtUpperLimit: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    setOracle(_oracle: string, overrides?: CallOverrides): Promise<void>

    'setOracle(address)'(
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<void>

    setRateStalePeriod(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setRateStalePeriod(uint256)'(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setSelfDestructBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setSelfDestructBeneficiary(address)'(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>

    terminateSelfDestruct(overrides?: CallOverrides): Promise<void>

    'terminateSelfDestruct()'(overrides?: CallOverrides): Promise<void>

    updateRates(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'updateRates(bytes32[],uint256[],uint256)'(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>
  }

  filters: {
    AggregatorAdded(currencyKey: null, aggregator: null): EventFilter

    AggregatorRemoved(currencyKey: null, aggregator: null): EventFilter

    InversePriceConfigured(
      currencyKey: null,
      entryPoint: null,
      upperLimit: null,
      lowerLimit: null
    ): EventFilter

    InversePriceFrozen(currencyKey: null): EventFilter

    OracleUpdated(newOracle: null): EventFilter

    OwnerChanged(oldOwner: null, newOwner: null): EventFilter

    OwnerNominated(newOwner: null): EventFilter

    RateDeleted(currencyKey: null): EventFilter

    RateStalePeriodUpdated(rateStalePeriod: null): EventFilter

    RatesUpdated(currencyKeys: null, newRates: null): EventFilter

    SelfDestructBeneficiaryUpdated(newBeneficiary: null): EventFilter

    SelfDestructInitiated(selfDestructDelay: null): EventFilter

    SelfDestructTerminated(): EventFilter

    SelfDestructed(beneficiary: null): EventFilter
  }

  estimateGas: {
    SELFDESTRUCT_DELAY(overrides?: CallOverrides): Promise<BigNumber>

    'SELFDESTRUCT_DELAY()'(overrides?: CallOverrides): Promise<BigNumber>

    acceptOwnership(overrides?: Overrides): Promise<BigNumber>

    'acceptOwnership()'(overrides?: Overrides): Promise<BigNumber>

    addAggregator(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'addAggregator(bytes32,address)'(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    aggregatorKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'aggregatorKeys(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    aggregators(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'aggregators(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    anyRateIsStale(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'anyRateIsStale(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    currentRoundForRate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'currentRoundForRate(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    deleteRate(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'deleteRate(bytes32)'(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    effectiveValue(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'effectiveValue(bytes32,uint256,bytes32)'(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    effectiveValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'effectiveValueAndRates(bytes32,uint256,bytes32)'(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    effectiveValueAtRound(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'effectiveValueAtRound(bytes32,uint256,bytes32,uint256,uint256)'(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getCurrentRoundId(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getCurrentRoundId(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getLastRoundIdBeforeElapsedSecs(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getLastRoundIdBeforeElapsedSecs(bytes32,uint256,uint256,uint256)'(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    initiateSelfDestruct(overrides?: Overrides): Promise<BigNumber>

    'initiateSelfDestruct()'(overrides?: Overrides): Promise<BigNumber>

    initiationTime(overrides?: CallOverrides): Promise<BigNumber>

    'initiationTime()'(overrides?: CallOverrides): Promise<BigNumber>

    inversePricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'inversePricing(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    invertedKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'invertedKeys(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    lastRateUpdateTimes(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'lastRateUpdateTimes(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    lastRateUpdateTimesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'lastRateUpdateTimesForCurrencies(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    nominateNewOwner(_owner: string, overrides?: Overrides): Promise<BigNumber>

    'nominateNewOwner(address)'(
      _owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>

    'nominatedOwner()'(overrides?: CallOverrides): Promise<BigNumber>

    oracle(overrides?: CallOverrides): Promise<BigNumber>

    'oracle()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    rateAndTimestampAtRound(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'rateAndTimestampAtRound(bytes32,uint256)'(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    rateAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'rateAndUpdatedTime(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    rateForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'rateForCurrency(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    rateIsFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'rateIsFrozen(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    rateIsStale(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'rateIsStale(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    rateStalePeriod(overrides?: CallOverrides): Promise<BigNumber>

    'rateStalePeriod()'(overrides?: CallOverrides): Promise<BigNumber>

    ratesAndStaleForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'ratesAndStaleForCurrencies(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    ratesAndUpdatedTimeForCurrencyLastNRounds(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32,uint256)'(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    ratesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'ratesForCurrencies(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    removeAggregator(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'removeAggregator(bytes32)'(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    removeInversePricing(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    'removeInversePricing(bytes32)'(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>

    selfDestruct(overrides?: Overrides): Promise<BigNumber>

    'selfDestruct()'(overrides?: Overrides): Promise<BigNumber>

    selfDestructBeneficiary(overrides?: CallOverrides): Promise<BigNumber>

    'selfDestructBeneficiary()'(overrides?: CallOverrides): Promise<BigNumber>

    selfDestructInitiated(overrides?: CallOverrides): Promise<BigNumber>

    'selfDestructInitiated()'(overrides?: CallOverrides): Promise<BigNumber>

    setInversePricing(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freeze: boolean,
      freezeAtUpperLimit: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setInversePricing(bytes32,uint256,uint256,uint256,bool,bool)'(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freeze: boolean,
      freezeAtUpperLimit: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    setOracle(_oracle: string, overrides?: Overrides): Promise<BigNumber>

    'setOracle(address)'(
      _oracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setRateStalePeriod(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setRateStalePeriod(uint256)'(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setSelfDestructBeneficiary(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setSelfDestructBeneficiary(address)'(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    terminateSelfDestruct(overrides?: Overrides): Promise<BigNumber>

    'terminateSelfDestruct()'(overrides?: Overrides): Promise<BigNumber>

    updateRates(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'updateRates(bytes32[],uint256[],uint256)'(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    SELFDESTRUCT_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'SELFDESTRUCT_DELAY()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    acceptOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'acceptOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    addAggregator(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'addAggregator(bytes32,address)'(
      currencyKey: BytesLike,
      aggregatorAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    aggregatorKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'aggregatorKeys(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    aggregators(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'aggregators(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    anyRateIsStale(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'anyRateIsStale(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    currentRoundForRate(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'currentRoundForRate(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    deleteRate(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'deleteRate(bytes32)'(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    effectiveValue(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'effectiveValue(bytes32,uint256,bytes32)'(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    effectiveValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'effectiveValueAndRates(bytes32,uint256,bytes32)'(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    effectiveValueAtRound(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'effectiveValueAtRound(bytes32,uint256,bytes32,uint256,uint256)'(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCurrentRoundId(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getCurrentRoundId(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getLastRoundIdBeforeElapsedSecs(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getLastRoundIdBeforeElapsedSecs(bytes32,uint256,uint256,uint256)'(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initiateSelfDestruct(overrides?: Overrides): Promise<PopulatedTransaction>

    'initiateSelfDestruct()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    initiationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'initiationTime()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    inversePricing(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'inversePricing(bytes32)'(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    invertedKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'invertedKeys(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    lastRateUpdateTimes(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'lastRateUpdateTimes(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    lastRateUpdateTimesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'lastRateUpdateTimesForCurrencies(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'nominateNewOwner(address)'(
      _owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'nominatedOwner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'oracle()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rateAndTimestampAtRound(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'rateAndTimestampAtRound(bytes32,uint256)'(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    rateAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'rateAndUpdatedTime(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    rateForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'rateForCurrency(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    rateIsFrozen(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'rateIsFrozen(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    rateIsStale(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'rateIsStale(bytes32)'(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    rateStalePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'rateStalePeriod()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    ratesAndStaleForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'ratesAndStaleForCurrencies(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    ratesAndUpdatedTimeForCurrencyLastNRounds(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32,uint256)'(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    ratesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'ratesForCurrencies(bytes32[])'(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    removeAggregator(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'removeAggregator(bytes32)'(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    removeInversePricing(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'removeInversePricing(bytes32)'(
      currencyKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    selfDestruct(overrides?: Overrides): Promise<PopulatedTransaction>

    'selfDestruct()'(overrides?: Overrides): Promise<PopulatedTransaction>

    selfDestructBeneficiary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'selfDestructBeneficiary()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    selfDestructInitiated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'selfDestructInitiated()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    setInversePricing(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freeze: boolean,
      freezeAtUpperLimit: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setInversePricing(bytes32,uint256,uint256,uint256,bool,bool)'(
      currencyKey: BytesLike,
      entryPoint: BigNumberish,
      upperLimit: BigNumberish,
      lowerLimit: BigNumberish,
      freeze: boolean,
      freezeAtUpperLimit: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setOracle(
      _oracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setOracle(address)'(
      _oracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setRateStalePeriod(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setRateStalePeriod(uint256)'(
      _time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setSelfDestructBeneficiary(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setSelfDestructBeneficiary(address)'(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    terminateSelfDestruct(overrides?: Overrides): Promise<PopulatedTransaction>

    'terminateSelfDestruct()'(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    updateRates(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'updateRates(bytes32[],uint256[],uint256)'(
      currencyKeys: BytesLike[],
      newRates: BigNumberish[],
      timeSent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>
  }
}
