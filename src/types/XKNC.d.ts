/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface XKNCInterface extends ethers.utils.Interface {
  functions: {
    'addFallbackAllowedAddress(address)': FunctionFragment
    'addKyberFeeHandler(address,address)': FunctionFragment
    'addPauser(address)': FunctionFragment
    'addToWhitelist(address)': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'approveKyberProxyContract(address,bool)': FunctionFragment
    'approveStakingContract(bool)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'burn(uint256,bool,uint256)': FunctionFragment
    'claimReward(uint256,uint256[],uint256[],uint256[])': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'feeDivisors(uint256)': FunctionFragment
    'feeStructure()': FunctionFragment
    'getAvailableKncBalanceTwei()': FunctionFragment
    'getFeeRate(uint8)': FunctionFragment
    'getFundEthBalanceWei()': FunctionFragment
    'getFundKncBalanceTwei()': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'isOwner()': FunctionFragment
    'isPauser(address)': FunctionFragment
    'isWhitelisted(address)': FunctionFragment
    'knc()': FunctionFragment
    'kyberDao()': FunctionFragment
    'kyberFeeHandlers(uint256)': FunctionFragment
    'kyberProxy()': FunctionFragment
    'kyberStaking()': FunctionFragment
    'mandate()': FunctionFragment
    'mint(uint256)': FunctionFragment
    'mintWithKnc(uint256)': FunctionFragment
    'name()': FunctionFragment
    'owner()': FunctionFragment
    'pause()': FunctionFragment
    'paused()': FunctionFragment
    'removefromWhitelist(address)': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'renouncePauser()': FunctionFragment
    'setFeeDivisors(uint256,uint256,uint256)': FunctionFragment
    'symbol()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpause()': FunctionFragment
    'unwindRewards(uint256[],uint256[],uint256[])': FunctionFragment
    'vote(uint256,uint256)': FunctionFragment
    'withdrawFees()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'addFallbackAllowedAddress',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'addKyberFeeHandler',
    values: [string, string]
  ): string
  encodeFunctionData(functionFragment: 'addPauser', values: [string]): string
  encodeFunctionData(
    functionFragment: 'addToWhitelist',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'approveKyberProxyContract',
    values: [string, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'approveStakingContract',
    values: [boolean]
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(
    functionFragment: 'burn',
    values: [BigNumberish, boolean, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'claimReward',
    values: [BigNumberish, BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'feeDivisors',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'feeStructure',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getAvailableKncBalanceTwei',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getFeeRate',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getFundEthBalanceWei',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getFundKncBalanceTwei',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'isOwner', values?: undefined): string
  encodeFunctionData(functionFragment: 'isPauser', values: [string]): string
  encodeFunctionData(
    functionFragment: 'isWhitelisted',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'knc', values?: undefined): string
  encodeFunctionData(functionFragment: 'kyberDao', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'kyberFeeHandlers',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'kyberProxy', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'kyberStaking',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'mandate', values?: undefined): string
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'mintWithKnc',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'removefromWhitelist',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'renouncePauser',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setFeeDivisors',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'unwindRewards',
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'vote',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawFees',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'addFallbackAllowedAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'addKyberFeeHandler',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'addPauser', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'addToWhitelist',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'approveKyberProxyContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'approveStakingContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimReward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'feeDivisors', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'feeStructure',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAvailableKncBalanceTwei',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getFeeRate', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getFundEthBalanceWei',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getFundKncBalanceTwei',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isPauser', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'isWhitelisted',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'knc', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'kyberDao', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'kyberFeeHandlers',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'kyberProxy', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'kyberStaking',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'mandate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mintWithKnc', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removefromWhitelist',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'renouncePauser',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setFeeDivisors',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'unwindRewards',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'vote', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'withdrawFees',
    data: BytesLike
  ): Result

  events: {
    'AddedToWhitelist(address)': EventFragment
    'Approval(address,address,uint256)': EventFragment
    'Burn(address,bool,uint256,uint256)': EventFragment
    'EthRewardClaimed(uint256,uint256)': EventFragment
    'FeeDivisorsSet(uint256,uint256,uint256)': EventFragment
    'FeeWithdraw(uint256,uint256,uint256)': EventFragment
    'MintWithEth(address,uint256,uint256,uint256)': EventFragment
    'MintWithKnc(address,uint256,uint256,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'PauserAdded(address)': EventFragment
    'PauserRemoved(address)': EventFragment
    'RemovedFromWhitelist(address)': EventFragment
    'TokenRewardClaimed(uint256,uint256)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AddedToWhitelist'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EthRewardClaimed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FeeDivisorsSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FeeWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MintWithEth'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'MintWithKnc'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PauserAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PauserRemoved'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RemovedFromWhitelist'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TokenRewardClaimed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export class XKNC extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: XKNCInterface

  functions: {
    addFallbackAllowedAddress(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'addFallbackAllowedAddress(address)'(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    addKyberFeeHandler(
      _kyberfeeHandlerAddress: string,
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'addKyberFeeHandler(address,address)'(
      _kyberfeeHandlerAddress: string,
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    addPauser(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'addPauser(address)'(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    addToWhitelist(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'addToWhitelist(address)'(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    approveKyberProxyContract(
      _token: string,
      _reset: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approveKyberProxyContract(address,bool)'(
      _token: string,
      _reset: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    approveStakingContract(
      _reset: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approveStakingContract(bool)'(
      _reset: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    burn(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'burn(uint256,bool,uint256)'(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    claimReward(
      epoch: BigNumberish,
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'claimReward(uint256,uint256[],uint256[],uint256[])'(
      epoch: BigNumberish,
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    decimals(overrides?: CallOverrides): Promise<[number]>

    'decimals()'(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    feeDivisors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'feeDivisors(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    feeStructure(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    'feeStructure()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    getAvailableKncBalanceTwei(overrides?: CallOverrides): Promise<[BigNumber]>

    'getAvailableKncBalanceTwei()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getFeeRate(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getFeeRate(uint8)'(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getFundEthBalanceWei(overrides?: CallOverrides): Promise<[BigNumber]>

    'getFundEthBalanceWei()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getFundKncBalanceTwei(overrides?: CallOverrides): Promise<[BigNumber]>

    'getFundKncBalanceTwei()'(overrides?: CallOverrides): Promise<[BigNumber]>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    isOwner(overrides?: CallOverrides): Promise<[boolean]>

    'isOwner()'(overrides?: CallOverrides): Promise<[boolean]>

    isPauser(account: string, overrides?: CallOverrides): Promise<[boolean]>

    'isPauser(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    isWhitelisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    'isWhitelisted(address)'(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    knc(overrides?: CallOverrides): Promise<[string]>

    'knc()'(overrides?: CallOverrides): Promise<[string]>

    kyberDao(overrides?: CallOverrides): Promise<[string]>

    'kyberDao()'(overrides?: CallOverrides): Promise<[string]>

    kyberFeeHandlers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    'kyberFeeHandlers(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    kyberProxy(overrides?: CallOverrides): Promise<[string]>

    'kyberProxy()'(overrides?: CallOverrides): Promise<[string]>

    kyberStaking(overrides?: CallOverrides): Promise<[string]>

    'kyberStaking()'(overrides?: CallOverrides): Promise<[string]>

    mandate(overrides?: CallOverrides): Promise<[string]>

    'mandate()'(overrides?: CallOverrides): Promise<[string]>

    mint(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'mint(uint256)'(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    mintWithKnc(
      kncAmountTwei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'mintWithKnc(uint256)'(
      kncAmountTwei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    'name()'(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    pause(overrides?: Overrides): Promise<ContractTransaction>

    'pause()'(overrides?: Overrides): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>

    removefromWhitelist(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'removefromWhitelist(address)'(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    renouncePauser(overrides?: Overrides): Promise<ContractTransaction>

    'renouncePauser()'(overrides?: Overrides): Promise<ContractTransaction>

    setFeeDivisors(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setFeeDivisors(uint256,uint256,uint256)'(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    'symbol()'(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    unpause(overrides?: Overrides): Promise<ContractTransaction>

    'unpause()'(overrides?: Overrides): Promise<ContractTransaction>

    unwindRewards(
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'unwindRewards(uint256[],uint256[],uint256[])'(
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    vote(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'vote(uint256,uint256)'(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    withdrawFees(overrides?: Overrides): Promise<ContractTransaction>

    'withdrawFees()'(overrides?: Overrides): Promise<ContractTransaction>
  }

  addFallbackAllowedAddress(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'addFallbackAllowedAddress(address)'(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  addKyberFeeHandler(
    _kyberfeeHandlerAddress: string,
    _tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'addKyberFeeHandler(address,address)'(
    _kyberfeeHandlerAddress: string,
    _tokenAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  addPauser(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'addPauser(address)'(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  addToWhitelist(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'addToWhitelist(address)'(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  approveKyberProxyContract(
    _token: string,
    _reset: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approveKyberProxyContract(address,bool)'(
    _token: string,
    _reset: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  approveStakingContract(
    _reset: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approveStakingContract(bool)'(
    _reset: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

  'balanceOf(address)'(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  burn(
    tokensToRedeemTwei: BigNumberish,
    redeemForKnc: boolean,
    minRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'burn(uint256,bool,uint256)'(
    tokensToRedeemTwei: BigNumberish,
    redeemForKnc: boolean,
    minRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  claimReward(
    epoch: BigNumberish,
    feeHandlerIndices: BigNumberish[],
    maxAmountsToSell: BigNumberish[],
    minRates: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'claimReward(uint256,uint256[],uint256[],uint256[])'(
    epoch: BigNumberish,
    feeHandlerIndices: BigNumberish[],
    maxAmountsToSell: BigNumberish[],
    minRates: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  decimals(overrides?: CallOverrides): Promise<number>

  'decimals()'(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  feeDivisors(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'feeDivisors(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  feeStructure(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      mintFee: BigNumber
      burnFee: BigNumber
      claimFee: BigNumber
    }
  >

  'feeStructure()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      mintFee: BigNumber
      burnFee: BigNumber
      claimFee: BigNumber
    }
  >

  getAvailableKncBalanceTwei(overrides?: CallOverrides): Promise<BigNumber>

  'getAvailableKncBalanceTwei()'(overrides?: CallOverrides): Promise<BigNumber>

  getFeeRate(_type: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'getFeeRate(uint8)'(
    _type: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getFundEthBalanceWei(overrides?: CallOverrides): Promise<BigNumber>

  'getFundEthBalanceWei()'(overrides?: CallOverrides): Promise<BigNumber>

  getFundKncBalanceTwei(overrides?: CallOverrides): Promise<BigNumber>

  'getFundKncBalanceTwei()'(overrides?: CallOverrides): Promise<BigNumber>

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  isOwner(overrides?: CallOverrides): Promise<boolean>

  'isOwner()'(overrides?: CallOverrides): Promise<boolean>

  isPauser(account: string, overrides?: CallOverrides): Promise<boolean>

  'isPauser(address)'(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  isWhitelisted(_address: string, overrides?: CallOverrides): Promise<boolean>

  'isWhitelisted(address)'(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  knc(overrides?: CallOverrides): Promise<string>

  'knc()'(overrides?: CallOverrides): Promise<string>

  kyberDao(overrides?: CallOverrides): Promise<string>

  'kyberDao()'(overrides?: CallOverrides): Promise<string>

  kyberFeeHandlers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  'kyberFeeHandlers(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  kyberProxy(overrides?: CallOverrides): Promise<string>

  'kyberProxy()'(overrides?: CallOverrides): Promise<string>

  kyberStaking(overrides?: CallOverrides): Promise<string>

  'kyberStaking()'(overrides?: CallOverrides): Promise<string>

  mandate(overrides?: CallOverrides): Promise<string>

  'mandate()'(overrides?: CallOverrides): Promise<string>

  mint(
    minRate: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'mint(uint256)'(
    minRate: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  mintWithKnc(
    kncAmountTwei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'mintWithKnc(uint256)'(
    kncAmountTwei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  pause(overrides?: Overrides): Promise<ContractTransaction>

  'pause()'(overrides?: Overrides): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  'paused()'(overrides?: CallOverrides): Promise<boolean>

  removefromWhitelist(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'removefromWhitelist(address)'(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  renouncePauser(overrides?: Overrides): Promise<ContractTransaction>

  'renouncePauser()'(overrides?: Overrides): Promise<ContractTransaction>

  setFeeDivisors(
    _mintFee: BigNumberish,
    _burnFee: BigNumberish,
    _claimFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setFeeDivisors(uint256,uint256,uint256)'(
    _mintFee: BigNumberish,
    _burnFee: BigNumberish,
    _claimFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  'symbol()'(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferFrom(address,address,uint256)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  unpause(overrides?: Overrides): Promise<ContractTransaction>

  'unpause()'(overrides?: Overrides): Promise<ContractTransaction>

  unwindRewards(
    feeHandlerIndices: BigNumberish[],
    maxAmountsToSell: BigNumberish[],
    minRates: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'unwindRewards(uint256[],uint256[],uint256[])'(
    feeHandlerIndices: BigNumberish[],
    maxAmountsToSell: BigNumberish[],
    minRates: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  vote(
    campaignID: BigNumberish,
    option: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'vote(uint256,uint256)'(
    campaignID: BigNumberish,
    option: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  withdrawFees(overrides?: Overrides): Promise<ContractTransaction>

  'withdrawFees()'(overrides?: Overrides): Promise<ContractTransaction>

  callStatic: {
    addFallbackAllowedAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>

    'addFallbackAllowedAddress(address)'(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>

    addKyberFeeHandler(
      _kyberfeeHandlerAddress: string,
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    'addKyberFeeHandler(address,address)'(
      _kyberfeeHandlerAddress: string,
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    addPauser(account: string, overrides?: CallOverrides): Promise<void>

    'addPauser(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>

    addToWhitelist(_address: string, overrides?: CallOverrides): Promise<void>

    'addToWhitelist(address)'(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    approveKyberProxyContract(
      _token: string,
      _reset: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'approveKyberProxyContract(address,bool)'(
      _token: string,
      _reset: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    approveStakingContract(
      _reset: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'approveStakingContract(bool)'(
      _reset: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'burn(uint256,bool,uint256)'(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    claimReward(
      epoch: BigNumberish,
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>

    'claimReward(uint256,uint256[],uint256[],uint256[])'(
      epoch: BigNumberish,
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>

    decimals(overrides?: CallOverrides): Promise<number>

    'decimals()'(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    feeDivisors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'feeDivisors(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    feeStructure(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    'feeStructure()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    getAvailableKncBalanceTwei(overrides?: CallOverrides): Promise<BigNumber>

    'getAvailableKncBalanceTwei()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getFeeRate(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getFeeRate(uint8)'(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getFundEthBalanceWei(overrides?: CallOverrides): Promise<BigNumber>

    'getFundEthBalanceWei()'(overrides?: CallOverrides): Promise<BigNumber>

    getFundKncBalanceTwei(overrides?: CallOverrides): Promise<BigNumber>

    'getFundKncBalanceTwei()'(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    isOwner(overrides?: CallOverrides): Promise<boolean>

    'isOwner()'(overrides?: CallOverrides): Promise<boolean>

    isPauser(account: string, overrides?: CallOverrides): Promise<boolean>

    'isPauser(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    isWhitelisted(_address: string, overrides?: CallOverrides): Promise<boolean>

    'isWhitelisted(address)'(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    knc(overrides?: CallOverrides): Promise<string>

    'knc()'(overrides?: CallOverrides): Promise<string>

    kyberDao(overrides?: CallOverrides): Promise<string>

    'kyberDao()'(overrides?: CallOverrides): Promise<string>

    kyberFeeHandlers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    'kyberFeeHandlers(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    kyberProxy(overrides?: CallOverrides): Promise<string>

    'kyberProxy()'(overrides?: CallOverrides): Promise<string>

    kyberStaking(overrides?: CallOverrides): Promise<string>

    'kyberStaking()'(overrides?: CallOverrides): Promise<string>

    mandate(overrides?: CallOverrides): Promise<string>

    'mandate()'(overrides?: CallOverrides): Promise<string>

    mint(minRate: BigNumberish, overrides?: CallOverrides): Promise<void>

    'mint(uint256)'(
      minRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    mintWithKnc(
      kncAmountTwei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'mintWithKnc(uint256)'(
      kncAmountTwei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    pause(overrides?: CallOverrides): Promise<void>

    'pause()'(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    'paused()'(overrides?: CallOverrides): Promise<boolean>

    removefromWhitelist(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>

    'removefromWhitelist(address)'(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    renouncePauser(overrides?: CallOverrides): Promise<void>

    'renouncePauser()'(overrides?: CallOverrides): Promise<void>

    setFeeDivisors(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setFeeDivisors(uint256,uint256,uint256)'(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    symbol(overrides?: CallOverrides): Promise<string>

    'symbol()'(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    unpause(overrides?: CallOverrides): Promise<void>

    'unpause()'(overrides?: CallOverrides): Promise<void>

    unwindRewards(
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>

    'unwindRewards(uint256[],uint256[],uint256[])'(
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>

    vote(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'vote(uint256,uint256)'(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawFees(overrides?: CallOverrides): Promise<void>

    'withdrawFees()'(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    AddedToWhitelist(account: string | null): EventFilter

    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter

    Burn(
      user: string | null,
      redeemedForKnc: null,
      burnAmount: null,
      timestamp: null
    ): EventFilter

    EthRewardClaimed(amount: null, timestamp: null): EventFilter

    FeeDivisorsSet(mintFee: null, burnFee: null, claimFee: null): EventFilter

    FeeWithdraw(ethAmount: null, kncAmount: null, timestamp: null): EventFilter

    MintWithEth(
      user: string | null,
      ethPayable: null,
      mintAmount: null,
      timestamp: null
    ): EventFilter

    MintWithKnc(
      user: string | null,
      kncPayable: null,
      mintAmount: null,
      timestamp: null
    ): EventFilter

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter

    Paused(account: null): EventFilter

    PauserAdded(account: string | null): EventFilter

    PauserRemoved(account: string | null): EventFilter

    RemovedFromWhitelist(account: string | null): EventFilter

    TokenRewardClaimed(amount: null, timestamp: null): EventFilter

    Transfer(from: string | null, to: string | null, value: null): EventFilter

    Unpaused(account: null): EventFilter
  }

  estimateGas: {
    addFallbackAllowedAddress(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'addFallbackAllowedAddress(address)'(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    addKyberFeeHandler(
      _kyberfeeHandlerAddress: string,
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'addKyberFeeHandler(address,address)'(
      _kyberfeeHandlerAddress: string,
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    addPauser(account: string, overrides?: Overrides): Promise<BigNumber>

    'addPauser(address)'(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    addToWhitelist(_address: string, overrides?: Overrides): Promise<BigNumber>

    'addToWhitelist(address)'(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    approveKyberProxyContract(
      _token: string,
      _reset: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approveKyberProxyContract(address,bool)'(
      _token: string,
      _reset: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    approveStakingContract(
      _reset: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approveStakingContract(bool)'(
      _reset: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'burn(uint256,bool,uint256)'(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    claimReward(
      epoch: BigNumberish,
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'claimReward(uint256,uint256[],uint256[],uint256[])'(
      epoch: BigNumberish,
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    feeDivisors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'feeDivisors(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    feeStructure(overrides?: CallOverrides): Promise<BigNumber>

    'feeStructure()'(overrides?: CallOverrides): Promise<BigNumber>

    getAvailableKncBalanceTwei(overrides?: CallOverrides): Promise<BigNumber>

    'getAvailableKncBalanceTwei()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getFeeRate(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getFeeRate(uint8)'(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getFundEthBalanceWei(overrides?: CallOverrides): Promise<BigNumber>

    'getFundEthBalanceWei()'(overrides?: CallOverrides): Promise<BigNumber>

    getFundKncBalanceTwei(overrides?: CallOverrides): Promise<BigNumber>

    'getFundKncBalanceTwei()'(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    isOwner(overrides?: CallOverrides): Promise<BigNumber>

    'isOwner()'(overrides?: CallOverrides): Promise<BigNumber>

    isPauser(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'isPauser(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isWhitelisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'isWhitelisted(address)'(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    knc(overrides?: CallOverrides): Promise<BigNumber>

    'knc()'(overrides?: CallOverrides): Promise<BigNumber>

    kyberDao(overrides?: CallOverrides): Promise<BigNumber>

    'kyberDao()'(overrides?: CallOverrides): Promise<BigNumber>

    kyberFeeHandlers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'kyberFeeHandlers(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    kyberProxy(overrides?: CallOverrides): Promise<BigNumber>

    'kyberProxy()'(overrides?: CallOverrides): Promise<BigNumber>

    kyberStaking(overrides?: CallOverrides): Promise<BigNumber>

    'kyberStaking()'(overrides?: CallOverrides): Promise<BigNumber>

    mandate(overrides?: CallOverrides): Promise<BigNumber>

    'mandate()'(overrides?: CallOverrides): Promise<BigNumber>

    mint(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'mint(uint256)'(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    mintWithKnc(
      kncAmountTwei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'mintWithKnc(uint256)'(
      kncAmountTwei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    pause(overrides?: Overrides): Promise<BigNumber>

    'pause()'(overrides?: Overrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>

    removefromWhitelist(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'removefromWhitelist(address)'(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    renouncePauser(overrides?: Overrides): Promise<BigNumber>

    'renouncePauser()'(overrides?: Overrides): Promise<BigNumber>

    setFeeDivisors(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setFeeDivisors(uint256,uint256,uint256)'(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    unpause(overrides?: Overrides): Promise<BigNumber>

    'unpause()'(overrides?: Overrides): Promise<BigNumber>

    unwindRewards(
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'unwindRewards(uint256[],uint256[],uint256[])'(
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>

    vote(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'vote(uint256,uint256)'(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    withdrawFees(overrides?: Overrides): Promise<BigNumber>

    'withdrawFees()'(overrides?: Overrides): Promise<BigNumber>
  }

  populateTransaction: {
    addFallbackAllowedAddress(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'addFallbackAllowedAddress(address)'(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    addKyberFeeHandler(
      _kyberfeeHandlerAddress: string,
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'addKyberFeeHandler(address,address)'(
      _kyberfeeHandlerAddress: string,
      _tokenAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    addPauser(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'addPauser(address)'(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    addToWhitelist(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'addToWhitelist(address)'(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    approveKyberProxyContract(
      _token: string,
      _reset: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approveKyberProxyContract(address,bool)'(
      _token: string,
      _reset: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    approveStakingContract(
      _reset: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approveStakingContract(bool)'(
      _reset: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    burn(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'burn(uint256,bool,uint256)'(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    claimReward(
      epoch: BigNumberish,
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'claimReward(uint256,uint256[],uint256[],uint256[])'(
      epoch: BigNumberish,
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    feeDivisors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'feeDivisors(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    feeStructure(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'feeStructure()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getAvailableKncBalanceTwei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getAvailableKncBalanceTwei()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getFeeRate(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getFeeRate(uint8)'(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getFundEthBalanceWei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getFundEthBalanceWei()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getFundKncBalanceTwei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getFundKncBalanceTwei()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isOwner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isPauser(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'isPauser(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isWhitelisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'isWhitelisted(address)'(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    knc(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'knc()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    kyberDao(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'kyberDao()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    kyberFeeHandlers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'kyberFeeHandlers(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    kyberProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'kyberProxy()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    kyberStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'kyberStaking()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mandate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'mandate()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mint(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'mint(uint256)'(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    mintWithKnc(
      kncAmountTwei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'mintWithKnc(uint256)'(
      kncAmountTwei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pause(overrides?: Overrides): Promise<PopulatedTransaction>

    'pause()'(overrides?: Overrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    removefromWhitelist(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'removefromWhitelist(address)'(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    renouncePauser(overrides?: Overrides): Promise<PopulatedTransaction>

    'renouncePauser()'(overrides?: Overrides): Promise<PopulatedTransaction>

    setFeeDivisors(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setFeeDivisors(uint256,uint256,uint256)'(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>

    'unpause()'(overrides?: Overrides): Promise<PopulatedTransaction>

    unwindRewards(
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'unwindRewards(uint256[],uint256[],uint256[])'(
      feeHandlerIndices: BigNumberish[],
      maxAmountsToSell: BigNumberish[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    vote(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'vote(uint256,uint256)'(
      campaignID: BigNumberish,
      option: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    withdrawFees(overrides?: Overrides): Promise<PopulatedTransaction>

    'withdrawFees()'(overrides?: Overrides): Promise<PopulatedTransaction>
  }
}
