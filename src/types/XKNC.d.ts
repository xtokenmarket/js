/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from 'ethers'
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'

interface XKNCInterface extends ethers.utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'approveKyberProxyContract(address,bool)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'burn(uint256,bool,uint256)': FunctionFragment
    'claimReward(uint256,uint256,address[],uint256[],bytes32[],uint256[])': FunctionFragment
    'decimals()': FunctionFragment
    'decreaseAllowance(address,uint256)': FunctionFragment
    'feeDivisors()': FunctionFragment
    'getAvailableKncBalanceTwei()': FunctionFragment
    'getFeeRate(uint8)': FunctionFragment
    'getFundEthBalanceWei()': FunctionFragment
    'getFundKncBalanceTwei()': FunctionFragment
    'getRewardDistributor()': FunctionFragment
    'increaseAllowance(address,uint256)': FunctionFragment
    'initialize(string,string,address,address,address,address,uint256,uint256,uint256)': FunctionFragment
    'lastLockedBlock(address)': FunctionFragment
    'mandate()': FunctionFragment
    'migrateV3(address,address,address,address)': FunctionFragment
    'mint(uint256)': FunctionFragment
    'mintWithToken(uint256)': FunctionFragment
    'name()': FunctionFragment
    'owner()': FunctionFragment
    'pause()': FunctionFragment
    'paused()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setFeeDivisors(uint256,uint256,uint256)': FunctionFragment
    'setManager(address)': FunctionFragment
    'setManager2(address)': FunctionFragment
    'setRewardsDistributor(address)': FunctionFragment
    'symbol()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpause()': FunctionFragment
    'vote(uint256,uint256)': FunctionFragment
    'withdrawFees()': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'allowance',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'approveKyberProxyContract',
    values: [string, boolean]
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(
    functionFragment: 'burn',
    values: [BigNumberish, boolean, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'claimReward',
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      BigNumberish[],
      BytesLike[],
      BigNumberish[]
    ]
  ): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'decreaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'feeDivisors',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getAvailableKncBalanceTwei',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getFeeRate',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getFundEthBalanceWei',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getFundKncBalanceTwei',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getRewardDistributor',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'increaseAllowance',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'lastLockedBlock',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'mandate', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'migrateV3',
    values: [string, string, string, string]
  ): string
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'mintWithToken',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'setFeeDivisors',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'setManager', values: [string]): string
  encodeFunctionData(functionFragment: 'setManager2', values: [string]): string
  encodeFunctionData(
    functionFragment: 'setRewardsDistributor',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'vote',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawFees',
    values?: undefined
  ): string

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'approveKyberProxyContract',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimReward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'feeDivisors', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getAvailableKncBalanceTwei',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getFeeRate', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getFundEthBalanceWei',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getFundKncBalanceTwei',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getRewardDistributor',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'increaseAllowance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'lastLockedBlock',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'mandate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'migrateV3', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'mintWithToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setFeeDivisors',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setManager', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setManager2', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setRewardsDistributor',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'vote', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'withdrawFees',
    data: BytesLike
  ): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'FeeDivisorsSet(uint256,uint256,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FeeDivisorsSet'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export class XKNC extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  on(event: EventFilter | string, listener: Listener): this
  once(event: EventFilter | string, listener: Listener): this
  addListener(eventName: EventFilter | string, listener: Listener): this
  removeAllListeners(eventName: EventFilter | string): this
  removeListener(eventName: any, listener: Listener): this

  interface: XKNCInterface

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    approveKyberProxyContract(
      _token: string,
      _reset: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'approveKyberProxyContract(address,bool)'(
      _token: string,
      _reset: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    burn(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'burn(uint256,bool,uint256)'(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    claimReward(
      cycle: BigNumberish,
      index: BigNumberish,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      merkleProof: BytesLike[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'claimReward(uint256,uint256,address[],uint256[],bytes32[],uint256[])'(
      cycle: BigNumberish,
      index: BigNumberish,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      merkleProof: BytesLike[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>

    decimals(overrides?: CallOverrides): Promise<[number]>

    'decimals()'(overrides?: CallOverrides): Promise<[number]>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    feeDivisors(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    'feeDivisors()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    getAvailableKncBalanceTwei(overrides?: CallOverrides): Promise<[BigNumber]>

    'getAvailableKncBalanceTwei()'(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getFeeRate(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'getFeeRate(uint8)'(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getFundEthBalanceWei(overrides?: CallOverrides): Promise<[BigNumber]>

    'getFundEthBalanceWei()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getFundKncBalanceTwei(overrides?: CallOverrides): Promise<[BigNumber]>

    'getFundKncBalanceTwei()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getRewardDistributor(overrides?: CallOverrides): Promise<[string]>

    'getRewardDistributor()'(overrides?: CallOverrides): Promise<[string]>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    initialize(
      _symbol: string,
      _mandate: string,
      _kyberStaking: string,
      _kyberProxy: string,
      _knc: string,
      _kyberDao: string,
      mintFee: BigNumberish,
      burnFee: BigNumberish,
      claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'initialize(string,string,address,address,address,address,uint256,uint256,uint256)'(
      _symbol: string,
      _mandate: string,
      _kyberStaking: string,
      _kyberProxy: string,
      _knc: string,
      _kyberDao: string,
      mintFee: BigNumberish,
      burnFee: BigNumberish,
      claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    lastLockedBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    mandate(overrides?: CallOverrides): Promise<[string]>

    'mandate()'(overrides?: CallOverrides): Promise<[string]>

    migrateV3(
      _newKnc: string,
      _newKyberDao: string,
      _newKyberStaking: string,
      _rewardsDistributor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'migrateV3(address,address,address,address)'(
      _newKnc: string,
      _newKyberDao: string,
      _newKyberStaking: string,
      _rewardsDistributor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    mint(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    'mint(uint256)'(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>

    mintWithToken(
      kncAmountTwei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'mintWithToken(uint256)'(
      kncAmountTwei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    'name()'(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    pause(overrides?: Overrides): Promise<ContractTransaction>

    'pause()'(overrides?: Overrides): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    'paused()'(overrides?: CallOverrides): Promise<[boolean]>

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

    setFeeDivisors(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setFeeDivisors(uint256,uint256,uint256)'(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setManager(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setManager2(
      _manager2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setManager2(address)'(
      _manager2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    setRewardsDistributor(
      _rewardsDistributor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'setRewardsDistributor(address)'(
      _rewardsDistributor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<[string]>

    'symbol()'(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    unpause(overrides?: Overrides): Promise<ContractTransaction>

    'unpause()'(overrides?: Overrides): Promise<ContractTransaction>

    vote(
      proposalId: BigNumberish,
      optionBitMask: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    'vote(uint256,uint256)'(
      proposalId: BigNumberish,
      optionBitMask: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>

    withdrawFees(overrides?: Overrides): Promise<ContractTransaction>

    'withdrawFees()'(overrides?: Overrides): Promise<ContractTransaction>
  }

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'allowance(address,address)'(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approve(address,uint256)'(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  approveKyberProxyContract(
    _token: string,
    _reset: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'approveKyberProxyContract(address,bool)'(
    _token: string,
    _reset: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

  'balanceOf(address)'(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  burn(
    tokensToRedeemTwei: BigNumberish,
    redeemForKnc: boolean,
    minRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'burn(uint256,bool,uint256)'(
    tokensToRedeemTwei: BigNumberish,
    redeemForKnc: boolean,
    minRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  claimReward(
    cycle: BigNumberish,
    index: BigNumberish,
    tokens: string[],
    cumulativeAmounts: BigNumberish[],
    merkleProof: BytesLike[],
    minRates: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'claimReward(uint256,uint256,address[],uint256[],bytes32[],uint256[])'(
    cycle: BigNumberish,
    index: BigNumberish,
    tokens: string[],
    cumulativeAmounts: BigNumberish[],
    merkleProof: BytesLike[],
    minRates: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>

  decimals(overrides?: CallOverrides): Promise<number>

  'decimals()'(overrides?: CallOverrides): Promise<number>

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'decreaseAllowance(address,uint256)'(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  feeDivisors(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      mintFee: BigNumber
      burnFee: BigNumber
      claimFee: BigNumber
    }
  >

  'feeDivisors()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      mintFee: BigNumber
      burnFee: BigNumber
      claimFee: BigNumber
    }
  >

  getAvailableKncBalanceTwei(overrides?: CallOverrides): Promise<BigNumber>

  'getAvailableKncBalanceTwei()'(overrides?: CallOverrides): Promise<BigNumber>

  getFeeRate(_type: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'getFeeRate(uint8)'(
    _type: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getFundEthBalanceWei(overrides?: CallOverrides): Promise<BigNumber>

  'getFundEthBalanceWei()'(overrides?: CallOverrides): Promise<BigNumber>

  getFundKncBalanceTwei(overrides?: CallOverrides): Promise<BigNumber>

  'getFundKncBalanceTwei()'(overrides?: CallOverrides): Promise<BigNumber>

  getRewardDistributor(overrides?: CallOverrides): Promise<string>

  'getRewardDistributor()'(overrides?: CallOverrides): Promise<string>

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'increaseAllowance(address,uint256)'(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  initialize(
    _symbol: string,
    _mandate: string,
    _kyberStaking: string,
    _kyberProxy: string,
    _knc: string,
    _kyberDao: string,
    mintFee: BigNumberish,
    burnFee: BigNumberish,
    claimFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'initialize(string,string,address,address,address,address,uint256,uint256,uint256)'(
    _symbol: string,
    _mandate: string,
    _kyberStaking: string,
    _kyberProxy: string,
    _knc: string,
    _kyberDao: string,
    mintFee: BigNumberish,
    burnFee: BigNumberish,
    claimFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  'lastLockedBlock(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  mandate(overrides?: CallOverrides): Promise<string>

  'mandate()'(overrides?: CallOverrides): Promise<string>

  migrateV3(
    _newKnc: string,
    _newKyberDao: string,
    _newKyberStaking: string,
    _rewardsDistributor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'migrateV3(address,address,address,address)'(
    _newKnc: string,
    _newKyberDao: string,
    _newKyberStaking: string,
    _rewardsDistributor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  mint(
    minRate: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  'mint(uint256)'(
    minRate: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>

  mintWithToken(
    kncAmountTwei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'mintWithToken(uint256)'(
    kncAmountTwei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  'name()'(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  pause(overrides?: Overrides): Promise<ContractTransaction>

  'pause()'(overrides?: Overrides): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  'paused()'(overrides?: CallOverrides): Promise<boolean>

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>

  'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>

  setFeeDivisors(
    _mintFee: BigNumberish,
    _burnFee: BigNumberish,
    _claimFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setFeeDivisors(uint256,uint256,uint256)'(
    _mintFee: BigNumberish,
    _burnFee: BigNumberish,
    _claimFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setManager(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setManager(address)'(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setManager2(
    _manager2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setManager2(address)'(
    _manager2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  setRewardsDistributor(
    _rewardsDistributor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'setRewardsDistributor(address)'(
    _rewardsDistributor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  symbol(overrides?: CallOverrides): Promise<string>

  'symbol()'(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transfer(address,uint256)'(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferFrom(address,address,uint256)'(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'transferOwnership(address)'(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  unpause(overrides?: Overrides): Promise<ContractTransaction>

  'unpause()'(overrides?: Overrides): Promise<ContractTransaction>

  vote(
    proposalId: BigNumberish,
    optionBitMask: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  'vote(uint256,uint256)'(
    proposalId: BigNumberish,
    optionBitMask: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>

  withdrawFees(overrides?: Overrides): Promise<ContractTransaction>

  'withdrawFees()'(overrides?: Overrides): Promise<ContractTransaction>

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    approveKyberProxyContract(
      _token: string,
      _reset: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    'approveKyberProxyContract(address,bool)'(
      _token: string,
      _reset: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'burn(uint256,bool,uint256)'(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    claimReward(
      cycle: BigNumberish,
      index: BigNumberish,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      merkleProof: BytesLike[],
      minRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>

    'claimReward(uint256,uint256,address[],uint256[],bytes32[],uint256[])'(
      cycle: BigNumberish,
      index: BigNumberish,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      merkleProof: BytesLike[],
      minRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>

    decimals(overrides?: CallOverrides): Promise<number>

    'decimals()'(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    feeDivisors(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    'feeDivisors()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        mintFee: BigNumber
        burnFee: BigNumber
        claimFee: BigNumber
      }
    >

    getAvailableKncBalanceTwei(overrides?: CallOverrides): Promise<BigNumber>

    'getAvailableKncBalanceTwei()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getFeeRate(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getFeeRate(uint8)'(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getFundEthBalanceWei(overrides?: CallOverrides): Promise<BigNumber>

    'getFundEthBalanceWei()'(overrides?: CallOverrides): Promise<BigNumber>

    getFundKncBalanceTwei(overrides?: CallOverrides): Promise<BigNumber>

    'getFundKncBalanceTwei()'(overrides?: CallOverrides): Promise<BigNumber>

    getRewardDistributor(overrides?: CallOverrides): Promise<string>

    'getRewardDistributor()'(overrides?: CallOverrides): Promise<string>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    initialize(
      _symbol: string,
      _mandate: string,
      _kyberStaking: string,
      _kyberProxy: string,
      _knc: string,
      _kyberDao: string,
      mintFee: BigNumberish,
      burnFee: BigNumberish,
      claimFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'initialize(string,string,address,address,address,address,uint256,uint256,uint256)'(
      _symbol: string,
      _mandate: string,
      _kyberStaking: string,
      _kyberProxy: string,
      _knc: string,
      _kyberDao: string,
      mintFee: BigNumberish,
      burnFee: BigNumberish,
      claimFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    mandate(overrides?: CallOverrides): Promise<string>

    'mandate()'(overrides?: CallOverrides): Promise<string>

    migrateV3(
      _newKnc: string,
      _newKyberDao: string,
      _newKyberStaking: string,
      _rewardsDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>

    'migrateV3(address,address,address,address)'(
      _newKnc: string,
      _newKyberDao: string,
      _newKyberStaking: string,
      _rewardsDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>

    mint(minRate: BigNumberish, overrides?: CallOverrides): Promise<void>

    'mint(uint256)'(
      minRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    mintWithToken(
      kncAmountTwei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'mintWithToken(uint256)'(
      kncAmountTwei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    'name()'(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    pause(overrides?: CallOverrides): Promise<void>

    'pause()'(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    'paused()'(overrides?: CallOverrides): Promise<boolean>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    'renounceOwnership()'(overrides?: CallOverrides): Promise<void>

    setFeeDivisors(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'setFeeDivisors(uint256,uint256,uint256)'(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setManager(_manager: string, overrides?: CallOverrides): Promise<void>

    'setManager(address)'(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<void>

    setManager2(_manager2: string, overrides?: CallOverrides): Promise<void>

    'setManager2(address)'(
      _manager2: string,
      overrides?: CallOverrides
    ): Promise<void>

    setRewardsDistributor(
      _rewardsDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setRewardsDistributor(address)'(
      _rewardsDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>

    symbol(overrides?: CallOverrides): Promise<string>

    'symbol()'(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>

    unpause(overrides?: CallOverrides): Promise<void>

    'unpause()'(overrides?: CallOverrides): Promise<void>

    vote(
      proposalId: BigNumberish,
      optionBitMask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'vote(uint256,uint256)'(
      proposalId: BigNumberish,
      optionBitMask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawFees(overrides?: CallOverrides): Promise<void>

    'withdrawFees()'(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter

    FeeDivisorsSet(mintFee: null, burnFee: null, claimFee: null): EventFilter

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter

    Paused(account: null): EventFilter

    Transfer(from: string | null, to: string | null, value: null): EventFilter

    Unpaused(account: null): EventFilter
  }

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    approveKyberProxyContract(
      _token: string,
      _reset: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    'approveKyberProxyContract(address,bool)'(
      _token: string,
      _reset: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burn(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'burn(uint256,bool,uint256)'(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    claimReward(
      cycle: BigNumberish,
      index: BigNumberish,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      merkleProof: BytesLike[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>

    'claimReward(uint256,uint256,address[],uint256[],bytes32[],uint256[])'(
      cycle: BigNumberish,
      index: BigNumberish,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      merkleProof: BytesLike[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    'decimals()'(overrides?: CallOverrides): Promise<BigNumber>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    feeDivisors(overrides?: CallOverrides): Promise<BigNumber>

    'feeDivisors()'(overrides?: CallOverrides): Promise<BigNumber>

    getAvailableKncBalanceTwei(overrides?: CallOverrides): Promise<BigNumber>

    'getAvailableKncBalanceTwei()'(
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getFeeRate(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getFeeRate(uint8)'(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getFundEthBalanceWei(overrides?: CallOverrides): Promise<BigNumber>

    'getFundEthBalanceWei()'(overrides?: CallOverrides): Promise<BigNumber>

    getFundKncBalanceTwei(overrides?: CallOverrides): Promise<BigNumber>

    'getFundKncBalanceTwei()'(overrides?: CallOverrides): Promise<BigNumber>

    getRewardDistributor(overrides?: CallOverrides): Promise<BigNumber>

    'getRewardDistributor()'(overrides?: CallOverrides): Promise<BigNumber>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    initialize(
      _symbol: string,
      _mandate: string,
      _kyberStaking: string,
      _kyberProxy: string,
      _knc: string,
      _kyberDao: string,
      mintFee: BigNumberish,
      burnFee: BigNumberish,
      claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'initialize(string,string,address,address,address,address,uint256,uint256,uint256)'(
      _symbol: string,
      _mandate: string,
      _kyberStaking: string,
      _kyberProxy: string,
      _knc: string,
      _kyberDao: string,
      mintFee: BigNumberish,
      burnFee: BigNumberish,
      claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    lastLockedBlock(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    mandate(overrides?: CallOverrides): Promise<BigNumber>

    'mandate()'(overrides?: CallOverrides): Promise<BigNumber>

    migrateV3(
      _newKnc: string,
      _newKyberDao: string,
      _newKyberStaking: string,
      _rewardsDistributor: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'migrateV3(address,address,address,address)'(
      _newKnc: string,
      _newKyberDao: string,
      _newKyberStaking: string,
      _rewardsDistributor: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    mint(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    'mint(uint256)'(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>

    mintWithToken(
      kncAmountTwei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'mintWithToken(uint256)'(
      kncAmountTwei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    'name()'(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    pause(overrides?: Overrides): Promise<BigNumber>

    'pause()'(overrides?: Overrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    'paused()'(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>

    'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>

    setFeeDivisors(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setFeeDivisors(uint256,uint256,uint256)'(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    setManager(_manager: string, overrides?: Overrides): Promise<BigNumber>

    'setManager(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setManager2(_manager2: string, overrides?: Overrides): Promise<BigNumber>

    'setManager2(address)'(
      _manager2: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    setRewardsDistributor(
      _rewardsDistributor: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'setRewardsDistributor(address)'(
      _rewardsDistributor: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>

    unpause(overrides?: Overrides): Promise<BigNumber>

    'unpause()'(overrides?: Overrides): Promise<BigNumber>

    vote(
      proposalId: BigNumberish,
      optionBitMask: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    'vote(uint256,uint256)'(
      proposalId: BigNumberish,
      optionBitMask: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>

    withdrawFees(overrides?: Overrides): Promise<BigNumber>

    'withdrawFees()'(overrides?: Overrides): Promise<BigNumber>
  }

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'allowance(address,address)'(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approve(address,uint256)'(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    approveKyberProxyContract(
      _token: string,
      _reset: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'approveKyberProxyContract(address,bool)'(
      _token: string,
      _reset: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'balanceOf(address)'(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    burn(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'burn(uint256,bool,uint256)'(
      tokensToRedeemTwei: BigNumberish,
      redeemForKnc: boolean,
      minRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    claimReward(
      cycle: BigNumberish,
      index: BigNumberish,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      merkleProof: BytesLike[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'claimReward(uint256,uint256,address[],uint256[],bytes32[],uint256[])'(
      cycle: BigNumberish,
      index: BigNumberish,
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      merkleProof: BytesLike[],
      minRates: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'decimals()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'decreaseAllowance(address,uint256)'(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    feeDivisors(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'feeDivisors()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getAvailableKncBalanceTwei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getAvailableKncBalanceTwei()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getFeeRate(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getFeeRate(uint8)'(
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getFundEthBalanceWei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getFundEthBalanceWei()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getFundKncBalanceTwei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getFundKncBalanceTwei()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRewardDistributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getRewardDistributor()'(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'increaseAllowance(address,uint256)'(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    initialize(
      _symbol: string,
      _mandate: string,
      _kyberStaking: string,
      _kyberProxy: string,
      _knc: string,
      _kyberDao: string,
      mintFee: BigNumberish,
      burnFee: BigNumberish,
      claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'initialize(string,string,address,address,address,address,uint256,uint256,uint256)'(
      _symbol: string,
      _mandate: string,
      _kyberStaking: string,
      _kyberProxy: string,
      _knc: string,
      _kyberDao: string,
      mintFee: BigNumberish,
      burnFee: BigNumberish,
      claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    lastLockedBlock(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'lastLockedBlock(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    mandate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'mandate()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    migrateV3(
      _newKnc: string,
      _newKyberDao: string,
      _newKyberStaking: string,
      _rewardsDistributor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'migrateV3(address,address,address,address)'(
      _newKnc: string,
      _newKyberDao: string,
      _newKyberStaking: string,
      _rewardsDistributor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    mint(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    'mint(uint256)'(
      minRate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>

    mintWithToken(
      kncAmountTwei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'mintWithToken(uint256)'(
      kncAmountTwei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pause(overrides?: Overrides): Promise<PopulatedTransaction>

    'pause()'(overrides?: Overrides): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'paused()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>

    'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>

    setFeeDivisors(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setFeeDivisors(uint256,uint256,uint256)'(
      _mintFee: BigNumberish,
      _burnFee: BigNumberish,
      _claimFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setManager(address)'(
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setManager2(
      _manager2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setManager2(address)'(
      _manager2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    setRewardsDistributor(
      _rewardsDistributor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'setRewardsDistributor(address)'(
      _rewardsDistributor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transfer(address,uint256)'(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferFrom(address,address,uint256)'(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'transferOwnership(address)'(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>

    'unpause()'(overrides?: Overrides): Promise<PopulatedTransaction>

    vote(
      proposalId: BigNumberish,
      optionBitMask: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    'vote(uint256,uint256)'(
      proposalId: BigNumberish,
      optionBitMask: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>

    withdrawFees(overrides?: Overrides): Promise<PopulatedTransaction>

    'withdrawFees()'(overrides?: Overrides): Promise<PopulatedTransaction>
  }
}
